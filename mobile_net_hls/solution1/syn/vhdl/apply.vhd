-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity apply is
port (
    m_axi_inputs_AWVALID : OUT STD_LOGIC;
    m_axi_inputs_AWREADY : IN STD_LOGIC;
    m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WVALID : OUT STD_LOGIC;
    m_axi_inputs_WREADY : IN STD_LOGIC;
    m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_WLAST : OUT STD_LOGIC;
    m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARVALID : OUT STD_LOGIC;
    m_axi_inputs_ARREADY : IN STD_LOGIC;
    m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RVALID : IN STD_LOGIC;
    m_axi_inputs_RREADY : OUT STD_LOGIC;
    m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_RLAST : IN STD_LOGIC;
    m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BVALID : IN STD_LOGIC;
    m_axi_inputs_BREADY : OUT STD_LOGIC;
    m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    inputs_offset1 : IN STD_LOGIC_VECTOR (17 downto 0);
    m_axi_outputs_AWVALID : OUT STD_LOGIC;
    m_axi_outputs_AWREADY : IN STD_LOGIC;
    m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_WVALID : OUT STD_LOGIC;
    m_axi_outputs_WREADY : IN STD_LOGIC;
    m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_WLAST : OUT STD_LOGIC;
    m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_ARVALID : OUT STD_LOGIC;
    m_axi_outputs_ARREADY : IN STD_LOGIC;
    m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_RVALID : IN STD_LOGIC;
    m_axi_outputs_RREADY : OUT STD_LOGIC;
    m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_outputs_RLAST : IN STD_LOGIC;
    m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_BVALID : IN STD_LOGIC;
    m_axi_outputs_BREADY : OUT STD_LOGIC;
    m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    outputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    outputs_offset2 : IN STD_LOGIC_VECTOR (9 downto 0);
    cntl_V_din : OUT STD_LOGIC;
    cntl_V_full_n : IN STD_LOGIC;
    cntl_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    inputs_offset_ap_vld : IN STD_LOGIC;
    inputs_offset1_ap_vld : IN STD_LOGIC;
    outputs_offset2_ap_vld : IN STD_LOGIC;
    outputs_offset_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of apply is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal load_data353167_U0_ap_start : STD_LOGIC;
    signal load_data353167_U0_start_full_n : STD_LOGIC;
    signal load_data353167_U0_ap_done : STD_LOGIC;
    signal load_data353167_U0_ap_continue : STD_LOGIC;
    signal load_data353167_U0_ap_idle : STD_LOGIC;
    signal load_data353167_U0_ap_ready : STD_LOGIC;
    signal load_data353167_U0_start_out : STD_LOGIC;
    signal load_data353167_U0_start_write : STD_LOGIC;
    signal load_data353167_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal load_data353167_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data353167_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data353167_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal load_data353167_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal load_data353167_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data353167_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal load_data353167_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data353167_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal load_data353167_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_data353167_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_data353167_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal load_data353167_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal load_data353167_U0_input_buffer_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal load_data353167_U0_input_buffer_V_write : STD_LOGIC;
    signal load_data353167_U0_data_buffer_V_din : STD_LOGIC;
    signal load_data353167_U0_data_buffer_V_write : STD_LOGIC;
    signal load_data353167_U0_data_n_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data353167_U0_data_n_V_write : STD_LOGIC;
    signal load_data353167_U0_data_r_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data353167_U0_data_r_V_write : STD_LOGIC;
    signal load_data353167_U0_data_c_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_data353167_U0_data_c_V_write : STD_LOGIC;
    signal load_data353167_U0_outputs_offset_c_din : STD_LOGIC_VECTOR (9 downto 0);
    signal load_data353167_U0_outputs_offset_c_write : STD_LOGIC;
    signal load_data353167_U0_outputs_offset_out_din : STD_LOGIC_VECTOR (30 downto 0);
    signal load_data353167_U0_outputs_offset_out_write : STD_LOGIC;
    signal compute_pro_U0_ap_start : STD_LOGIC;
    signal compute_pro_U0_ap_done : STD_LOGIC;
    signal compute_pro_U0_ap_continue : STD_LOGIC;
    signal compute_pro_U0_ap_idle : STD_LOGIC;
    signal compute_pro_U0_ap_ready : STD_LOGIC;
    signal compute_pro_U0_input_buffer_V_read : STD_LOGIC;
    signal compute_pro_U0_output_buffer_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_pro_U0_output_buffer_V_write : STD_LOGIC;
    signal compute_pro_U0_data_buffer_V_dout : STD_LOGIC;
    signal compute_pro_U0_data_buffer_V_read : STD_LOGIC;
    signal compute_pro_U0_result_buffer_V_din : STD_LOGIC;
    signal compute_pro_U0_result_buffer_V_write : STD_LOGIC;
    signal compute_pro_U0_data_n_V_read : STD_LOGIC;
    signal compute_pro_U0_data_r_V_read : STD_LOGIC;
    signal compute_pro_U0_data_c_V_read : STD_LOGIC;
    signal compute_pro_U0_result_n_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_pro_U0_result_n_V_write : STD_LOGIC;
    signal compute_pro_U0_result_r_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_pro_U0_result_r_V_write : STD_LOGIC;
    signal compute_pro_U0_result_c_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_pro_U0_result_c_V_write : STD_LOGIC;
    signal output_result_U0_ap_start : STD_LOGIC;
    signal output_result_U0_ap_done : STD_LOGIC;
    signal output_result_U0_ap_continue : STD_LOGIC;
    signal output_result_U0_ap_idle : STD_LOGIC;
    signal output_result_U0_ap_ready : STD_LOGIC;
    signal output_result_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal output_result_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal output_result_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_result_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal output_result_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal output_result_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal output_result_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal output_result_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal output_result_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal output_result_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal output_result_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal output_result_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_result_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal output_result_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal output_result_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal output_result_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal output_result_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_result_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_result_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal output_result_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal output_result_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_result_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal output_result_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal output_result_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal output_result_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal output_result_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal output_result_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal output_result_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal output_result_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal output_result_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_result_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal output_result_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal output_result_U0_outputs_offset_read : STD_LOGIC;
    signal output_result_U0_outputs_offset_c_read : STD_LOGIC;
    signal output_result_U0_output_buffer_V_read : STD_LOGIC;
    signal output_result_U0_result_buffer_V_dout : STD_LOGIC;
    signal output_result_U0_result_buffer_V_read : STD_LOGIC;
    signal output_result_U0_result_n_V_read : STD_LOGIC;
    signal output_result_U0_result_r_V_read : STD_LOGIC;
    signal output_result_U0_result_c_V_read : STD_LOGIC;
    signal output_result_U0_cntl_V_din : STD_LOGIC;
    signal output_result_U0_cntl_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal input_buffer_V_full_n : STD_LOGIC;
    signal input_buffer_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal input_buffer_V_empty_n : STD_LOGIC;
    signal data_buffer_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal data_buffer_V_full_n : STD_LOGIC;
    signal data_buffer_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal data_buffer_V_empty_n : STD_LOGIC;
    signal data_n_V_full_n : STD_LOGIC;
    signal data_n_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_n_V_empty_n : STD_LOGIC;
    signal data_r_V_full_n : STD_LOGIC;
    signal data_r_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_r_V_empty_n : STD_LOGIC;
    signal data_c_V_full_n : STD_LOGIC;
    signal data_c_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_c_V_empty_n : STD_LOGIC;
    signal outputs_offset_c_full_n : STD_LOGIC;
    signal outputs_offset_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal outputs_offset_c_empty_n : STD_LOGIC;
    signal outputs_offset_c3_full_n : STD_LOGIC;
    signal outputs_offset_c3_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal outputs_offset_c3_empty_n : STD_LOGIC;
    signal output_buffer_V_full_n : STD_LOGIC;
    signal output_buffer_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal output_buffer_V_empty_n : STD_LOGIC;
    signal result_buffer_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal result_buffer_V_full_n : STD_LOGIC;
    signal result_buffer_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal result_buffer_V_empty_n : STD_LOGIC;
    signal result_n_V_full_n : STD_LOGIC;
    signal result_n_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal result_n_V_empty_n : STD_LOGIC;
    signal result_r_V_full_n : STD_LOGIC;
    signal result_r_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal result_r_V_empty_n : STD_LOGIC;
    signal result_c_V_full_n : STD_LOGIC;
    signal result_c_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal result_c_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_compute_pro_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_pro_U0_full_n : STD_LOGIC;
    signal start_for_compute_pro_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_pro_U0_empty_n : STD_LOGIC;
    signal start_for_output_result_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_output_result_U0_full_n : STD_LOGIC;
    signal start_for_output_result_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_output_result_U0_empty_n : STD_LOGIC;
    signal compute_pro_U0_start_full_n : STD_LOGIC;
    signal compute_pro_U0_start_write : STD_LOGIC;
    signal output_result_U0_start_full_n : STD_LOGIC;
    signal output_result_U0_start_write : STD_LOGIC;

    component load_data353167 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        inputs_offset1 : IN STD_LOGIC_VECTOR (17 downto 0);
        input_buffer_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_buffer_V_full_n : IN STD_LOGIC;
        input_buffer_V_write : OUT STD_LOGIC;
        data_buffer_V_din : OUT STD_LOGIC;
        data_buffer_V_full_n : IN STD_LOGIC;
        data_buffer_V_write : OUT STD_LOGIC;
        data_n_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_n_V_full_n : IN STD_LOGIC;
        data_n_V_write : OUT STD_LOGIC;
        data_r_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_r_V_full_n : IN STD_LOGIC;
        data_r_V_write : OUT STD_LOGIC;
        data_c_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_c_V_full_n : IN STD_LOGIC;
        data_c_V_write : OUT STD_LOGIC;
        outputs_offset2 : IN STD_LOGIC_VECTOR (9 downto 0);
        outputs_offset_c_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputs_offset_c_full_n : IN STD_LOGIC;
        outputs_offset_c_write : OUT STD_LOGIC;
        outputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        outputs_offset_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        outputs_offset_out_full_n : IN STD_LOGIC;
        outputs_offset_out_write : OUT STD_LOGIC );
    end component;


    component compute_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_buffer_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        input_buffer_V_empty_n : IN STD_LOGIC;
        input_buffer_V_read : OUT STD_LOGIC;
        output_buffer_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_buffer_V_full_n : IN STD_LOGIC;
        output_buffer_V_write : OUT STD_LOGIC;
        data_buffer_V_dout : IN STD_LOGIC;
        data_buffer_V_empty_n : IN STD_LOGIC;
        data_buffer_V_read : OUT STD_LOGIC;
        result_buffer_V_din : OUT STD_LOGIC;
        result_buffer_V_full_n : IN STD_LOGIC;
        result_buffer_V_write : OUT STD_LOGIC;
        data_n_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_n_V_empty_n : IN STD_LOGIC;
        data_n_V_read : OUT STD_LOGIC;
        data_r_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_r_V_empty_n : IN STD_LOGIC;
        data_r_V_read : OUT STD_LOGIC;
        data_c_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_c_V_empty_n : IN STD_LOGIC;
        data_c_V_read : OUT STD_LOGIC;
        result_n_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_n_V_full_n : IN STD_LOGIC;
        result_n_V_write : OUT STD_LOGIC;
        result_r_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_r_V_full_n : IN STD_LOGIC;
        result_r_V_write : OUT STD_LOGIC;
        result_c_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_c_V_full_n : IN STD_LOGIC;
        result_c_V_write : OUT STD_LOGIC );
    end component;


    component output_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        outputs_offset_c_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        outputs_offset_c_empty_n : IN STD_LOGIC;
        outputs_offset_c_read : OUT STD_LOGIC;
        output_buffer_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        output_buffer_V_empty_n : IN STD_LOGIC;
        output_buffer_V_read : OUT STD_LOGIC;
        result_buffer_V_dout : IN STD_LOGIC;
        result_buffer_V_empty_n : IN STD_LOGIC;
        result_buffer_V_read : OUT STD_LOGIC;
        result_n_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        result_n_V_empty_n : IN STD_LOGIC;
        result_n_V_read : OUT STD_LOGIC;
        result_r_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        result_r_V_empty_n : IN STD_LOGIC;
        result_r_V_read : OUT STD_LOGIC;
        result_c_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        result_c_V_empty_n : IN STD_LOGIC;
        result_c_V_read : OUT STD_LOGIC;
        cntl_V_din : OUT STD_LOGIC;
        cntl_V_full_n : IN STD_LOGIC;
        cntl_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w16_d1024_B IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w31_d3_A_x_x_x_x_x_x_x_x_x_x_x_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (30 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (30 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d16_B IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_computeckv IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_output_clv IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    load_data353167_U0 : component load_data353167
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => load_data353167_U0_ap_start,
        start_full_n => load_data353167_U0_start_full_n,
        ap_done => load_data353167_U0_ap_done,
        ap_continue => load_data353167_U0_ap_continue,
        ap_idle => load_data353167_U0_ap_idle,
        ap_ready => load_data353167_U0_ap_ready,
        start_out => load_data353167_U0_start_out,
        start_write => load_data353167_U0_start_write,
        m_axi_inputs_AWVALID => load_data353167_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => load_data353167_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => load_data353167_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => load_data353167_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => load_data353167_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => load_data353167_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => load_data353167_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => load_data353167_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => load_data353167_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => load_data353167_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => load_data353167_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => load_data353167_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => load_data353167_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => load_data353167_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => load_data353167_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => load_data353167_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => load_data353167_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => load_data353167_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => load_data353167_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => m_axi_inputs_ARREADY,
        m_axi_inputs_ARADDR => load_data353167_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => load_data353167_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => load_data353167_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => load_data353167_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => load_data353167_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => load_data353167_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => load_data353167_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => load_data353167_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => load_data353167_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => load_data353167_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => load_data353167_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => m_axi_inputs_RVALID,
        m_axi_inputs_RREADY => load_data353167_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => m_axi_inputs_RDATA,
        m_axi_inputs_RLAST => m_axi_inputs_RLAST,
        m_axi_inputs_RID => m_axi_inputs_RID,
        m_axi_inputs_RUSER => m_axi_inputs_RUSER,
        m_axi_inputs_RRESP => m_axi_inputs_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => load_data353167_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset => inputs_offset,
        inputs_offset1 => inputs_offset1,
        input_buffer_V_din => load_data353167_U0_input_buffer_V_din,
        input_buffer_V_full_n => input_buffer_V_full_n,
        input_buffer_V_write => load_data353167_U0_input_buffer_V_write,
        data_buffer_V_din => load_data353167_U0_data_buffer_V_din,
        data_buffer_V_full_n => data_buffer_V_full_n,
        data_buffer_V_write => load_data353167_U0_data_buffer_V_write,
        data_n_V_din => load_data353167_U0_data_n_V_din,
        data_n_V_full_n => data_n_V_full_n,
        data_n_V_write => load_data353167_U0_data_n_V_write,
        data_r_V_din => load_data353167_U0_data_r_V_din,
        data_r_V_full_n => data_r_V_full_n,
        data_r_V_write => load_data353167_U0_data_r_V_write,
        data_c_V_din => load_data353167_U0_data_c_V_din,
        data_c_V_full_n => data_c_V_full_n,
        data_c_V_write => load_data353167_U0_data_c_V_write,
        outputs_offset2 => outputs_offset2,
        outputs_offset_c_din => load_data353167_U0_outputs_offset_c_din,
        outputs_offset_c_full_n => outputs_offset_c_full_n,
        outputs_offset_c_write => load_data353167_U0_outputs_offset_c_write,
        outputs_offset => outputs_offset,
        outputs_offset_out_din => load_data353167_U0_outputs_offset_out_din,
        outputs_offset_out_full_n => outputs_offset_c3_full_n,
        outputs_offset_out_write => load_data353167_U0_outputs_offset_out_write);

    compute_pro_U0 : component compute_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => compute_pro_U0_ap_start,
        ap_done => compute_pro_U0_ap_done,
        ap_continue => compute_pro_U0_ap_continue,
        ap_idle => compute_pro_U0_ap_idle,
        ap_ready => compute_pro_U0_ap_ready,
        input_buffer_V_dout => input_buffer_V_dout,
        input_buffer_V_empty_n => input_buffer_V_empty_n,
        input_buffer_V_read => compute_pro_U0_input_buffer_V_read,
        output_buffer_V_din => compute_pro_U0_output_buffer_V_din,
        output_buffer_V_full_n => output_buffer_V_full_n,
        output_buffer_V_write => compute_pro_U0_output_buffer_V_write,
        data_buffer_V_dout => compute_pro_U0_data_buffer_V_dout,
        data_buffer_V_empty_n => data_buffer_V_empty_n,
        data_buffer_V_read => compute_pro_U0_data_buffer_V_read,
        result_buffer_V_din => compute_pro_U0_result_buffer_V_din,
        result_buffer_V_full_n => result_buffer_V_full_n,
        result_buffer_V_write => compute_pro_U0_result_buffer_V_write,
        data_n_V_dout => data_n_V_dout,
        data_n_V_empty_n => data_n_V_empty_n,
        data_n_V_read => compute_pro_U0_data_n_V_read,
        data_r_V_dout => data_r_V_dout,
        data_r_V_empty_n => data_r_V_empty_n,
        data_r_V_read => compute_pro_U0_data_r_V_read,
        data_c_V_dout => data_c_V_dout,
        data_c_V_empty_n => data_c_V_empty_n,
        data_c_V_read => compute_pro_U0_data_c_V_read,
        result_n_V_din => compute_pro_U0_result_n_V_din,
        result_n_V_full_n => result_n_V_full_n,
        result_n_V_write => compute_pro_U0_result_n_V_write,
        result_r_V_din => compute_pro_U0_result_r_V_din,
        result_r_V_full_n => result_r_V_full_n,
        result_r_V_write => compute_pro_U0_result_r_V_write,
        result_c_V_din => compute_pro_U0_result_c_V_din,
        result_c_V_full_n => result_c_V_full_n,
        result_c_V_write => compute_pro_U0_result_c_V_write);

    output_result_U0 : component output_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => output_result_U0_ap_start,
        ap_done => output_result_U0_ap_done,
        ap_continue => output_result_U0_ap_continue,
        ap_idle => output_result_U0_ap_idle,
        ap_ready => output_result_U0_ap_ready,
        m_axi_outputs_AWVALID => output_result_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => m_axi_outputs_AWREADY,
        m_axi_outputs_AWADDR => output_result_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => output_result_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => output_result_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => output_result_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => output_result_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => output_result_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => output_result_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => output_result_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => output_result_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => output_result_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => output_result_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => output_result_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => m_axi_outputs_WREADY,
        m_axi_outputs_WDATA => output_result_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => output_result_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => output_result_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => output_result_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => output_result_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => output_result_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => output_result_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => output_result_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => output_result_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => output_result_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => output_result_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => output_result_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => output_result_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => output_result_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => output_result_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => output_result_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => output_result_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => output_result_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => m_axi_outputs_BVALID,
        m_axi_outputs_BREADY => output_result_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => m_axi_outputs_BRESP,
        m_axi_outputs_BID => m_axi_outputs_BID,
        m_axi_outputs_BUSER => m_axi_outputs_BUSER,
        outputs_offset_dout => outputs_offset_c3_dout,
        outputs_offset_empty_n => outputs_offset_c3_empty_n,
        outputs_offset_read => output_result_U0_outputs_offset_read,
        outputs_offset_c_dout => outputs_offset_c_dout,
        outputs_offset_c_empty_n => outputs_offset_c_empty_n,
        outputs_offset_c_read => output_result_U0_outputs_offset_c_read,
        output_buffer_V_dout => output_buffer_V_dout,
        output_buffer_V_empty_n => output_buffer_V_empty_n,
        output_buffer_V_read => output_result_U0_output_buffer_V_read,
        result_buffer_V_dout => output_result_U0_result_buffer_V_dout,
        result_buffer_V_empty_n => result_buffer_V_empty_n,
        result_buffer_V_read => output_result_U0_result_buffer_V_read,
        result_n_V_dout => result_n_V_dout,
        result_n_V_empty_n => result_n_V_empty_n,
        result_n_V_read => output_result_U0_result_n_V_read,
        result_r_V_dout => result_r_V_dout,
        result_r_V_empty_n => result_r_V_empty_n,
        result_r_V_read => output_result_U0_result_r_V_read,
        result_c_V_dout => result_c_V_dout,
        result_c_V_empty_n => result_c_V_empty_n,
        result_c_V_read => output_result_U0_result_c_V_read,
        cntl_V_din => output_result_U0_cntl_V_din,
        cntl_V_full_n => cntl_V_full_n,
        cntl_V_write => output_result_U0_cntl_V_write);

    input_buffer_V_U : component fifo_w16_d1024_B
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_data353167_U0_input_buffer_V_din,
        if_full_n => input_buffer_V_full_n,
        if_write => load_data353167_U0_input_buffer_V_write,
        if_dout => input_buffer_V_dout,
        if_empty_n => input_buffer_V_empty_n,
        if_read => compute_pro_U0_input_buffer_V_read);

    data_buffer_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => data_buffer_V_din,
        if_full_n => data_buffer_V_full_n,
        if_write => load_data353167_U0_data_buffer_V_write,
        if_dout => data_buffer_V_dout,
        if_empty_n => data_buffer_V_empty_n,
        if_read => compute_pro_U0_data_buffer_V_read);

    data_n_V_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_data353167_U0_data_n_V_din,
        if_full_n => data_n_V_full_n,
        if_write => load_data353167_U0_data_n_V_write,
        if_dout => data_n_V_dout,
        if_empty_n => data_n_V_empty_n,
        if_read => compute_pro_U0_data_n_V_read);

    data_r_V_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_data353167_U0_data_r_V_din,
        if_full_n => data_r_V_full_n,
        if_write => load_data353167_U0_data_r_V_write,
        if_dout => data_r_V_dout,
        if_empty_n => data_r_V_empty_n,
        if_read => compute_pro_U0_data_r_V_read);

    data_c_V_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_data353167_U0_data_c_V_din,
        if_full_n => data_c_V_full_n,
        if_write => load_data353167_U0_data_c_V_write,
        if_dout => data_c_V_dout,
        if_empty_n => data_c_V_empty_n,
        if_read => compute_pro_U0_data_c_V_read);

    outputs_offset_c_U : component fifo_w10_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_data353167_U0_outputs_offset_c_din,
        if_full_n => outputs_offset_c_full_n,
        if_write => load_data353167_U0_outputs_offset_c_write,
        if_dout => outputs_offset_c_dout,
        if_empty_n => outputs_offset_c_empty_n,
        if_read => output_result_U0_outputs_offset_c_read);

    outputs_offset_c3_U : component fifo_w31_d3_A_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_data353167_U0_outputs_offset_out_din,
        if_full_n => outputs_offset_c3_full_n,
        if_write => load_data353167_U0_outputs_offset_out_write,
        if_dout => outputs_offset_c3_dout,
        if_empty_n => outputs_offset_c3_empty_n,
        if_read => output_result_U0_outputs_offset_read);

    output_buffer_V_U : component fifo_w16_d16_B
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_pro_U0_output_buffer_V_din,
        if_full_n => output_buffer_V_full_n,
        if_write => compute_pro_U0_output_buffer_V_write,
        if_dout => output_buffer_V_dout,
        if_empty_n => output_buffer_V_empty_n,
        if_read => output_result_U0_output_buffer_V_read);

    result_buffer_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => result_buffer_V_din,
        if_full_n => result_buffer_V_full_n,
        if_write => compute_pro_U0_result_buffer_V_write,
        if_dout => result_buffer_V_dout,
        if_empty_n => result_buffer_V_empty_n,
        if_read => output_result_U0_result_buffer_V_read);

    result_n_V_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_pro_U0_result_n_V_din,
        if_full_n => result_n_V_full_n,
        if_write => compute_pro_U0_result_n_V_write,
        if_dout => result_n_V_dout,
        if_empty_n => result_n_V_empty_n,
        if_read => output_result_U0_result_n_V_read);

    result_r_V_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_pro_U0_result_r_V_din,
        if_full_n => result_r_V_full_n,
        if_write => compute_pro_U0_result_r_V_write,
        if_dout => result_r_V_dout,
        if_empty_n => result_r_V_empty_n,
        if_read => output_result_U0_result_r_V_read);

    result_c_V_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_pro_U0_result_c_V_din,
        if_full_n => result_c_V_full_n,
        if_write => compute_pro_U0_result_c_V_write,
        if_dout => result_c_V_dout,
        if_empty_n => result_c_V_empty_n,
        if_read => output_result_U0_result_c_V_read);

    start_for_computeckv_U : component start_for_computeckv
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compute_pro_U0_din,
        if_full_n => start_for_compute_pro_U0_full_n,
        if_write => load_data353167_U0_start_write,
        if_dout => start_for_compute_pro_U0_dout,
        if_empty_n => start_for_compute_pro_U0_empty_n,
        if_read => compute_pro_U0_ap_ready);

    start_for_output_clv_U : component start_for_output_clv
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_output_result_U0_din,
        if_full_n => start_for_output_result_U0_full_n,
        if_write => load_data353167_U0_start_write,
        if_dout => start_for_output_result_U0_dout,
        if_empty_n => start_for_output_result_U0_empty_n,
        if_read => output_result_U0_ap_ready);




    ap_done <= output_result_U0_ap_done;
    ap_idle <= (output_result_U0_ap_idle and load_data353167_U0_ap_idle and compute_pro_U0_ap_idle);
    ap_ready <= load_data353167_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= output_result_U0_ap_done;
    ap_sync_ready <= load_data353167_U0_ap_ready;
    cntl_V_din <= output_result_U0_cntl_V_din;
    cntl_V_write <= output_result_U0_cntl_V_write;
    compute_pro_U0_ap_continue <= ap_const_logic_1;
    compute_pro_U0_ap_start <= start_for_compute_pro_U0_empty_n;
    compute_pro_U0_data_buffer_V_dout <= data_buffer_V_dout(0);
    compute_pro_U0_start_full_n <= ap_const_logic_1;
    compute_pro_U0_start_write <= ap_const_logic_0;
    data_buffer_V_din <= (0=>load_data353167_U0_data_buffer_V_din, others=>'-');
    load_data353167_U0_ap_continue <= ap_const_logic_1;
    load_data353167_U0_ap_start <= ap_start;
    load_data353167_U0_start_full_n <= (start_for_output_result_U0_full_n and start_for_compute_pro_U0_full_n);
    m_axi_inputs_ARADDR <= load_data353167_U0_m_axi_inputs_ARADDR;
    m_axi_inputs_ARBURST <= load_data353167_U0_m_axi_inputs_ARBURST;
    m_axi_inputs_ARCACHE <= load_data353167_U0_m_axi_inputs_ARCACHE;
    m_axi_inputs_ARID <= load_data353167_U0_m_axi_inputs_ARID;
    m_axi_inputs_ARLEN <= load_data353167_U0_m_axi_inputs_ARLEN;
    m_axi_inputs_ARLOCK <= load_data353167_U0_m_axi_inputs_ARLOCK;
    m_axi_inputs_ARPROT <= load_data353167_U0_m_axi_inputs_ARPROT;
    m_axi_inputs_ARQOS <= load_data353167_U0_m_axi_inputs_ARQOS;
    m_axi_inputs_ARREGION <= load_data353167_U0_m_axi_inputs_ARREGION;
    m_axi_inputs_ARSIZE <= load_data353167_U0_m_axi_inputs_ARSIZE;
    m_axi_inputs_ARUSER <= load_data353167_U0_m_axi_inputs_ARUSER;
    m_axi_inputs_ARVALID <= load_data353167_U0_m_axi_inputs_ARVALID;
    m_axi_inputs_AWADDR <= ap_const_lv32_0;
    m_axi_inputs_AWBURST <= ap_const_lv2_0;
    m_axi_inputs_AWCACHE <= ap_const_lv4_0;
    m_axi_inputs_AWID <= ap_const_lv1_0;
    m_axi_inputs_AWLEN <= ap_const_lv32_0;
    m_axi_inputs_AWLOCK <= ap_const_lv2_0;
    m_axi_inputs_AWPROT <= ap_const_lv3_0;
    m_axi_inputs_AWQOS <= ap_const_lv4_0;
    m_axi_inputs_AWREGION <= ap_const_lv4_0;
    m_axi_inputs_AWSIZE <= ap_const_lv3_0;
    m_axi_inputs_AWUSER <= ap_const_lv1_0;
    m_axi_inputs_AWVALID <= ap_const_logic_0;
    m_axi_inputs_BREADY <= ap_const_logic_0;
    m_axi_inputs_RREADY <= load_data353167_U0_m_axi_inputs_RREADY;
    m_axi_inputs_WDATA <= ap_const_lv16_0;
    m_axi_inputs_WID <= ap_const_lv1_0;
    m_axi_inputs_WLAST <= ap_const_logic_0;
    m_axi_inputs_WSTRB <= ap_const_lv2_0;
    m_axi_inputs_WUSER <= ap_const_lv1_0;
    m_axi_inputs_WVALID <= ap_const_logic_0;
    m_axi_outputs_ARADDR <= ap_const_lv32_0;
    m_axi_outputs_ARBURST <= ap_const_lv2_0;
    m_axi_outputs_ARCACHE <= ap_const_lv4_0;
    m_axi_outputs_ARID <= ap_const_lv1_0;
    m_axi_outputs_ARLEN <= ap_const_lv32_0;
    m_axi_outputs_ARLOCK <= ap_const_lv2_0;
    m_axi_outputs_ARPROT <= ap_const_lv3_0;
    m_axi_outputs_ARQOS <= ap_const_lv4_0;
    m_axi_outputs_ARREGION <= ap_const_lv4_0;
    m_axi_outputs_ARSIZE <= ap_const_lv3_0;
    m_axi_outputs_ARUSER <= ap_const_lv1_0;
    m_axi_outputs_ARVALID <= ap_const_logic_0;
    m_axi_outputs_AWADDR <= output_result_U0_m_axi_outputs_AWADDR;
    m_axi_outputs_AWBURST <= output_result_U0_m_axi_outputs_AWBURST;
    m_axi_outputs_AWCACHE <= output_result_U0_m_axi_outputs_AWCACHE;
    m_axi_outputs_AWID <= output_result_U0_m_axi_outputs_AWID;
    m_axi_outputs_AWLEN <= output_result_U0_m_axi_outputs_AWLEN;
    m_axi_outputs_AWLOCK <= output_result_U0_m_axi_outputs_AWLOCK;
    m_axi_outputs_AWPROT <= output_result_U0_m_axi_outputs_AWPROT;
    m_axi_outputs_AWQOS <= output_result_U0_m_axi_outputs_AWQOS;
    m_axi_outputs_AWREGION <= output_result_U0_m_axi_outputs_AWREGION;
    m_axi_outputs_AWSIZE <= output_result_U0_m_axi_outputs_AWSIZE;
    m_axi_outputs_AWUSER <= output_result_U0_m_axi_outputs_AWUSER;
    m_axi_outputs_AWVALID <= output_result_U0_m_axi_outputs_AWVALID;
    m_axi_outputs_BREADY <= output_result_U0_m_axi_outputs_BREADY;
    m_axi_outputs_RREADY <= ap_const_logic_0;
    m_axi_outputs_WDATA <= output_result_U0_m_axi_outputs_WDATA;
    m_axi_outputs_WID <= output_result_U0_m_axi_outputs_WID;
    m_axi_outputs_WLAST <= output_result_U0_m_axi_outputs_WLAST;
    m_axi_outputs_WSTRB <= output_result_U0_m_axi_outputs_WSTRB;
    m_axi_outputs_WUSER <= output_result_U0_m_axi_outputs_WUSER;
    m_axi_outputs_WVALID <= output_result_U0_m_axi_outputs_WVALID;
    output_result_U0_ap_continue <= ap_continue;
    output_result_U0_ap_start <= start_for_output_result_U0_empty_n;
    output_result_U0_result_buffer_V_dout <= result_buffer_V_dout(0);
    output_result_U0_start_full_n <= ap_const_logic_1;
    output_result_U0_start_write <= ap_const_logic_0;
    result_buffer_V_din <= (0=>compute_pro_U0_result_buffer_V_din, others=>'-');
    start_for_compute_pro_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_output_result_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
