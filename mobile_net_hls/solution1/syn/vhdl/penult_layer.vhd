-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity penult_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_inputs_AWVALID : OUT STD_LOGIC;
    m_axi_inputs_AWREADY : IN STD_LOGIC;
    m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WVALID : OUT STD_LOGIC;
    m_axi_inputs_WREADY : IN STD_LOGIC;
    m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_WLAST : OUT STD_LOGIC;
    m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARVALID : OUT STD_LOGIC;
    m_axi_inputs_ARREADY : IN STD_LOGIC;
    m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RVALID : IN STD_LOGIC;
    m_axi_inputs_RREADY : OUT STD_LOGIC;
    m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_RLAST : IN STD_LOGIC;
    m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BVALID : IN STD_LOGIC;
    m_axi_inputs_BREADY : OUT STD_LOGIC;
    m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs_offset_empty_n : IN STD_LOGIC;
    inputs_offset_read : OUT STD_LOGIC;
    m_axi_outputs_AWVALID : OUT STD_LOGIC;
    m_axi_outputs_AWREADY : IN STD_LOGIC;
    m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_WVALID : OUT STD_LOGIC;
    m_axi_outputs_WREADY : IN STD_LOGIC;
    m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_WLAST : OUT STD_LOGIC;
    m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_ARVALID : OUT STD_LOGIC;
    m_axi_outputs_ARREADY : IN STD_LOGIC;
    m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_RVALID : IN STD_LOGIC;
    m_axi_outputs_RREADY : OUT STD_LOGIC;
    m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_outputs_RLAST : IN STD_LOGIC;
    m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_BVALID : IN STD_LOGIC;
    m_axi_outputs_BREADY : OUT STD_LOGIC;
    m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs_offset_empty_n : IN STD_LOGIC;
    outputs_offset_read : OUT STD_LOGIC;
    pre_ready_V_dout : IN STD_LOGIC;
    pre_ready_V_empty_n : IN STD_LOGIC;
    pre_ready_V_read : OUT STD_LOGIC;
    nxt_ready_V_din : OUT STD_LOGIC;
    nxt_ready_V_full_n : IN STD_LOGIC;
    nxt_ready_V_write : OUT STD_LOGIC );
end;


architecture behav of penult_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inputs_offset_blk_n : STD_LOGIC;
    signal outputs_offset_blk_n : STD_LOGIC;
    signal outputs_offset2_i_reg_234 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal inputs_offset1_i_reg_239 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_i_fu_184_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_i_reg_250 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_nbreadreq_fu_96_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_nbwritereq_fu_104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_193_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_i_reg_255 : STD_LOGIC_VECTOR (9 downto 0);
    signal pingpang_flag_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pingpang_flag_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_ap_start : STD_LOGIC;
    signal grp_pool_fu_149_ap_done : STD_LOGIC;
    signal grp_pool_fu_149_ap_idle : STD_LOGIC;
    signal grp_pool_fu_149_ap_ready : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_inputs_AWVALID : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_WVALID : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_WLAST : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARVALID : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_inputs_RREADY : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_inputs_BREADY : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_outputs_AWVALID : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_WVALID : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_WLAST : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARVALID : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_m_axi_outputs_RREADY : STD_LOGIC;
    signal grp_pool_fu_149_m_axi_outputs_BREADY : STD_LOGIC;
    signal grp_pool_fu_149_cntl_V_din : STD_LOGIC;
    signal grp_pool_fu_149_cntl_V_write : STD_LOGIC;
    signal pingpang_flag_i_reg_137 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_08_i_load_load_fu_218_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pool_fu_149_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal cntl_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal cntl_V_full_n : STD_LOGIC;
    signal cntl_V_write : STD_LOGIC;
    signal tmp_3_nbreadreq_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cntl_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal cntl_V_empty_n : STD_LOGIC;
    signal cntl_V_read : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_76 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        inputs_offset1 : IN STD_LOGIC_VECTOR (17 downto 0);
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        outputs_offset2 : IN STD_LOGIC_VECTOR (9 downto 0);
        cntl_V_din : OUT STD_LOGIC;
        cntl_V_full_n : IN STD_LOGIC;
        cntl_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w1_d1_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_pool_fu_149 : component pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pool_fu_149_ap_start,
        ap_done => grp_pool_fu_149_ap_done,
        ap_idle => grp_pool_fu_149_ap_idle,
        ap_ready => grp_pool_fu_149_ap_ready,
        m_axi_inputs_AWVALID => grp_pool_fu_149_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => grp_pool_fu_149_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => grp_pool_fu_149_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => grp_pool_fu_149_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => grp_pool_fu_149_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => grp_pool_fu_149_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => grp_pool_fu_149_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => grp_pool_fu_149_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => grp_pool_fu_149_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => grp_pool_fu_149_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => grp_pool_fu_149_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => grp_pool_fu_149_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => grp_pool_fu_149_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => grp_pool_fu_149_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => grp_pool_fu_149_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => grp_pool_fu_149_m_axi_inputs_WLAST,
        m_axi_inputs_WID => grp_pool_fu_149_m_axi_inputs_WID,
        m_axi_inputs_WUSER => grp_pool_fu_149_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => grp_pool_fu_149_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => m_axi_inputs_ARREADY,
        m_axi_inputs_ARADDR => grp_pool_fu_149_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => grp_pool_fu_149_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => grp_pool_fu_149_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => grp_pool_fu_149_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => grp_pool_fu_149_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => grp_pool_fu_149_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => grp_pool_fu_149_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => grp_pool_fu_149_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => grp_pool_fu_149_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => grp_pool_fu_149_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => grp_pool_fu_149_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => m_axi_inputs_RVALID,
        m_axi_inputs_RREADY => grp_pool_fu_149_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => m_axi_inputs_RDATA,
        m_axi_inputs_RLAST => m_axi_inputs_RLAST,
        m_axi_inputs_RID => m_axi_inputs_RID,
        m_axi_inputs_RUSER => m_axi_inputs_RUSER,
        m_axi_inputs_RRESP => m_axi_inputs_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => grp_pool_fu_149_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset => inputs_offset1_i_reg_239,
        inputs_offset1 => tmp_4_i_reg_250,
        m_axi_outputs_AWVALID => grp_pool_fu_149_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => m_axi_outputs_AWREADY,
        m_axi_outputs_AWADDR => grp_pool_fu_149_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => grp_pool_fu_149_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => grp_pool_fu_149_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => grp_pool_fu_149_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => grp_pool_fu_149_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => grp_pool_fu_149_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => grp_pool_fu_149_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => grp_pool_fu_149_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => grp_pool_fu_149_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => grp_pool_fu_149_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => grp_pool_fu_149_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => grp_pool_fu_149_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => m_axi_outputs_WREADY,
        m_axi_outputs_WDATA => grp_pool_fu_149_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => grp_pool_fu_149_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => grp_pool_fu_149_m_axi_outputs_WLAST,
        m_axi_outputs_WID => grp_pool_fu_149_m_axi_outputs_WID,
        m_axi_outputs_WUSER => grp_pool_fu_149_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => grp_pool_fu_149_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => grp_pool_fu_149_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => grp_pool_fu_149_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => grp_pool_fu_149_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => grp_pool_fu_149_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => grp_pool_fu_149_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => grp_pool_fu_149_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => grp_pool_fu_149_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => grp_pool_fu_149_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => grp_pool_fu_149_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => grp_pool_fu_149_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => grp_pool_fu_149_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => grp_pool_fu_149_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => m_axi_outputs_BVALID,
        m_axi_outputs_BREADY => grp_pool_fu_149_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => m_axi_outputs_BRESP,
        m_axi_outputs_BID => m_axi_outputs_BID,
        m_axi_outputs_BUSER => m_axi_outputs_BUSER,
        outputs_offset => outputs_offset2_i_reg_234,
        outputs_offset2 => tmp_6_i_reg_255,
        cntl_V_din => grp_pool_fu_149_cntl_V_din,
        cntl_V_full_n => cntl_V_full_n,
        cntl_V_write => grp_pool_fu_149_cntl_V_write);

    cntl_V_fifo_U : component fifo_w1_d1_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cntl_V_din,
        if_full_n => cntl_V_full_n,
        if_write => cntl_V_write,
        if_dout => cntl_V_dout,
        if_empty_n => cntl_V_empty_n,
        if_read => cntl_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((p_08_i_load_load_fu_218_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pool_fu_149_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pool_fu_149_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_nbwritereq_fu_104_p3 = ap_const_lv1_1) and (tmp_1_nbreadreq_fu_96_p3 = ap_const_lv1_1))) then 
                    grp_pool_fu_149_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pool_fu_149_ap_ready = ap_const_logic_1)) then 
                    grp_pool_fu_149_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pingpang_flag_i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (p_08_i_load_load_fu_218_p1 = ap_const_lv1_1))) then 
                pingpang_flag_i_reg_137 <= pingpang_flag_reg_260;
            elsif ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pingpang_flag_i_reg_137 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                inputs_offset1_i_reg_239 <= inputs_offset_dout(31 downto 1);
                outputs_offset2_i_reg_234 <= outputs_offset_dout(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_nbwritereq_fu_104_p3 = ap_const_lv1_1) and (tmp_1_nbreadreq_fu_96_p3 = ap_const_lv1_1))) then
                pingpang_flag_reg_260 <= pingpang_flag_fu_202_p2;
                    tmp_4_i_reg_250(17) <= tmp_4_i_fu_184_p3(17);
                    tmp_6_i_reg_255(9) <= tmp_6_i_fu_193_p3(9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_3_nbreadreq_fu_112_p3 = ap_const_lv1_1))) then
                tmp_fu_76 <= (0=>pre_ready_V_dout, others=>'-');
            end if;
        end if;
    end process;
    tmp_4_i_reg_250(16 downto 0) <= "00000000000000000";
    tmp_6_i_reg_255(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, inputs_offset_empty_n, outputs_offset_empty_n, ap_CS_fsm_state3, tmp_1_nbreadreq_fu_96_p3, tmp_2_nbwritereq_fu_104_p3, grp_pool_fu_149_ap_done, ap_CS_fsm_state6, p_08_i_load_load_fu_218_p1, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_2_nbwritereq_fu_104_p3 = ap_const_lv1_0) or (tmp_1_nbreadreq_fu_96_p3 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_pool_fu_149_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((p_08_i_load_load_fu_218_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, inputs_offset_empty_n, outputs_offset_empty_n)
    begin
                ap_block_state1 <= ((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6, p_08_i_load_load_fu_218_p1)
    begin
        if (((p_08_i_load_load_fu_218_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, p_08_i_load_load_fu_218_p1)
    begin
        if (((p_08_i_load_load_fu_218_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cntl_V_din <= (0=>grp_pool_fu_149_cntl_V_din, others=>'-');

    cntl_V_read_assign_proc : process(tmp_3_nbreadreq_fu_112_p3, cntl_V_empty_n, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (cntl_V_empty_n = ap_const_logic_1) and (tmp_3_nbreadreq_fu_112_p3 = ap_const_lv1_1))) then 
            cntl_V_read <= ap_const_logic_1;
        else 
            cntl_V_read <= ap_const_logic_0;
        end if; 
    end process;


    cntl_V_write_assign_proc : process(grp_pool_fu_149_cntl_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cntl_V_write <= grp_pool_fu_149_cntl_V_write;
        else 
            cntl_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_pool_fu_149_ap_start <= grp_pool_fu_149_ap_start_reg;

    inputs_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputs_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inputs_offset_blk_n <= inputs_offset_empty_n;
        else 
            inputs_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inputs_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputs_offset_empty_n, outputs_offset_empty_n)
    begin
        if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inputs_offset_read <= ap_const_logic_1;
        else 
            inputs_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_ARADDR <= grp_pool_fu_149_m_axi_inputs_ARADDR;
    m_axi_inputs_ARBURST <= grp_pool_fu_149_m_axi_inputs_ARBURST;
    m_axi_inputs_ARCACHE <= grp_pool_fu_149_m_axi_inputs_ARCACHE;
    m_axi_inputs_ARID <= grp_pool_fu_149_m_axi_inputs_ARID;
    m_axi_inputs_ARLEN <= grp_pool_fu_149_m_axi_inputs_ARLEN;
    m_axi_inputs_ARLOCK <= grp_pool_fu_149_m_axi_inputs_ARLOCK;
    m_axi_inputs_ARPROT <= grp_pool_fu_149_m_axi_inputs_ARPROT;
    m_axi_inputs_ARQOS <= grp_pool_fu_149_m_axi_inputs_ARQOS;
    m_axi_inputs_ARREGION <= grp_pool_fu_149_m_axi_inputs_ARREGION;
    m_axi_inputs_ARSIZE <= grp_pool_fu_149_m_axi_inputs_ARSIZE;
    m_axi_inputs_ARUSER <= grp_pool_fu_149_m_axi_inputs_ARUSER;

    m_axi_inputs_ARVALID_assign_proc : process(ap_CS_fsm_state3, tmp_1_nbreadreq_fu_96_p3, tmp_2_nbwritereq_fu_104_p3, grp_pool_fu_149_m_axi_inputs_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_nbwritereq_fu_104_p3 = ap_const_lv1_1) and (tmp_1_nbreadreq_fu_96_p3 = ap_const_lv1_1)))) then 
            m_axi_inputs_ARVALID <= grp_pool_fu_149_m_axi_inputs_ARVALID;
        else 
            m_axi_inputs_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_AWADDR <= ap_const_lv32_0;
    m_axi_inputs_AWBURST <= ap_const_lv2_0;
    m_axi_inputs_AWCACHE <= ap_const_lv4_0;
    m_axi_inputs_AWID <= ap_const_lv1_0;
    m_axi_inputs_AWLEN <= ap_const_lv32_0;
    m_axi_inputs_AWLOCK <= ap_const_lv2_0;
    m_axi_inputs_AWPROT <= ap_const_lv3_0;
    m_axi_inputs_AWQOS <= ap_const_lv4_0;
    m_axi_inputs_AWREGION <= ap_const_lv4_0;
    m_axi_inputs_AWSIZE <= ap_const_lv3_0;
    m_axi_inputs_AWUSER <= ap_const_lv1_0;
    m_axi_inputs_AWVALID <= ap_const_logic_0;
    m_axi_inputs_BREADY <= ap_const_logic_0;

    m_axi_inputs_RREADY_assign_proc : process(ap_CS_fsm_state3, tmp_1_nbreadreq_fu_96_p3, tmp_2_nbwritereq_fu_104_p3, grp_pool_fu_149_m_axi_inputs_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_nbwritereq_fu_104_p3 = ap_const_lv1_1) and (tmp_1_nbreadreq_fu_96_p3 = ap_const_lv1_1)))) then 
            m_axi_inputs_RREADY <= grp_pool_fu_149_m_axi_inputs_RREADY;
        else 
            m_axi_inputs_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_WDATA <= ap_const_lv16_0;
    m_axi_inputs_WID <= ap_const_lv1_0;
    m_axi_inputs_WLAST <= ap_const_logic_0;
    m_axi_inputs_WSTRB <= ap_const_lv2_0;
    m_axi_inputs_WUSER <= ap_const_lv1_0;
    m_axi_inputs_WVALID <= ap_const_logic_0;
    m_axi_outputs_ARADDR <= ap_const_lv32_0;
    m_axi_outputs_ARBURST <= ap_const_lv2_0;
    m_axi_outputs_ARCACHE <= ap_const_lv4_0;
    m_axi_outputs_ARID <= ap_const_lv1_0;
    m_axi_outputs_ARLEN <= ap_const_lv32_0;
    m_axi_outputs_ARLOCK <= ap_const_lv2_0;
    m_axi_outputs_ARPROT <= ap_const_lv3_0;
    m_axi_outputs_ARQOS <= ap_const_lv4_0;
    m_axi_outputs_ARREGION <= ap_const_lv4_0;
    m_axi_outputs_ARSIZE <= ap_const_lv3_0;
    m_axi_outputs_ARUSER <= ap_const_lv1_0;
    m_axi_outputs_ARVALID <= ap_const_logic_0;
    m_axi_outputs_AWADDR <= grp_pool_fu_149_m_axi_outputs_AWADDR;
    m_axi_outputs_AWBURST <= grp_pool_fu_149_m_axi_outputs_AWBURST;
    m_axi_outputs_AWCACHE <= grp_pool_fu_149_m_axi_outputs_AWCACHE;
    m_axi_outputs_AWID <= grp_pool_fu_149_m_axi_outputs_AWID;
    m_axi_outputs_AWLEN <= grp_pool_fu_149_m_axi_outputs_AWLEN;
    m_axi_outputs_AWLOCK <= grp_pool_fu_149_m_axi_outputs_AWLOCK;
    m_axi_outputs_AWPROT <= grp_pool_fu_149_m_axi_outputs_AWPROT;
    m_axi_outputs_AWQOS <= grp_pool_fu_149_m_axi_outputs_AWQOS;
    m_axi_outputs_AWREGION <= grp_pool_fu_149_m_axi_outputs_AWREGION;
    m_axi_outputs_AWSIZE <= grp_pool_fu_149_m_axi_outputs_AWSIZE;
    m_axi_outputs_AWUSER <= grp_pool_fu_149_m_axi_outputs_AWUSER;

    m_axi_outputs_AWVALID_assign_proc : process(ap_CS_fsm_state3, tmp_1_nbreadreq_fu_96_p3, tmp_2_nbwritereq_fu_104_p3, grp_pool_fu_149_m_axi_outputs_AWVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_nbwritereq_fu_104_p3 = ap_const_lv1_1) and (tmp_1_nbreadreq_fu_96_p3 = ap_const_lv1_1)))) then 
            m_axi_outputs_AWVALID <= grp_pool_fu_149_m_axi_outputs_AWVALID;
        else 
            m_axi_outputs_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_outputs_BREADY_assign_proc : process(ap_CS_fsm_state3, tmp_1_nbreadreq_fu_96_p3, tmp_2_nbwritereq_fu_104_p3, grp_pool_fu_149_m_axi_outputs_BREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_nbwritereq_fu_104_p3 = ap_const_lv1_1) and (tmp_1_nbreadreq_fu_96_p3 = ap_const_lv1_1)))) then 
            m_axi_outputs_BREADY <= grp_pool_fu_149_m_axi_outputs_BREADY;
        else 
            m_axi_outputs_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_outputs_RREADY <= ap_const_logic_0;
    m_axi_outputs_WDATA <= grp_pool_fu_149_m_axi_outputs_WDATA;
    m_axi_outputs_WID <= grp_pool_fu_149_m_axi_outputs_WID;
    m_axi_outputs_WLAST <= grp_pool_fu_149_m_axi_outputs_WLAST;
    m_axi_outputs_WSTRB <= grp_pool_fu_149_m_axi_outputs_WSTRB;
    m_axi_outputs_WUSER <= grp_pool_fu_149_m_axi_outputs_WUSER;

    m_axi_outputs_WVALID_assign_proc : process(ap_CS_fsm_state3, tmp_1_nbreadreq_fu_96_p3, tmp_2_nbwritereq_fu_104_p3, grp_pool_fu_149_m_axi_outputs_WVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_nbwritereq_fu_104_p3 = ap_const_lv1_1) and (tmp_1_nbreadreq_fu_96_p3 = ap_const_lv1_1)))) then 
            m_axi_outputs_WVALID <= grp_pool_fu_149_m_axi_outputs_WVALID;
        else 
            m_axi_outputs_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    nxt_ready_V_din <= pre_ready_V_dout;

    nxt_ready_V_write_assign_proc : process(nxt_ready_V_full_n, tmp_3_nbreadreq_fu_112_p3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (nxt_ready_V_full_n = ap_const_logic_1) and (tmp_3_nbreadreq_fu_112_p3 = ap_const_lv1_1))) then 
            nxt_ready_V_write <= ap_const_logic_1;
        else 
            nxt_ready_V_write <= ap_const_logic_0;
        end if; 
    end process;


    outputs_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputs_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_blk_n <= outputs_offset_empty_n;
        else 
            outputs_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outputs_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputs_offset_empty_n, outputs_offset_empty_n)
    begin
        if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_read <= ap_const_logic_1;
        else 
            outputs_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    p_08_i_load_load_fu_218_p1 <= tmp_fu_76;
    pingpang_flag_fu_202_p2 <= (pingpang_flag_i_reg_137 xor ap_const_lv1_1);

    pre_ready_V_read_assign_proc : process(pre_ready_V_empty_n, tmp_3_nbreadreq_fu_112_p3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (pre_ready_V_empty_n = ap_const_logic_1) and (tmp_3_nbreadreq_fu_112_p3 = ap_const_lv1_1))) then 
            pre_ready_V_read <= ap_const_logic_1;
        else 
            pre_ready_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_nbreadreq_fu_96_p3 <= (0=>pre_ready_V_empty_n, others=>'-');
    tmp_2_nbwritereq_fu_104_p3 <= (0=>nxt_ready_V_full_n, others=>'-');
    tmp_3_nbreadreq_fu_112_p3 <= (0=>cntl_V_empty_n, others=>'-');
    tmp_4_i_fu_184_p3 <= 
        ap_const_lv18_20000 when (pingpang_flag_i_reg_137(0) = '1') else 
        ap_const_lv18_0;
    tmp_6_i_fu_193_p3 <= 
        ap_const_lv10_200 when (pingpang_flag_i_reg_137(0) = '1') else 
        ap_const_lv10_0;
end behav;
