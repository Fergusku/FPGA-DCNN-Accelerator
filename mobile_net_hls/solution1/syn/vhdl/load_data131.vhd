-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_data131 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_inputs_AWVALID : OUT STD_LOGIC;
    m_axi_inputs_AWREADY : IN STD_LOGIC;
    m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WVALID : OUT STD_LOGIC;
    m_axi_inputs_WREADY : IN STD_LOGIC;
    m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_WLAST : OUT STD_LOGIC;
    m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARVALID : OUT STD_LOGIC;
    m_axi_inputs_ARREADY : IN STD_LOGIC;
    m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RVALID : IN STD_LOGIC;
    m_axi_inputs_RREADY : OUT STD_LOGIC;
    m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_RLAST : IN STD_LOGIC;
    m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BVALID : IN STD_LOGIC;
    m_axi_inputs_BREADY : OUT STD_LOGIC;
    m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    m_axi_weights_AWVALID : OUT STD_LOGIC;
    m_axi_weights_AWREADY : IN STD_LOGIC;
    m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WVALID : OUT STD_LOGIC;
    m_axi_weights_WREADY : IN STD_LOGIC;
    m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_WLAST : OUT STD_LOGIC;
    m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARVALID : OUT STD_LOGIC;
    m_axi_weights_ARREADY : IN STD_LOGIC;
    m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RVALID : IN STD_LOGIC;
    m_axi_weights_RREADY : OUT STD_LOGIC;
    m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_weights_RLAST : IN STD_LOGIC;
    m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BVALID : IN STD_LOGIC;
    m_axi_weights_BREADY : OUT STD_LOGIC;
    m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weights_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    m_axi_betas_AWVALID : OUT STD_LOGIC;
    m_axi_betas_AWREADY : IN STD_LOGIC;
    m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_WVALID : OUT STD_LOGIC;
    m_axi_betas_WREADY : IN STD_LOGIC;
    m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_WLAST : OUT STD_LOGIC;
    m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_ARVALID : OUT STD_LOGIC;
    m_axi_betas_ARREADY : IN STD_LOGIC;
    m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_RVALID : IN STD_LOGIC;
    m_axi_betas_RREADY : OUT STD_LOGIC;
    m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_betas_RLAST : IN STD_LOGIC;
    m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_BVALID : IN STD_LOGIC;
    m_axi_betas_BREADY : OUT STD_LOGIC;
    m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    betas_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    input_buffer_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buffer_V_full_n : IN STD_LOGIC;
    input_buffer_V_write : OUT STD_LOGIC;
    weight_buffer_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_0_full_n : IN STD_LOGIC;
    weight_buffer_0_write : OUT STD_LOGIC;
    weight_buffer_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_1_full_n : IN STD_LOGIC;
    weight_buffer_1_write : OUT STD_LOGIC;
    weight_buffer_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_2_full_n : IN STD_LOGIC;
    weight_buffer_2_write : OUT STD_LOGIC;
    weight_buffer_3_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_3_full_n : IN STD_LOGIC;
    weight_buffer_3_write : OUT STD_LOGIC;
    weight_buffer_4_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_4_full_n : IN STD_LOGIC;
    weight_buffer_4_write : OUT STD_LOGIC;
    weight_buffer_5_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_5_full_n : IN STD_LOGIC;
    weight_buffer_5_write : OUT STD_LOGIC;
    weight_buffer_6_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_6_full_n : IN STD_LOGIC;
    weight_buffer_6_write : OUT STD_LOGIC;
    weight_buffer_7_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_7_full_n : IN STD_LOGIC;
    weight_buffer_7_write : OUT STD_LOGIC;
    weight_buffer_8_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_8_full_n : IN STD_LOGIC;
    weight_buffer_8_write : OUT STD_LOGIC;
    weight_buffer_9_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_9_full_n : IN STD_LOGIC;
    weight_buffer_9_write : OUT STD_LOGIC;
    weight_buffer_10_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_10_full_n : IN STD_LOGIC;
    weight_buffer_10_write : OUT STD_LOGIC;
    weight_buffer_11_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_11_full_n : IN STD_LOGIC;
    weight_buffer_11_write : OUT STD_LOGIC;
    weight_buffer_12_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_12_full_n : IN STD_LOGIC;
    weight_buffer_12_write : OUT STD_LOGIC;
    weight_buffer_13_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_13_full_n : IN STD_LOGIC;
    weight_buffer_13_write : OUT STD_LOGIC;
    weight_buffer_14_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_14_full_n : IN STD_LOGIC;
    weight_buffer_14_write : OUT STD_LOGIC;
    weight_buffer_15_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_15_full_n : IN STD_LOGIC;
    weight_buffer_15_write : OUT STD_LOGIC;
    beta_buffer_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_0_full_n : IN STD_LOGIC;
    beta_buffer_0_write : OUT STD_LOGIC;
    beta_buffer_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_1_full_n : IN STD_LOGIC;
    beta_buffer_1_write : OUT STD_LOGIC;
    beta_buffer_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_2_full_n : IN STD_LOGIC;
    beta_buffer_2_write : OUT STD_LOGIC;
    beta_buffer_3_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_3_full_n : IN STD_LOGIC;
    beta_buffer_3_write : OUT STD_LOGIC;
    beta_buffer_4_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_4_full_n : IN STD_LOGIC;
    beta_buffer_4_write : OUT STD_LOGIC;
    beta_buffer_5_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_5_full_n : IN STD_LOGIC;
    beta_buffer_5_write : OUT STD_LOGIC;
    beta_buffer_6_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_6_full_n : IN STD_LOGIC;
    beta_buffer_6_write : OUT STD_LOGIC;
    beta_buffer_7_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_7_full_n : IN STD_LOGIC;
    beta_buffer_7_write : OUT STD_LOGIC;
    beta_buffer_8_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_8_full_n : IN STD_LOGIC;
    beta_buffer_8_write : OUT STD_LOGIC;
    beta_buffer_9_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_9_full_n : IN STD_LOGIC;
    beta_buffer_9_write : OUT STD_LOGIC;
    beta_buffer_10_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_10_full_n : IN STD_LOGIC;
    beta_buffer_10_write : OUT STD_LOGIC;
    beta_buffer_11_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_11_full_n : IN STD_LOGIC;
    beta_buffer_11_write : OUT STD_LOGIC;
    beta_buffer_12_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_12_full_n : IN STD_LOGIC;
    beta_buffer_12_write : OUT STD_LOGIC;
    beta_buffer_13_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_13_full_n : IN STD_LOGIC;
    beta_buffer_13_write : OUT STD_LOGIC;
    beta_buffer_14_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_14_full_n : IN STD_LOGIC;
    beta_buffer_14_write : OUT STD_LOGIC;
    beta_buffer_15_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_15_full_n : IN STD_LOGIC;
    beta_buffer_15_write : OUT STD_LOGIC;
    data_buffer_V_din : OUT STD_LOGIC;
    data_buffer_V_full_n : IN STD_LOGIC;
    data_buffer_V_write : OUT STD_LOGIC;
    data_c_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_c_V_full_n : IN STD_LOGIC;
    data_c_V_write : OUT STD_LOGIC;
    data_r_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_r_V_full_n : IN STD_LOGIC;
    data_r_V_write : OUT STD_LOGIC;
    data_m_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_m_V_full_n : IN STD_LOGIC;
    data_m_V_write : OUT STD_LOGIC;
    data_n_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_n_V_full_n : IN STD_LOGIC;
    data_n_V_write : OUT STD_LOGIC;
    outputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    outputs_offset_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
    outputs_offset_out_full_n : IN STD_LOGIC;
    outputs_offset_out_write : OUT STD_LOGIC );
end;


architecture behav of load_data131 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal outputs_offset_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_226_cast5_i_i_i_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_226_cast5_i_i_i_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal rLoops_fu_501_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal rLoops_reg_734 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_509_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_reg_739 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_92_cast4_i_i_i_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_cast4_i_i_i_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal cLoops_fu_539_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal cLoops_reg_753 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_443_fu_519_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_547_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_reg_758 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_445_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_cast3_i_i_i_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_cast3_i_i_i_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mLoops_fu_590_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mLoops_reg_776 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_446_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_598_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_reg_782 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_447_reg_787 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_457_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_457_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal nLoops_fu_638_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal nLoops_reg_803 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_448_nbwritereq_fu_242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_324_cast1_cast4_s_fu_648_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_324_cast1_cast4_s_reg_809 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_cast3_cast1_i_fu_653_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_cast3_cast1_i_reg_814 : STD_LOGIC_VECTOR (9 downto 0);
    signal mLoops_cast_cast2_i_s_fu_658_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mLoops_cast_cast2_i_s_reg_819 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_458_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_458_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_684_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_copy_input_fmem2buff_2_fu_369_ap_start : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_ap_done : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_ap_idle : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_ap_ready : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWVALID : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WVALID : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WLAST : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARVALID : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_RREADY : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_BREADY : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_input_buffer_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_input_buffer_V_write : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_input_cntl_V_din : STD_LOGIC;
    signal grp_copy_input_fmem2buff_2_fu_369_input_cntl_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_ap_start : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_ap_done : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_ap_idle : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_ap_ready : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_0_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_1_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_2_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_3_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_4_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_4_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_5_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_5_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_6_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_6_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_7_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_7_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_8_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_8_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_9_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_9_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_10_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_10_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_11_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_11_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_12_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_12_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_13_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_13_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_14_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_14_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_15_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_15_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_cntl_V_din : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_weight_cntl_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_ap_start : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_ap_done : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_ap_idle : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_ap_ready : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWVALID : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WVALID : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WLAST : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARVALID : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_RREADY : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_BREADY : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_0_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_1_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_2_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_3_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_4_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_4_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_5_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_5_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_6_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_6_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_7_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_7_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_8_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_8_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_9_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_9_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_10_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_10_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_11_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_11_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_12_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_12_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_13_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_13_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_14_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_14_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_15_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_15_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_cntl_V_din : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_beta_cntl_V_write : STD_LOGIC;
    signal tmp_454_reg_321 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_453_reg_333 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_455_reg_345 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_103_i_i_i_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_456_reg_357 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copy_input_fmem2buff_2_fu_369_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_cntl_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal input_cntl_V_full_n : STD_LOGIC;
    signal input_cntl_V_write : STD_LOGIC;
    signal grp_copy_weight_fmem2buf_3_fu_388_ap_start_reg : STD_LOGIC := '0';
    signal weight_cntl_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_cntl_V_full_n : STD_LOGIC;
    signal weight_cntl_V_write : STD_LOGIC;
    signal grp_copy_beta_fmem2buffe_1_fu_434_ap_start_reg : STD_LOGIC := '0';
    signal beta_cntl_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_cntl_V_full_n : STD_LOGIC;
    signal beta_cntl_V_write : STD_LOGIC;
    signal tmp_450_nbreadreq_fu_250_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_cntl_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal input_cntl_V_empty_n : STD_LOGIC;
    signal input_cntl_V_read : STD_LOGIC;
    signal tmp_451_nbreadreq_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_cntl_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_cntl_V_empty_n : STD_LOGIC;
    signal weight_cntl_V_read : STD_LOGIC;
    signal tmp_452_nbreadreq_fu_264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_cntl_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_cntl_V_empty_n : STD_LOGIC;
    signal beta_cntl_V_read : STD_LOGIC;
    signal tmp_90_i_i_i_fu_489_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_91_i_i_i_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_i_i_i_fu_527_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_95_i_i_i_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_444_fu_553_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_98_i_i_i_fu_578_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_99_i_i_i_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_449_fu_622_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_106_i_i_i_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_327_cast_i_i_i_fu_626_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_107_i_i_i_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_i_i_i_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_i_i_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state7_on_subcall_done : BOOLEAN;

    component copy_input_fmem2buff_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        input_buffer_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_buffer_V_full_n : IN STD_LOGIC;
        input_buffer_V_write : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (2 downto 0);
        r : IN STD_LOGIC_VECTOR (9 downto 0);
        c : IN STD_LOGIC_VECTOR (9 downto 0);
        nLoops : IN STD_LOGIC_VECTOR (1 downto 0);
        rLoops : IN STD_LOGIC_VECTOR (9 downto 0);
        cLoops : IN STD_LOGIC_VECTOR (9 downto 0);
        input_cntl_V_din : OUT STD_LOGIC;
        input_cntl_V_full_n : IN STD_LOGIC;
        input_cntl_V_write : OUT STD_LOGIC );
    end component;


    component copy_weight_fmem2buf_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        weight_buffer_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_0_V_full_n : IN STD_LOGIC;
        weight_buffer_0_V_write : OUT STD_LOGIC;
        weight_buffer_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_1_V_full_n : IN STD_LOGIC;
        weight_buffer_1_V_write : OUT STD_LOGIC;
        weight_buffer_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_2_V_full_n : IN STD_LOGIC;
        weight_buffer_2_V_write : OUT STD_LOGIC;
        weight_buffer_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_3_V_full_n : IN STD_LOGIC;
        weight_buffer_3_V_write : OUT STD_LOGIC;
        weight_buffer_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_4_V_full_n : IN STD_LOGIC;
        weight_buffer_4_V_write : OUT STD_LOGIC;
        weight_buffer_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_5_V_full_n : IN STD_LOGIC;
        weight_buffer_5_V_write : OUT STD_LOGIC;
        weight_buffer_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_6_V_full_n : IN STD_LOGIC;
        weight_buffer_6_V_write : OUT STD_LOGIC;
        weight_buffer_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_7_V_full_n : IN STD_LOGIC;
        weight_buffer_7_V_write : OUT STD_LOGIC;
        weight_buffer_8_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_8_V_full_n : IN STD_LOGIC;
        weight_buffer_8_V_write : OUT STD_LOGIC;
        weight_buffer_9_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_9_V_full_n : IN STD_LOGIC;
        weight_buffer_9_V_write : OUT STD_LOGIC;
        weight_buffer_10_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_10_V_full_n : IN STD_LOGIC;
        weight_buffer_10_V_write : OUT STD_LOGIC;
        weight_buffer_11_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_11_V_full_n : IN STD_LOGIC;
        weight_buffer_11_V_write : OUT STD_LOGIC;
        weight_buffer_12_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_12_V_full_n : IN STD_LOGIC;
        weight_buffer_12_V_write : OUT STD_LOGIC;
        weight_buffer_13_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_13_V_full_n : IN STD_LOGIC;
        weight_buffer_13_V_write : OUT STD_LOGIC;
        weight_buffer_14_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_14_V_full_n : IN STD_LOGIC;
        weight_buffer_14_V_write : OUT STD_LOGIC;
        weight_buffer_15_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        weight_buffer_15_V_full_n : IN STD_LOGIC;
        weight_buffer_15_V_write : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (2 downto 0);
        m : IN STD_LOGIC_VECTOR (5 downto 0);
        nLoops : IN STD_LOGIC_VECTOR (1 downto 0);
        mLoops : IN STD_LOGIC_VECTOR (5 downto 0);
        weight_cntl_V_din : OUT STD_LOGIC;
        weight_cntl_V_full_n : IN STD_LOGIC;
        weight_cntl_V_write : OUT STD_LOGIC );
    end component;


    component copy_beta_fmem2buffe_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        beta_buffer_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_0_V_full_n : IN STD_LOGIC;
        beta_buffer_0_V_write : OUT STD_LOGIC;
        beta_buffer_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_1_V_full_n : IN STD_LOGIC;
        beta_buffer_1_V_write : OUT STD_LOGIC;
        beta_buffer_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_2_V_full_n : IN STD_LOGIC;
        beta_buffer_2_V_write : OUT STD_LOGIC;
        beta_buffer_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_3_V_full_n : IN STD_LOGIC;
        beta_buffer_3_V_write : OUT STD_LOGIC;
        beta_buffer_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_4_V_full_n : IN STD_LOGIC;
        beta_buffer_4_V_write : OUT STD_LOGIC;
        beta_buffer_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_5_V_full_n : IN STD_LOGIC;
        beta_buffer_5_V_write : OUT STD_LOGIC;
        beta_buffer_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_6_V_full_n : IN STD_LOGIC;
        beta_buffer_6_V_write : OUT STD_LOGIC;
        beta_buffer_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_7_V_full_n : IN STD_LOGIC;
        beta_buffer_7_V_write : OUT STD_LOGIC;
        beta_buffer_8_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_8_V_full_n : IN STD_LOGIC;
        beta_buffer_8_V_write : OUT STD_LOGIC;
        beta_buffer_9_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_9_V_full_n : IN STD_LOGIC;
        beta_buffer_9_V_write : OUT STD_LOGIC;
        beta_buffer_10_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_10_V_full_n : IN STD_LOGIC;
        beta_buffer_10_V_write : OUT STD_LOGIC;
        beta_buffer_11_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_11_V_full_n : IN STD_LOGIC;
        beta_buffer_11_V_write : OUT STD_LOGIC;
        beta_buffer_12_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_12_V_full_n : IN STD_LOGIC;
        beta_buffer_12_V_write : OUT STD_LOGIC;
        beta_buffer_13_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_13_V_full_n : IN STD_LOGIC;
        beta_buffer_13_V_write : OUT STD_LOGIC;
        beta_buffer_14_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_14_V_full_n : IN STD_LOGIC;
        beta_buffer_14_V_write : OUT STD_LOGIC;
        beta_buffer_15_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        beta_buffer_15_V_full_n : IN STD_LOGIC;
        beta_buffer_15_V_write : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (9 downto 0);
        m : IN STD_LOGIC_VECTOR (9 downto 0);
        mLoops : IN STD_LOGIC_VECTOR (9 downto 0);
        beta_cntl_V_din : OUT STD_LOGIC;
        beta_cntl_V_full_n : IN STD_LOGIC;
        beta_cntl_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w1_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_copy_input_fmem2buff_2_fu_369 : component copy_input_fmem2buff_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_copy_input_fmem2buff_2_fu_369_ap_start,
        ap_done => grp_copy_input_fmem2buff_2_fu_369_ap_done,
        ap_idle => grp_copy_input_fmem2buff_2_fu_369_ap_idle,
        ap_ready => grp_copy_input_fmem2buff_2_fu_369_ap_ready,
        m_axi_inputs_AWVALID => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WLAST,
        m_axi_inputs_WID => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WID,
        m_axi_inputs_WUSER => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => m_axi_inputs_ARREADY,
        m_axi_inputs_ARADDR => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => m_axi_inputs_RVALID,
        m_axi_inputs_RREADY => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => m_axi_inputs_RDATA,
        m_axi_inputs_RLAST => m_axi_inputs_RLAST,
        m_axi_inputs_RID => m_axi_inputs_RID,
        m_axi_inputs_RUSER => m_axi_inputs_RUSER,
        m_axi_inputs_RRESP => m_axi_inputs_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset => inputs_offset,
        input_buffer_V_din => grp_copy_input_fmem2buff_2_fu_369_input_buffer_V_din,
        input_buffer_V_full_n => input_buffer_V_full_n,
        input_buffer_V_write => grp_copy_input_fmem2buff_2_fu_369_input_buffer_V_write,
        n => tmp_456_reg_357,
        r => tmp_454_reg_321,
        c => tmp_453_reg_333,
        nLoops => nLoops_reg_803,
        rLoops => rLoops_reg_734,
        cLoops => cLoops_reg_753,
        input_cntl_V_din => grp_copy_input_fmem2buff_2_fu_369_input_cntl_V_din,
        input_cntl_V_full_n => input_cntl_V_full_n,
        input_cntl_V_write => grp_copy_input_fmem2buff_2_fu_369_input_cntl_V_write);

    grp_copy_weight_fmem2buf_3_fu_388 : component copy_weight_fmem2buf_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_copy_weight_fmem2buf_3_fu_388_ap_start,
        ap_done => grp_copy_weight_fmem2buf_3_fu_388_ap_done,
        ap_idle => grp_copy_weight_fmem2buf_3_fu_388_ap_idle,
        ap_ready => grp_copy_weight_fmem2buf_3_fu_388_ap_ready,
        m_axi_weights_AWVALID => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => m_axi_weights_ARREADY,
        m_axi_weights_ARADDR => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => m_axi_weights_RVALID,
        m_axi_weights_RREADY => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_RREADY,
        m_axi_weights_RDATA => m_axi_weights_RDATA,
        m_axi_weights_RLAST => m_axi_weights_RLAST,
        m_axi_weights_RID => m_axi_weights_RID,
        m_axi_weights_RUSER => m_axi_weights_RUSER,
        m_axi_weights_RRESP => m_axi_weights_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset => weights_offset,
        weight_buffer_0_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_0_V_din,
        weight_buffer_0_V_full_n => weight_buffer_0_full_n,
        weight_buffer_0_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_0_V_write,
        weight_buffer_1_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_1_V_din,
        weight_buffer_1_V_full_n => weight_buffer_1_full_n,
        weight_buffer_1_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_1_V_write,
        weight_buffer_2_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_2_V_din,
        weight_buffer_2_V_full_n => weight_buffer_2_full_n,
        weight_buffer_2_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_2_V_write,
        weight_buffer_3_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_3_V_din,
        weight_buffer_3_V_full_n => weight_buffer_3_full_n,
        weight_buffer_3_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_3_V_write,
        weight_buffer_4_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_4_V_din,
        weight_buffer_4_V_full_n => weight_buffer_4_full_n,
        weight_buffer_4_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_4_V_write,
        weight_buffer_5_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_5_V_din,
        weight_buffer_5_V_full_n => weight_buffer_5_full_n,
        weight_buffer_5_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_5_V_write,
        weight_buffer_6_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_6_V_din,
        weight_buffer_6_V_full_n => weight_buffer_6_full_n,
        weight_buffer_6_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_6_V_write,
        weight_buffer_7_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_7_V_din,
        weight_buffer_7_V_full_n => weight_buffer_7_full_n,
        weight_buffer_7_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_7_V_write,
        weight_buffer_8_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_8_V_din,
        weight_buffer_8_V_full_n => weight_buffer_8_full_n,
        weight_buffer_8_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_8_V_write,
        weight_buffer_9_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_9_V_din,
        weight_buffer_9_V_full_n => weight_buffer_9_full_n,
        weight_buffer_9_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_9_V_write,
        weight_buffer_10_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_10_V_din,
        weight_buffer_10_V_full_n => weight_buffer_10_full_n,
        weight_buffer_10_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_10_V_write,
        weight_buffer_11_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_11_V_din,
        weight_buffer_11_V_full_n => weight_buffer_11_full_n,
        weight_buffer_11_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_11_V_write,
        weight_buffer_12_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_12_V_din,
        weight_buffer_12_V_full_n => weight_buffer_12_full_n,
        weight_buffer_12_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_12_V_write,
        weight_buffer_13_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_13_V_din,
        weight_buffer_13_V_full_n => weight_buffer_13_full_n,
        weight_buffer_13_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_13_V_write,
        weight_buffer_14_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_14_V_din,
        weight_buffer_14_V_full_n => weight_buffer_14_full_n,
        weight_buffer_14_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_14_V_write,
        weight_buffer_15_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_15_V_din,
        weight_buffer_15_V_full_n => weight_buffer_15_full_n,
        weight_buffer_15_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_15_V_write,
        n => tmp_456_reg_357,
        m => tmp_455_reg_345,
        nLoops => nLoops_reg_803,
        mLoops => mLoops_reg_776,
        weight_cntl_V_din => grp_copy_weight_fmem2buf_3_fu_388_weight_cntl_V_din,
        weight_cntl_V_full_n => weight_cntl_V_full_n,
        weight_cntl_V_write => grp_copy_weight_fmem2buf_3_fu_388_weight_cntl_V_write);

    grp_copy_beta_fmem2buffe_1_fu_434 : component copy_beta_fmem2buffe_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_copy_beta_fmem2buffe_1_fu_434_ap_start,
        ap_done => grp_copy_beta_fmem2buffe_1_fu_434_ap_done,
        ap_idle => grp_copy_beta_fmem2buffe_1_fu_434_ap_idle,
        ap_ready => grp_copy_beta_fmem2buffe_1_fu_434_ap_ready,
        m_axi_betas_AWVALID => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWADDR,
        m_axi_betas_AWID => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWID,
        m_axi_betas_AWLEN => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WLAST,
        m_axi_betas_WID => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WID,
        m_axi_betas_WUSER => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => m_axi_betas_ARREADY,
        m_axi_betas_ARADDR => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARADDR,
        m_axi_betas_ARID => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARID,
        m_axi_betas_ARLEN => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => m_axi_betas_RVALID,
        m_axi_betas_RREADY => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_RREADY,
        m_axi_betas_RDATA => m_axi_betas_RDATA,
        m_axi_betas_RLAST => m_axi_betas_RLAST,
        m_axi_betas_RID => m_axi_betas_RID,
        m_axi_betas_RUSER => m_axi_betas_RUSER,
        m_axi_betas_RRESP => m_axi_betas_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset => betas_offset,
        beta_buffer_0_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_0_V_din,
        beta_buffer_0_V_full_n => beta_buffer_0_full_n,
        beta_buffer_0_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_0_V_write,
        beta_buffer_1_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_1_V_din,
        beta_buffer_1_V_full_n => beta_buffer_1_full_n,
        beta_buffer_1_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_1_V_write,
        beta_buffer_2_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_2_V_din,
        beta_buffer_2_V_full_n => beta_buffer_2_full_n,
        beta_buffer_2_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_2_V_write,
        beta_buffer_3_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_3_V_din,
        beta_buffer_3_V_full_n => beta_buffer_3_full_n,
        beta_buffer_3_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_3_V_write,
        beta_buffer_4_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_4_V_din,
        beta_buffer_4_V_full_n => beta_buffer_4_full_n,
        beta_buffer_4_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_4_V_write,
        beta_buffer_5_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_5_V_din,
        beta_buffer_5_V_full_n => beta_buffer_5_full_n,
        beta_buffer_5_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_5_V_write,
        beta_buffer_6_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_6_V_din,
        beta_buffer_6_V_full_n => beta_buffer_6_full_n,
        beta_buffer_6_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_6_V_write,
        beta_buffer_7_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_7_V_din,
        beta_buffer_7_V_full_n => beta_buffer_7_full_n,
        beta_buffer_7_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_7_V_write,
        beta_buffer_8_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_8_V_din,
        beta_buffer_8_V_full_n => beta_buffer_8_full_n,
        beta_buffer_8_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_8_V_write,
        beta_buffer_9_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_9_V_din,
        beta_buffer_9_V_full_n => beta_buffer_9_full_n,
        beta_buffer_9_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_9_V_write,
        beta_buffer_10_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_10_V_din,
        beta_buffer_10_V_full_n => beta_buffer_10_full_n,
        beta_buffer_10_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_10_V_write,
        beta_buffer_11_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_11_V_din,
        beta_buffer_11_V_full_n => beta_buffer_11_full_n,
        beta_buffer_11_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_11_V_write,
        beta_buffer_12_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_12_V_din,
        beta_buffer_12_V_full_n => beta_buffer_12_full_n,
        beta_buffer_12_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_12_V_write,
        beta_buffer_13_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_13_V_din,
        beta_buffer_13_V_full_n => beta_buffer_13_full_n,
        beta_buffer_13_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_13_V_write,
        beta_buffer_14_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_14_V_din,
        beta_buffer_14_V_full_n => beta_buffer_14_full_n,
        beta_buffer_14_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_14_V_write,
        beta_buffer_15_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_15_V_din,
        beta_buffer_15_V_full_n => beta_buffer_15_full_n,
        beta_buffer_15_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_15_V_write,
        n => tmp_324_cast1_cast4_s_reg_809,
        m => tmp_96_cast3_cast1_i_reg_814,
        mLoops => mLoops_cast_cast2_i_s_reg_819,
        beta_cntl_V_din => grp_copy_beta_fmem2buffe_1_fu_434_beta_cntl_V_din,
        beta_cntl_V_full_n => beta_cntl_V_full_n,
        beta_cntl_V_write => grp_copy_beta_fmem2buffe_1_fu_434_beta_cntl_V_write);

    input_cntl_V_fifo_U : component fifo_w1_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => input_cntl_V_din,
        if_full_n => input_cntl_V_full_n,
        if_write => input_cntl_V_write,
        if_dout => input_cntl_V_dout,
        if_empty_n => input_cntl_V_empty_n,
        if_read => input_cntl_V_read);

    weight_cntl_V_fifo_U : component fifo_w1_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => weight_cntl_V_din,
        if_full_n => weight_cntl_V_full_n,
        if_write => weight_cntl_V_write,
        if_dout => weight_cntl_V_dout,
        if_empty_n => weight_cntl_V_empty_n,
        if_read => weight_cntl_V_read);

    beta_cntl_V_fifo_U : component fifo_w1_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => beta_cntl_V_din,
        if_full_n => beta_cntl_V_full_n,
        if_write => beta_cntl_V_write,
        if_dout => beta_cntl_V_dout,
        if_empty_n => beta_cntl_V_empty_n,
        if_read => beta_cntl_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_fu_481_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_copy_beta_fmem2buffe_1_fu_434_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_copy_beta_fmem2buffe_1_fu_434_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_copy_beta_fmem2buffe_1_fu_434_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_beta_fmem2buffe_1_fu_434_ap_ready = ap_const_logic_1)) then 
                    grp_copy_beta_fmem2buffe_1_fu_434_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_copy_input_fmem2buff_2_fu_369_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_copy_input_fmem2buff_2_fu_369_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_copy_input_fmem2buff_2_fu_369_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_input_fmem2buff_2_fu_369_ap_ready = ap_const_logic_1)) then 
                    grp_copy_input_fmem2buff_2_fu_369_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_copy_weight_fmem2buf_3_fu_388_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_copy_weight_fmem2buf_3_fu_388_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_copy_weight_fmem2buf_3_fu_388_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copy_weight_fmem2buf_3_fu_388_ap_ready = ap_const_logic_1)) then 
                    grp_copy_weight_fmem2buf_3_fu_388_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    tmp_453_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_446_fu_570_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                tmp_453_reg_333 <= c_reg_758;
            elsif (((tmp_fu_481_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmp_453_reg_333 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    tmp_454_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_443_fu_519_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_454_reg_321 <= r_reg_739;
            elsif ((not(((outputs_offset_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_454_reg_321 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    tmp_455_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_103_i_i_i_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tmp_455_reg_345 <= m_reg_782;
            elsif (((tmp_443_fu_519_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_455_reg_345 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    tmp_456_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_446_fu_570_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                tmp_456_reg_357 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                tmp_456_reg_357 <= n_fu_684_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_443_fu_519_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                cLoops_reg_753 <= cLoops_fu_539_p3;
                c_reg_758 <= c_fu_547_p2;
                tmp_445_reg_763 <= tmp_444_fu_553_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    mLoops_cast_cast2_i_s_reg_819(5 downto 0) <= mLoops_cast_cast2_i_s_fu_658_p1(5 downto 0);
                nLoops_reg_803 <= nLoops_fu_638_p3;
                    tmp_324_cast1_cast4_s_reg_809(2 downto 0) <= tmp_324_cast1_cast4_s_fu_648_p1(2 downto 0);
                tmp_458_reg_824 <= tmp_458_fu_678_p2;
                    tmp_96_cast3_cast1_i_reg_814(5 downto 0) <= tmp_96_cast3_cast1_i_fu_653_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_446_fu_570_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                mLoops_reg_776 <= mLoops_fu_590_p3;
                m_reg_782 <= m_fu_598_p2;
                tmp_447_reg_787 <= m_fu_598_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_481_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                rLoops_reg_734 <= rLoops_fu_501_p3;
                r_reg_739 <= r_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_226_cast5_i_i_i_reg_726(9 downto 0) <= tmp_226_cast5_i_i_i_fu_477_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    tmp_457_reg_792(2 downto 0) <= tmp_457_fu_612_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_92_cast4_i_i_i_reg_745(9 downto 0) <= tmp_92_cast4_i_i_i_fu_515_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_96_cast3_i_i_i_reg_768(5 downto 0) <= tmp_96_cast3_i_i_i_fu_566_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_226_cast5_i_i_i_reg_726(31 downto 10) <= "0000000000000000000000";
    tmp_92_cast4_i_i_i_reg_745(31 downto 10) <= "0000000000000000000000";
    tmp_96_cast3_i_i_i_reg_768(31 downto 6) <= "00000000000000000000000000";
    tmp_457_reg_792(31 downto 3) <= "00000000000000000000000000000";
    tmp_324_cast1_cast4_s_reg_809(9 downto 3) <= "0000000";
    tmp_96_cast3_cast1_i_reg_814(9 downto 6) <= "0000";
    mLoops_cast_cast2_i_s_reg_819(9 downto 6) <= "0000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, outputs_offset_out_full_n, ap_CS_fsm_state2, tmp_fu_481_p3, ap_CS_fsm_state3, tmp_443_fu_519_p3, ap_CS_fsm_state4, tmp_446_fu_570_p3, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_448_nbwritereq_fu_242_p3, tmp_103_i_i_i_fu_616_p2, ap_CS_fsm_state7, ap_block_state7_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((outputs_offset_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_481_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_443_fu_519_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_446_fu_570_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_103_i_i_i_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, outputs_offset_out_full_n)
    begin
                ap_block_state1 <= ((outputs_offset_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state7_on_subcall_done_assign_proc : process(grp_copy_input_fmem2buff_2_fu_369_ap_done, grp_copy_weight_fmem2buf_3_fu_388_ap_done, grp_copy_beta_fmem2buffe_1_fu_434_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((grp_copy_beta_fmem2buffe_1_fu_434_ap_done = ap_const_logic_0) or (grp_copy_weight_fmem2buf_3_fu_388_ap_done = ap_const_logic_0) or (grp_copy_input_fmem2buff_2_fu_369_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_481_p3)
    begin
        if (((tmp_fu_481_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    beta_buffer_0_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_0_V_din;

    beta_buffer_0_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_0_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_0_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_0_V_write;
        else 
            beta_buffer_0_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_10_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_10_V_din;

    beta_buffer_10_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_10_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_10_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_10_V_write;
        else 
            beta_buffer_10_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_11_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_11_V_din;

    beta_buffer_11_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_11_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_11_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_11_V_write;
        else 
            beta_buffer_11_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_12_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_12_V_din;

    beta_buffer_12_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_12_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_12_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_12_V_write;
        else 
            beta_buffer_12_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_13_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_13_V_din;

    beta_buffer_13_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_13_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_13_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_13_V_write;
        else 
            beta_buffer_13_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_14_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_14_V_din;

    beta_buffer_14_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_14_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_14_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_14_V_write;
        else 
            beta_buffer_14_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_15_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_15_V_din;

    beta_buffer_15_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_15_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_15_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_15_V_write;
        else 
            beta_buffer_15_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_1_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_1_V_din;

    beta_buffer_1_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_1_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_1_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_1_V_write;
        else 
            beta_buffer_1_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_2_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_2_V_din;

    beta_buffer_2_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_2_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_2_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_2_V_write;
        else 
            beta_buffer_2_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_3_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_3_V_din;

    beta_buffer_3_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_3_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_3_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_3_V_write;
        else 
            beta_buffer_3_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_4_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_4_V_din;

    beta_buffer_4_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_4_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_4_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_4_V_write;
        else 
            beta_buffer_4_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_5_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_5_V_din;

    beta_buffer_5_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_5_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_5_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_5_V_write;
        else 
            beta_buffer_5_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_6_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_6_V_din;

    beta_buffer_6_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_6_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_6_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_6_V_write;
        else 
            beta_buffer_6_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_7_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_7_V_din;

    beta_buffer_7_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_7_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_7_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_7_V_write;
        else 
            beta_buffer_7_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_8_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_8_V_din;

    beta_buffer_8_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_8_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_8_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_8_V_write;
        else 
            beta_buffer_8_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_buffer_9_din <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_9_V_din;

    beta_buffer_9_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_9_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_buffer_9_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_buffer_9_V_write;
        else 
            beta_buffer_9_write <= ap_const_logic_0;
        end if; 
    end process;

    beta_cntl_V_din <= (0=>grp_copy_beta_fmem2buffe_1_fu_434_beta_cntl_V_din, others=>'-');

    beta_cntl_V_read_assign_proc : process(ap_CS_fsm_state8, tmp_450_nbreadreq_fu_250_p3, tmp_451_nbreadreq_fu_257_p3, tmp_452_nbreadreq_fu_264_p3, beta_cntl_V_empty_n)
    begin
        if (((tmp_452_nbreadreq_fu_264_p3 = ap_const_lv1_1) and (tmp_451_nbreadreq_fu_257_p3 = ap_const_lv1_1) and (tmp_450_nbreadreq_fu_250_p3 = ap_const_lv1_1) and (beta_cntl_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            beta_cntl_V_read <= ap_const_logic_1;
        else 
            beta_cntl_V_read <= ap_const_logic_0;
        end if; 
    end process;


    beta_cntl_V_write_assign_proc : process(grp_copy_beta_fmem2buffe_1_fu_434_beta_cntl_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            beta_cntl_V_write <= grp_copy_beta_fmem2buffe_1_fu_434_beta_cntl_V_write;
        else 
            beta_cntl_V_write <= ap_const_logic_0;
        end if; 
    end process;

    cLoops_fu_539_p3 <= 
        ap_const_lv10_10 when (tmp_95_i_i_i_fu_533_p2(0) = '1') else 
        tmp_94_i_i_i_fu_527_p2;
    c_fu_547_p2 <= std_logic_vector(unsigned(tmp_453_reg_333) + unsigned(ap_const_lv10_10));
    data_buffer_V_din <= tmp_458_reg_824(0);

    data_buffer_V_write_assign_proc : process(data_buffer_V_full_n, ap_CS_fsm_state8, tmp_450_nbreadreq_fu_250_p3, tmp_451_nbreadreq_fu_257_p3, tmp_452_nbreadreq_fu_264_p3)
    begin
        if (((tmp_452_nbreadreq_fu_264_p3 = ap_const_lv1_1) and (tmp_451_nbreadreq_fu_257_p3 = ap_const_lv1_1) and (tmp_450_nbreadreq_fu_250_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (data_buffer_V_full_n = ap_const_logic_1))) then 
            data_buffer_V_write <= ap_const_logic_1;
        else 
            data_buffer_V_write <= ap_const_logic_0;
        end if; 
    end process;

    data_c_V_din <= tmp_92_cast4_i_i_i_reg_745;

    data_c_V_write_assign_proc : process(data_c_V_full_n, ap_CS_fsm_state8, tmp_450_nbreadreq_fu_250_p3, tmp_451_nbreadreq_fu_257_p3, tmp_452_nbreadreq_fu_264_p3)
    begin
        if (((tmp_452_nbreadreq_fu_264_p3 = ap_const_lv1_1) and (tmp_451_nbreadreq_fu_257_p3 = ap_const_lv1_1) and (tmp_450_nbreadreq_fu_250_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (data_c_V_full_n = ap_const_logic_1))) then 
            data_c_V_write <= ap_const_logic_1;
        else 
            data_c_V_write <= ap_const_logic_0;
        end if; 
    end process;

    data_m_V_din <= tmp_96_cast3_i_i_i_reg_768;

    data_m_V_write_assign_proc : process(data_m_V_full_n, ap_CS_fsm_state8, tmp_450_nbreadreq_fu_250_p3, tmp_451_nbreadreq_fu_257_p3, tmp_452_nbreadreq_fu_264_p3)
    begin
        if (((tmp_452_nbreadreq_fu_264_p3 = ap_const_lv1_1) and (tmp_451_nbreadreq_fu_257_p3 = ap_const_lv1_1) and (tmp_450_nbreadreq_fu_250_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (data_m_V_full_n = ap_const_logic_1))) then 
            data_m_V_write <= ap_const_logic_1;
        else 
            data_m_V_write <= ap_const_logic_0;
        end if; 
    end process;

    data_n_V_din <= tmp_457_reg_792;

    data_n_V_write_assign_proc : process(data_n_V_full_n, ap_CS_fsm_state8, tmp_450_nbreadreq_fu_250_p3, tmp_451_nbreadreq_fu_257_p3, tmp_452_nbreadreq_fu_264_p3)
    begin
        if (((tmp_452_nbreadreq_fu_264_p3 = ap_const_lv1_1) and (tmp_451_nbreadreq_fu_257_p3 = ap_const_lv1_1) and (tmp_450_nbreadreq_fu_250_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (data_n_V_full_n = ap_const_logic_1))) then 
            data_n_V_write <= ap_const_logic_1;
        else 
            data_n_V_write <= ap_const_logic_0;
        end if; 
    end process;

    data_r_V_din <= tmp_226_cast5_i_i_i_reg_726;

    data_r_V_write_assign_proc : process(data_r_V_full_n, ap_CS_fsm_state8, tmp_450_nbreadreq_fu_250_p3, tmp_451_nbreadreq_fu_257_p3, tmp_452_nbreadreq_fu_264_p3)
    begin
        if (((tmp_452_nbreadreq_fu_264_p3 = ap_const_lv1_1) and (tmp_451_nbreadreq_fu_257_p3 = ap_const_lv1_1) and (tmp_450_nbreadreq_fu_250_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8) and (data_r_V_full_n = ap_const_logic_1))) then 
            data_r_V_write <= ap_const_logic_1;
        else 
            data_r_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_copy_beta_fmem2buffe_1_fu_434_ap_start <= grp_copy_beta_fmem2buffe_1_fu_434_ap_start_reg;
    grp_copy_input_fmem2buff_2_fu_369_ap_start <= grp_copy_input_fmem2buff_2_fu_369_ap_start_reg;
    grp_copy_weight_fmem2buf_3_fu_388_ap_start <= grp_copy_weight_fmem2buf_3_fu_388_ap_start_reg;
    input_buffer_V_din <= grp_copy_input_fmem2buff_2_fu_369_input_buffer_V_din;

    input_buffer_V_write_assign_proc : process(grp_copy_input_fmem2buff_2_fu_369_input_buffer_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_buffer_V_write <= grp_copy_input_fmem2buff_2_fu_369_input_buffer_V_write;
        else 
            input_buffer_V_write <= ap_const_logic_0;
        end if; 
    end process;

    input_cntl_V_din <= (0=>grp_copy_input_fmem2buff_2_fu_369_input_cntl_V_din, others=>'-');

    input_cntl_V_read_assign_proc : process(ap_CS_fsm_state8, tmp_450_nbreadreq_fu_250_p3, input_cntl_V_empty_n, tmp_451_nbreadreq_fu_257_p3, tmp_452_nbreadreq_fu_264_p3)
    begin
        if (((tmp_452_nbreadreq_fu_264_p3 = ap_const_lv1_1) and (tmp_451_nbreadreq_fu_257_p3 = ap_const_lv1_1) and (tmp_450_nbreadreq_fu_250_p3 = ap_const_lv1_1) and (input_cntl_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_cntl_V_read <= ap_const_logic_1;
        else 
            input_cntl_V_read <= ap_const_logic_0;
        end if; 
    end process;


    input_cntl_V_write_assign_proc : process(grp_copy_input_fmem2buff_2_fu_369_input_cntl_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_cntl_V_write <= grp_copy_input_fmem2buff_2_fu_369_input_cntl_V_write;
        else 
            input_cntl_V_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_481_p3)
    begin
        if (((tmp_fu_481_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mLoops_cast_cast2_i_s_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mLoops_reg_776),10));
    mLoops_fu_590_p3 <= 
        ap_const_lv6_10 when (tmp_99_i_i_i_fu_584_p2(0) = '1') else 
        tmp_98_i_i_i_fu_578_p2;
    m_axi_betas_ARADDR <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARADDR;
    m_axi_betas_ARBURST <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARBURST;
    m_axi_betas_ARCACHE <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARCACHE;
    m_axi_betas_ARID <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARID;
    m_axi_betas_ARLEN <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARLEN;
    m_axi_betas_ARLOCK <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARLOCK;
    m_axi_betas_ARPROT <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARPROT;
    m_axi_betas_ARQOS <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARQOS;
    m_axi_betas_ARREGION <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARREGION;
    m_axi_betas_ARSIZE <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARSIZE;
    m_axi_betas_ARUSER <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARUSER;

    m_axi_betas_ARVALID_assign_proc : process(ap_CS_fsm_state6, tmp_448_nbwritereq_fu_242_p3, grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARVALID, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_betas_ARVALID <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_ARVALID;
        else 
            m_axi_betas_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_betas_AWADDR <= ap_const_lv32_0;
    m_axi_betas_AWBURST <= ap_const_lv2_0;
    m_axi_betas_AWCACHE <= ap_const_lv4_0;
    m_axi_betas_AWID <= ap_const_lv1_0;
    m_axi_betas_AWLEN <= ap_const_lv32_0;
    m_axi_betas_AWLOCK <= ap_const_lv2_0;
    m_axi_betas_AWPROT <= ap_const_lv3_0;
    m_axi_betas_AWQOS <= ap_const_lv4_0;
    m_axi_betas_AWREGION <= ap_const_lv4_0;
    m_axi_betas_AWSIZE <= ap_const_lv3_0;
    m_axi_betas_AWUSER <= ap_const_lv1_0;
    m_axi_betas_AWVALID <= ap_const_logic_0;
    m_axi_betas_BREADY <= ap_const_logic_0;

    m_axi_betas_RREADY_assign_proc : process(ap_CS_fsm_state6, tmp_448_nbwritereq_fu_242_p3, grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_RREADY, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_betas_RREADY <= grp_copy_beta_fmem2buffe_1_fu_434_m_axi_betas_RREADY;
        else 
            m_axi_betas_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_betas_WDATA <= ap_const_lv16_0;
    m_axi_betas_WID <= ap_const_lv1_0;
    m_axi_betas_WLAST <= ap_const_logic_0;
    m_axi_betas_WSTRB <= ap_const_lv2_0;
    m_axi_betas_WUSER <= ap_const_lv1_0;
    m_axi_betas_WVALID <= ap_const_logic_0;
    m_axi_inputs_ARADDR <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARADDR;
    m_axi_inputs_ARBURST <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARBURST;
    m_axi_inputs_ARCACHE <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARCACHE;
    m_axi_inputs_ARID <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARID;
    m_axi_inputs_ARLEN <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARLEN;
    m_axi_inputs_ARLOCK <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARLOCK;
    m_axi_inputs_ARPROT <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARPROT;
    m_axi_inputs_ARQOS <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARQOS;
    m_axi_inputs_ARREGION <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARREGION;
    m_axi_inputs_ARSIZE <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARSIZE;
    m_axi_inputs_ARUSER <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARUSER;

    m_axi_inputs_ARVALID_assign_proc : process(ap_CS_fsm_state6, tmp_448_nbwritereq_fu_242_p3, grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARVALID, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_inputs_ARVALID <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_ARVALID;
        else 
            m_axi_inputs_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_AWADDR <= ap_const_lv32_0;
    m_axi_inputs_AWBURST <= ap_const_lv2_0;
    m_axi_inputs_AWCACHE <= ap_const_lv4_0;
    m_axi_inputs_AWID <= ap_const_lv1_0;
    m_axi_inputs_AWLEN <= ap_const_lv32_0;
    m_axi_inputs_AWLOCK <= ap_const_lv2_0;
    m_axi_inputs_AWPROT <= ap_const_lv3_0;
    m_axi_inputs_AWQOS <= ap_const_lv4_0;
    m_axi_inputs_AWREGION <= ap_const_lv4_0;
    m_axi_inputs_AWSIZE <= ap_const_lv3_0;
    m_axi_inputs_AWUSER <= ap_const_lv1_0;
    m_axi_inputs_AWVALID <= ap_const_logic_0;
    m_axi_inputs_BREADY <= ap_const_logic_0;

    m_axi_inputs_RREADY_assign_proc : process(ap_CS_fsm_state6, tmp_448_nbwritereq_fu_242_p3, grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_RREADY, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_inputs_RREADY <= grp_copy_input_fmem2buff_2_fu_369_m_axi_inputs_RREADY;
        else 
            m_axi_inputs_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_WDATA <= ap_const_lv16_0;
    m_axi_inputs_WID <= ap_const_lv1_0;
    m_axi_inputs_WLAST <= ap_const_logic_0;
    m_axi_inputs_WSTRB <= ap_const_lv2_0;
    m_axi_inputs_WUSER <= ap_const_lv1_0;
    m_axi_inputs_WVALID <= ap_const_logic_0;
    m_axi_weights_ARADDR <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARADDR;
    m_axi_weights_ARBURST <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARBURST;
    m_axi_weights_ARCACHE <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARCACHE;
    m_axi_weights_ARID <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARID;
    m_axi_weights_ARLEN <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARLEN;
    m_axi_weights_ARLOCK <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARLOCK;
    m_axi_weights_ARPROT <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARPROT;
    m_axi_weights_ARQOS <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARQOS;
    m_axi_weights_ARREGION <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARREGION;
    m_axi_weights_ARSIZE <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARSIZE;
    m_axi_weights_ARUSER <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARUSER;

    m_axi_weights_ARVALID_assign_proc : process(ap_CS_fsm_state6, tmp_448_nbwritereq_fu_242_p3, grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARVALID, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_weights_ARVALID <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_ARVALID;
        else 
            m_axi_weights_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_AWADDR <= ap_const_lv32_0;
    m_axi_weights_AWBURST <= ap_const_lv2_0;
    m_axi_weights_AWCACHE <= ap_const_lv4_0;
    m_axi_weights_AWID <= ap_const_lv1_0;
    m_axi_weights_AWLEN <= ap_const_lv32_0;
    m_axi_weights_AWLOCK <= ap_const_lv2_0;
    m_axi_weights_AWPROT <= ap_const_lv3_0;
    m_axi_weights_AWQOS <= ap_const_lv4_0;
    m_axi_weights_AWREGION <= ap_const_lv4_0;
    m_axi_weights_AWSIZE <= ap_const_lv3_0;
    m_axi_weights_AWUSER <= ap_const_lv1_0;
    m_axi_weights_AWVALID <= ap_const_logic_0;
    m_axi_weights_BREADY <= ap_const_logic_0;

    m_axi_weights_RREADY_assign_proc : process(ap_CS_fsm_state6, tmp_448_nbwritereq_fu_242_p3, grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_RREADY, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_448_nbwritereq_fu_242_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            m_axi_weights_RREADY <= grp_copy_weight_fmem2buf_3_fu_388_m_axi_weights_RREADY;
        else 
            m_axi_weights_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_WDATA <= ap_const_lv16_0;
    m_axi_weights_WID <= ap_const_lv1_0;
    m_axi_weights_WLAST <= ap_const_logic_0;
    m_axi_weights_WSTRB <= ap_const_lv2_0;
    m_axi_weights_WUSER <= ap_const_lv1_0;
    m_axi_weights_WVALID <= ap_const_logic_0;
    m_fu_598_p2 <= std_logic_vector(unsigned(tmp_455_reg_345) + unsigned(ap_const_lv6_10));
    nLoops_fu_638_p3 <= 
        ap_const_lv2_2 when (tmp_106_i_i_i_fu_632_p2(0) = '1') else 
        tmp_327_cast_i_i_i_fu_626_p2;
    n_fu_684_p2 <= std_logic_vector(unsigned(tmp_456_reg_357) + unsigned(ap_const_lv3_2));

    outputs_offset_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, outputs_offset_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_out_blk_n <= outputs_offset_out_full_n;
        else 
            outputs_offset_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outputs_offset_out_din <= outputs_offset;

    outputs_offset_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, outputs_offset_out_full_n)
    begin
        if ((not(((outputs_offset_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_out_write <= ap_const_logic_1;
        else 
            outputs_offset_out_write <= ap_const_logic_0;
        end if; 
    end process;

    rLoops_fu_501_p3 <= 
        ap_const_lv10_10 when (tmp_91_i_i_i_fu_495_p2(0) = '1') else 
        tmp_90_i_i_i_fu_489_p2;
    r_fu_509_p2 <= std_logic_vector(unsigned(tmp_454_reg_321) + unsigned(ap_const_lv10_10));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sel_tmp1_i_i_i_fu_673_p2 <= (tmp_445_reg_763 and tmp4_i_i_i_fu_668_p2);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp4_i_i_i_fu_668_p2 <= (tmp_447_reg_787 and tmp_107_i_i_i_fu_662_p2);
    tmp_103_i_i_i_fu_616_p2 <= "1" when (unsigned(tmp_456_reg_357) < unsigned(ap_const_lv3_3)) else "0";
    tmp_106_i_i_i_fu_632_p2 <= "1" when (tmp_456_reg_357 = ap_const_lv3_0) else "0";
    tmp_107_i_i_i_fu_662_p2 <= "0" when (tmp_456_reg_357 = ap_const_lv3_0) else "1";
    tmp_226_cast5_i_i_i_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_454_reg_321),32));
    tmp_324_cast1_cast4_s_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_456_reg_357),10));
    tmp_327_cast_i_i_i_fu_626_p2 <= (tmp_449_fu_622_p1 xor ap_const_lv2_3);
    tmp_443_fu_519_p3 <= tmp_453_reg_333(9 downto 9);
    tmp_444_fu_553_p2 <= (r_reg_739 and c_fu_547_p2);
    tmp_446_fu_570_p3 <= tmp_455_reg_345(5 downto 5);
    tmp_448_nbwritereq_fu_242_p3 <= (0=>data_buffer_V_full_n, others=>'-');
    tmp_449_fu_622_p1 <= tmp_456_reg_357(2 - 1 downto 0);
    tmp_450_nbreadreq_fu_250_p3 <= (0=>input_cntl_V_empty_n, others=>'-');
    tmp_451_nbreadreq_fu_257_p3 <= (0=>weight_cntl_V_empty_n, others=>'-');
    tmp_452_nbreadreq_fu_264_p3 <= (0=>beta_cntl_V_empty_n, others=>'-');
    tmp_457_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_456_reg_357),32));
    tmp_458_fu_678_p2 <= (sel_tmp1_i_i_i_fu_673_p2 xor ap_const_lv1_1);
    tmp_90_i_i_i_fu_489_p2 <= std_logic_vector(signed(ap_const_lv10_200) - signed(tmp_454_reg_321));
    tmp_91_i_i_i_fu_495_p2 <= "1" when (unsigned(tmp_90_i_i_i_fu_489_p2) > unsigned(ap_const_lv10_10)) else "0";
    tmp_92_cast4_i_i_i_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_453_reg_333),32));
    tmp_94_i_i_i_fu_527_p2 <= std_logic_vector(signed(ap_const_lv10_200) - signed(tmp_453_reg_333));
    tmp_95_i_i_i_fu_533_p2 <= "1" when (unsigned(tmp_94_i_i_i_fu_527_p2) > unsigned(ap_const_lv10_10)) else "0";
    tmp_96_cast3_cast1_i_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_455_reg_345),10));
    tmp_96_cast3_i_i_i_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_455_reg_345),32));
    tmp_98_i_i_i_fu_578_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(tmp_455_reg_345));
    tmp_99_i_i_i_fu_584_p2 <= "1" when (unsigned(tmp_98_i_i_i_fu_578_p2) > unsigned(ap_const_lv6_10)) else "0";
    tmp_fu_481_p3 <= tmp_454_reg_321(9 downto 9);
    weight_buffer_0_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_0_V_din;

    weight_buffer_0_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_0_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_0_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_0_V_write;
        else 
            weight_buffer_0_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_10_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_10_V_din;

    weight_buffer_10_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_10_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_10_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_10_V_write;
        else 
            weight_buffer_10_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_11_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_11_V_din;

    weight_buffer_11_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_11_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_11_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_11_V_write;
        else 
            weight_buffer_11_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_12_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_12_V_din;

    weight_buffer_12_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_12_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_12_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_12_V_write;
        else 
            weight_buffer_12_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_13_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_13_V_din;

    weight_buffer_13_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_13_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_13_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_13_V_write;
        else 
            weight_buffer_13_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_14_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_14_V_din;

    weight_buffer_14_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_14_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_14_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_14_V_write;
        else 
            weight_buffer_14_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_15_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_15_V_din;

    weight_buffer_15_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_15_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_15_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_15_V_write;
        else 
            weight_buffer_15_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_1_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_1_V_din;

    weight_buffer_1_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_1_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_1_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_1_V_write;
        else 
            weight_buffer_1_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_2_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_2_V_din;

    weight_buffer_2_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_2_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_2_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_2_V_write;
        else 
            weight_buffer_2_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_3_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_3_V_din;

    weight_buffer_3_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_3_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_3_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_3_V_write;
        else 
            weight_buffer_3_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_4_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_4_V_din;

    weight_buffer_4_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_4_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_4_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_4_V_write;
        else 
            weight_buffer_4_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_5_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_5_V_din;

    weight_buffer_5_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_5_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_5_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_5_V_write;
        else 
            weight_buffer_5_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_6_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_6_V_din;

    weight_buffer_6_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_6_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_6_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_6_V_write;
        else 
            weight_buffer_6_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_7_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_7_V_din;

    weight_buffer_7_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_7_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_7_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_7_V_write;
        else 
            weight_buffer_7_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_8_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_8_V_din;

    weight_buffer_8_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_8_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_8_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_8_V_write;
        else 
            weight_buffer_8_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_buffer_9_din <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_9_V_din;

    weight_buffer_9_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_9_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_buffer_9_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_buffer_9_V_write;
        else 
            weight_buffer_9_write <= ap_const_logic_0;
        end if; 
    end process;

    weight_cntl_V_din <= (0=>grp_copy_weight_fmem2buf_3_fu_388_weight_cntl_V_din, others=>'-');

    weight_cntl_V_read_assign_proc : process(ap_CS_fsm_state8, tmp_450_nbreadreq_fu_250_p3, tmp_451_nbreadreq_fu_257_p3, weight_cntl_V_empty_n, tmp_452_nbreadreq_fu_264_p3)
    begin
        if (((tmp_452_nbreadreq_fu_264_p3 = ap_const_lv1_1) and (tmp_451_nbreadreq_fu_257_p3 = ap_const_lv1_1) and (tmp_450_nbreadreq_fu_250_p3 = ap_const_lv1_1) and (weight_cntl_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            weight_cntl_V_read <= ap_const_logic_1;
        else 
            weight_cntl_V_read <= ap_const_logic_0;
        end if; 
    end process;


    weight_cntl_V_write_assign_proc : process(grp_copy_weight_fmem2buf_3_fu_388_weight_cntl_V_write, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_cntl_V_write <= grp_copy_weight_fmem2buf_3_fu_388_weight_cntl_V_write;
        else 
            weight_cntl_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
