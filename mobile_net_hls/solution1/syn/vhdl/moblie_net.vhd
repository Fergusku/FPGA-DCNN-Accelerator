-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity moblie_net is
generic (
    C_M_AXI_DATA1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA31_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA31_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA31_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA31_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA31_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA31_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA31_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA31_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA32_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA32_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA32_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA32_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA32_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA32_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA32_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA32_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA16_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA16_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA16_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA16_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA16_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA16_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA16_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA16_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA33_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA33_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA33_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA33_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA33_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA33_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA33_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA33_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA34_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA34_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA34_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA34_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA34_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA34_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA34_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA34_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA17_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA17_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA17_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA17_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA17_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA17_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA17_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA17_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA35_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA35_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA35_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA35_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA35_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA35_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA35_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA35_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA36_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA36_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA36_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA36_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA36_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA36_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA36_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA36_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA18_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA18_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA18_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA18_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA18_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA18_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA18_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA18_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA4_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA4_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA4_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA37_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA37_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA37_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA37_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA37_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA37_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA37_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA37_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA38_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA38_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA38_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA38_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA38_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA38_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA38_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA38_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA19_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA19_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA19_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA19_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA19_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA19_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA19_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA19_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA5_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA5_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA5_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA5_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA5_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA5_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA5_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA5_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA39_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA39_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA39_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA39_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA39_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA39_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA39_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA39_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA40_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA40_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA40_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA40_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA40_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA40_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA40_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA40_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA20_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA20_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA20_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA20_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA20_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA20_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA20_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA20_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA6_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA6_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA6_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA6_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA6_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA6_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA6_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA6_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA41_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA41_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA41_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA41_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA41_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA41_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA41_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA41_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA42_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA42_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA42_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA42_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA42_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA42_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA42_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA42_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA21_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA21_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA21_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA21_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA21_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA21_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA21_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA21_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA7_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA7_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA7_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA7_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA7_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA7_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA7_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA7_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA43_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA43_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA43_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA43_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA43_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA43_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA43_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA43_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA44_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA44_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA44_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA44_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA44_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA44_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA44_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA44_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA22_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA22_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA22_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA22_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA22_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA22_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA22_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA22_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA8_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA8_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA8_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA8_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA8_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA8_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA8_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA8_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA45_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA45_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA45_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA45_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA45_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA45_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA45_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA45_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA46_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA46_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA46_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA46_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA46_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA46_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA46_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA46_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA23_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA23_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA23_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA23_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA23_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA23_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA23_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA23_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA9_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA9_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA9_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA9_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA9_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA9_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA9_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA9_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA47_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA47_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA47_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA47_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA47_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA47_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA47_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA47_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA48_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA48_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA48_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA48_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA48_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA48_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA48_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA48_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA24_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA24_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA24_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA24_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA24_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA24_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA24_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA24_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA10_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA10_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA10_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA10_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA10_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA10_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA10_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA10_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA49_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA49_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA49_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA49_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA49_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA49_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA49_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA49_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA50_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA50_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA50_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA50_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA50_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA50_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA50_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA50_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA25_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA25_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA25_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA25_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA25_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA25_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA25_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA25_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA11_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA11_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA11_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA11_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA11_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA11_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA11_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA11_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA51_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA51_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA51_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA51_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA51_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA51_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA51_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA51_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA52_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA52_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA52_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA52_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA52_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA52_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA52_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA52_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA26_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA26_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA26_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA26_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA26_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA26_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA26_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA26_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA12_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA12_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA12_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA12_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA12_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA12_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA12_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA12_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA53_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA53_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA53_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA53_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA53_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA53_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA53_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA53_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA54_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA54_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA54_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA54_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA54_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA54_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA54_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA54_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA27_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA27_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA27_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA27_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA27_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA27_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA27_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA27_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA13_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA13_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA13_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA13_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA13_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA13_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA13_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA13_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA55_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA55_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA55_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA55_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA55_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA55_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA55_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA55_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA56_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA56_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA56_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA56_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA56_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA56_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA56_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA56_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA28_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA28_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA28_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA28_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA28_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA28_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA28_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA28_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA14_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA14_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA14_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA14_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA14_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA14_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA14_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA14_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA29_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA29_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA29_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA29_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA29_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA29_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA29_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA29_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA15_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA15_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA15_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA15_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA15_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA15_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA15_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA15_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA57_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA57_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA57_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA57_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA57_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA57_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA57_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA57_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA58_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA58_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA58_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA58_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA58_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA58_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA58_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA58_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA30_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA30_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA30_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA30_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA30_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA30_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA30_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA30_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA31_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA31_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA31_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA32_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA32_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA32_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA16_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA16_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA16_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA2_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA33_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA33_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA33_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA34_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA34_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA34_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA17_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA17_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA17_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA3_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA35_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA35_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA35_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA36_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA36_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA36_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA18_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA18_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA18_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA4_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA4_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA4_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA37_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA37_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA37_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA38_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA38_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA38_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA19_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA19_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA19_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA5_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA5_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA5_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA39_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA39_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA39_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA40_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA40_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA40_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA20_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA20_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA20_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA6_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA6_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA6_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA41_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA41_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA41_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA42_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA42_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA42_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA21_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA21_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA21_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA7_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA7_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA7_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA43_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA43_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA43_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA44_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA44_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA44_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA22_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA22_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA22_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA8_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA8_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA8_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA45_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA45_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA45_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA46_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA46_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA46_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA23_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA23_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA23_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA9_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA9_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA9_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA47_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA47_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA47_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA48_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA48_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA48_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA24_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA24_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA24_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA10_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA10_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA10_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA49_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA49_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA49_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA50_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA50_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA50_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA25_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA25_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA25_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA11_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA11_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA11_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA51_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA51_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA51_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA52_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA52_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA52_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA26_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA26_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA26_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA12_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA12_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA12_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA53_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA53_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA53_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA54_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA54_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA54_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA27_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA27_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA27_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA13_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA13_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA13_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA55_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA55_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA55_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA56_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA56_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA56_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA28_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA28_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA28_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA14_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA14_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA14_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA29_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA29_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA29_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA15_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA15_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA15_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA57_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA57_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA57_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA58_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA58_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA58_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA30_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA30_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA30_CACHE_VALUE : INTEGER := 3 );
port (
    m_axi_data1_AWVALID : OUT STD_LOGIC;
    m_axi_data1_AWREADY : IN STD_LOGIC;
    m_axi_data1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_AWUSER_WIDTH-1 downto 0);
    m_axi_data1_WVALID : OUT STD_LOGIC;
    m_axi_data1_WREADY : IN STD_LOGIC;
    m_axi_data1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH/8-1 downto 0);
    m_axi_data1_WLAST : OUT STD_LOGIC;
    m_axi_data1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_WUSER_WIDTH-1 downto 0);
    m_axi_data1_ARVALID : OUT STD_LOGIC;
    m_axi_data1_ARREADY : IN STD_LOGIC;
    m_axi_data1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ARUSER_WIDTH-1 downto 0);
    m_axi_data1_RVALID : IN STD_LOGIC;
    m_axi_data1_RREADY : OUT STD_LOGIC;
    m_axi_data1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_RLAST : IN STD_LOGIC;
    m_axi_data1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_RUSER_WIDTH-1 downto 0);
    m_axi_data1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BVALID : IN STD_LOGIC;
    m_axi_data1_BREADY : OUT STD_LOGIC;
    m_axi_data1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_BUSER_WIDTH-1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data31_AWVALID : OUT STD_LOGIC;
    m_axi_data31_AWREADY : IN STD_LOGIC;
    m_axi_data31_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_ADDR_WIDTH-1 downto 0);
    m_axi_data31_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_ID_WIDTH-1 downto 0);
    m_axi_data31_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data31_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data31_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data31_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data31_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data31_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data31_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data31_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data31_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_AWUSER_WIDTH-1 downto 0);
    m_axi_data31_WVALID : OUT STD_LOGIC;
    m_axi_data31_WREADY : IN STD_LOGIC;
    m_axi_data31_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_DATA_WIDTH-1 downto 0);
    m_axi_data31_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_DATA_WIDTH/8-1 downto 0);
    m_axi_data31_WLAST : OUT STD_LOGIC;
    m_axi_data31_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_ID_WIDTH-1 downto 0);
    m_axi_data31_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_WUSER_WIDTH-1 downto 0);
    m_axi_data31_ARVALID : OUT STD_LOGIC;
    m_axi_data31_ARREADY : IN STD_LOGIC;
    m_axi_data31_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_ADDR_WIDTH-1 downto 0);
    m_axi_data31_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_ID_WIDTH-1 downto 0);
    m_axi_data31_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data31_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data31_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data31_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data31_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data31_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data31_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data31_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data31_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA31_ARUSER_WIDTH-1 downto 0);
    m_axi_data31_RVALID : IN STD_LOGIC;
    m_axi_data31_RREADY : OUT STD_LOGIC;
    m_axi_data31_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA31_DATA_WIDTH-1 downto 0);
    m_axi_data31_RLAST : IN STD_LOGIC;
    m_axi_data31_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA31_ID_WIDTH-1 downto 0);
    m_axi_data31_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA31_RUSER_WIDTH-1 downto 0);
    m_axi_data31_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data31_BVALID : IN STD_LOGIC;
    m_axi_data31_BREADY : OUT STD_LOGIC;
    m_axi_data31_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data31_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA31_ID_WIDTH-1 downto 0);
    m_axi_data31_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA31_BUSER_WIDTH-1 downto 0);
    m_axi_data32_AWVALID : OUT STD_LOGIC;
    m_axi_data32_AWREADY : IN STD_LOGIC;
    m_axi_data32_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_ADDR_WIDTH-1 downto 0);
    m_axi_data32_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_ID_WIDTH-1 downto 0);
    m_axi_data32_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data32_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data32_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data32_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data32_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data32_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data32_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data32_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data32_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_AWUSER_WIDTH-1 downto 0);
    m_axi_data32_WVALID : OUT STD_LOGIC;
    m_axi_data32_WREADY : IN STD_LOGIC;
    m_axi_data32_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_DATA_WIDTH-1 downto 0);
    m_axi_data32_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_DATA_WIDTH/8-1 downto 0);
    m_axi_data32_WLAST : OUT STD_LOGIC;
    m_axi_data32_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_ID_WIDTH-1 downto 0);
    m_axi_data32_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_WUSER_WIDTH-1 downto 0);
    m_axi_data32_ARVALID : OUT STD_LOGIC;
    m_axi_data32_ARREADY : IN STD_LOGIC;
    m_axi_data32_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_ADDR_WIDTH-1 downto 0);
    m_axi_data32_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_ID_WIDTH-1 downto 0);
    m_axi_data32_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data32_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data32_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data32_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data32_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data32_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data32_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data32_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data32_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA32_ARUSER_WIDTH-1 downto 0);
    m_axi_data32_RVALID : IN STD_LOGIC;
    m_axi_data32_RREADY : OUT STD_LOGIC;
    m_axi_data32_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA32_DATA_WIDTH-1 downto 0);
    m_axi_data32_RLAST : IN STD_LOGIC;
    m_axi_data32_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA32_ID_WIDTH-1 downto 0);
    m_axi_data32_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA32_RUSER_WIDTH-1 downto 0);
    m_axi_data32_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data32_BVALID : IN STD_LOGIC;
    m_axi_data32_BREADY : OUT STD_LOGIC;
    m_axi_data32_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data32_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA32_ID_WIDTH-1 downto 0);
    m_axi_data32_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA32_BUSER_WIDTH-1 downto 0);
    m_axi_data16_AWVALID : OUT STD_LOGIC;
    m_axi_data16_AWREADY : IN STD_LOGIC;
    m_axi_data16_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_ADDR_WIDTH-1 downto 0);
    m_axi_data16_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_ID_WIDTH-1 downto 0);
    m_axi_data16_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data16_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data16_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data16_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data16_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data16_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data16_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data16_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data16_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_AWUSER_WIDTH-1 downto 0);
    m_axi_data16_WVALID : OUT STD_LOGIC;
    m_axi_data16_WREADY : IN STD_LOGIC;
    m_axi_data16_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_DATA_WIDTH-1 downto 0);
    m_axi_data16_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_DATA_WIDTH/8-1 downto 0);
    m_axi_data16_WLAST : OUT STD_LOGIC;
    m_axi_data16_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_ID_WIDTH-1 downto 0);
    m_axi_data16_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_WUSER_WIDTH-1 downto 0);
    m_axi_data16_ARVALID : OUT STD_LOGIC;
    m_axi_data16_ARREADY : IN STD_LOGIC;
    m_axi_data16_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_ADDR_WIDTH-1 downto 0);
    m_axi_data16_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_ID_WIDTH-1 downto 0);
    m_axi_data16_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data16_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data16_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data16_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data16_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data16_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data16_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data16_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data16_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA16_ARUSER_WIDTH-1 downto 0);
    m_axi_data16_RVALID : IN STD_LOGIC;
    m_axi_data16_RREADY : OUT STD_LOGIC;
    m_axi_data16_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA16_DATA_WIDTH-1 downto 0);
    m_axi_data16_RLAST : IN STD_LOGIC;
    m_axi_data16_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA16_ID_WIDTH-1 downto 0);
    m_axi_data16_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA16_RUSER_WIDTH-1 downto 0);
    m_axi_data16_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data16_BVALID : IN STD_LOGIC;
    m_axi_data16_BREADY : OUT STD_LOGIC;
    m_axi_data16_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data16_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA16_ID_WIDTH-1 downto 0);
    m_axi_data16_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA16_BUSER_WIDTH-1 downto 0);
    m_axi_data2_AWVALID : OUT STD_LOGIC;
    m_axi_data2_AWREADY : IN STD_LOGIC;
    m_axi_data2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_AWUSER_WIDTH-1 downto 0);
    m_axi_data2_WVALID : OUT STD_LOGIC;
    m_axi_data2_WREADY : IN STD_LOGIC;
    m_axi_data2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH/8-1 downto 0);
    m_axi_data2_WLAST : OUT STD_LOGIC;
    m_axi_data2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_WUSER_WIDTH-1 downto 0);
    m_axi_data2_ARVALID : OUT STD_LOGIC;
    m_axi_data2_ARREADY : IN STD_LOGIC;
    m_axi_data2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ARUSER_WIDTH-1 downto 0);
    m_axi_data2_RVALID : IN STD_LOGIC;
    m_axi_data2_RREADY : OUT STD_LOGIC;
    m_axi_data2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_RLAST : IN STD_LOGIC;
    m_axi_data2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_RUSER_WIDTH-1 downto 0);
    m_axi_data2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BVALID : IN STD_LOGIC;
    m_axi_data2_BREADY : OUT STD_LOGIC;
    m_axi_data2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_BUSER_WIDTH-1 downto 0);
    m_axi_data33_AWVALID : OUT STD_LOGIC;
    m_axi_data33_AWREADY : IN STD_LOGIC;
    m_axi_data33_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_ADDR_WIDTH-1 downto 0);
    m_axi_data33_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_ID_WIDTH-1 downto 0);
    m_axi_data33_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data33_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data33_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data33_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data33_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data33_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data33_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data33_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data33_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_AWUSER_WIDTH-1 downto 0);
    m_axi_data33_WVALID : OUT STD_LOGIC;
    m_axi_data33_WREADY : IN STD_LOGIC;
    m_axi_data33_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_DATA_WIDTH-1 downto 0);
    m_axi_data33_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_DATA_WIDTH/8-1 downto 0);
    m_axi_data33_WLAST : OUT STD_LOGIC;
    m_axi_data33_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_ID_WIDTH-1 downto 0);
    m_axi_data33_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_WUSER_WIDTH-1 downto 0);
    m_axi_data33_ARVALID : OUT STD_LOGIC;
    m_axi_data33_ARREADY : IN STD_LOGIC;
    m_axi_data33_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_ADDR_WIDTH-1 downto 0);
    m_axi_data33_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_ID_WIDTH-1 downto 0);
    m_axi_data33_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data33_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data33_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data33_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data33_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data33_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data33_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data33_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data33_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA33_ARUSER_WIDTH-1 downto 0);
    m_axi_data33_RVALID : IN STD_LOGIC;
    m_axi_data33_RREADY : OUT STD_LOGIC;
    m_axi_data33_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA33_DATA_WIDTH-1 downto 0);
    m_axi_data33_RLAST : IN STD_LOGIC;
    m_axi_data33_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA33_ID_WIDTH-1 downto 0);
    m_axi_data33_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA33_RUSER_WIDTH-1 downto 0);
    m_axi_data33_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data33_BVALID : IN STD_LOGIC;
    m_axi_data33_BREADY : OUT STD_LOGIC;
    m_axi_data33_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data33_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA33_ID_WIDTH-1 downto 0);
    m_axi_data33_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA33_BUSER_WIDTH-1 downto 0);
    m_axi_data34_AWVALID : OUT STD_LOGIC;
    m_axi_data34_AWREADY : IN STD_LOGIC;
    m_axi_data34_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_ADDR_WIDTH-1 downto 0);
    m_axi_data34_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_ID_WIDTH-1 downto 0);
    m_axi_data34_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data34_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data34_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data34_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data34_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data34_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data34_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data34_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data34_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_AWUSER_WIDTH-1 downto 0);
    m_axi_data34_WVALID : OUT STD_LOGIC;
    m_axi_data34_WREADY : IN STD_LOGIC;
    m_axi_data34_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_DATA_WIDTH-1 downto 0);
    m_axi_data34_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_DATA_WIDTH/8-1 downto 0);
    m_axi_data34_WLAST : OUT STD_LOGIC;
    m_axi_data34_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_ID_WIDTH-1 downto 0);
    m_axi_data34_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_WUSER_WIDTH-1 downto 0);
    m_axi_data34_ARVALID : OUT STD_LOGIC;
    m_axi_data34_ARREADY : IN STD_LOGIC;
    m_axi_data34_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_ADDR_WIDTH-1 downto 0);
    m_axi_data34_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_ID_WIDTH-1 downto 0);
    m_axi_data34_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data34_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data34_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data34_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data34_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data34_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data34_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data34_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data34_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA34_ARUSER_WIDTH-1 downto 0);
    m_axi_data34_RVALID : IN STD_LOGIC;
    m_axi_data34_RREADY : OUT STD_LOGIC;
    m_axi_data34_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA34_DATA_WIDTH-1 downto 0);
    m_axi_data34_RLAST : IN STD_LOGIC;
    m_axi_data34_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA34_ID_WIDTH-1 downto 0);
    m_axi_data34_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA34_RUSER_WIDTH-1 downto 0);
    m_axi_data34_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data34_BVALID : IN STD_LOGIC;
    m_axi_data34_BREADY : OUT STD_LOGIC;
    m_axi_data34_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data34_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA34_ID_WIDTH-1 downto 0);
    m_axi_data34_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA34_BUSER_WIDTH-1 downto 0);
    m_axi_data17_AWVALID : OUT STD_LOGIC;
    m_axi_data17_AWREADY : IN STD_LOGIC;
    m_axi_data17_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_ADDR_WIDTH-1 downto 0);
    m_axi_data17_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_ID_WIDTH-1 downto 0);
    m_axi_data17_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data17_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data17_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data17_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data17_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data17_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data17_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data17_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data17_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_AWUSER_WIDTH-1 downto 0);
    m_axi_data17_WVALID : OUT STD_LOGIC;
    m_axi_data17_WREADY : IN STD_LOGIC;
    m_axi_data17_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_DATA_WIDTH-1 downto 0);
    m_axi_data17_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_DATA_WIDTH/8-1 downto 0);
    m_axi_data17_WLAST : OUT STD_LOGIC;
    m_axi_data17_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_ID_WIDTH-1 downto 0);
    m_axi_data17_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_WUSER_WIDTH-1 downto 0);
    m_axi_data17_ARVALID : OUT STD_LOGIC;
    m_axi_data17_ARREADY : IN STD_LOGIC;
    m_axi_data17_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_ADDR_WIDTH-1 downto 0);
    m_axi_data17_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_ID_WIDTH-1 downto 0);
    m_axi_data17_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data17_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data17_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data17_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data17_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data17_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data17_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data17_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data17_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA17_ARUSER_WIDTH-1 downto 0);
    m_axi_data17_RVALID : IN STD_LOGIC;
    m_axi_data17_RREADY : OUT STD_LOGIC;
    m_axi_data17_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA17_DATA_WIDTH-1 downto 0);
    m_axi_data17_RLAST : IN STD_LOGIC;
    m_axi_data17_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA17_ID_WIDTH-1 downto 0);
    m_axi_data17_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA17_RUSER_WIDTH-1 downto 0);
    m_axi_data17_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data17_BVALID : IN STD_LOGIC;
    m_axi_data17_BREADY : OUT STD_LOGIC;
    m_axi_data17_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data17_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA17_ID_WIDTH-1 downto 0);
    m_axi_data17_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA17_BUSER_WIDTH-1 downto 0);
    m_axi_data3_AWVALID : OUT STD_LOGIC;
    m_axi_data3_AWREADY : IN STD_LOGIC;
    m_axi_data3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ADDR_WIDTH-1 downto 0);
    m_axi_data3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_AWUSER_WIDTH-1 downto 0);
    m_axi_data3_WVALID : OUT STD_LOGIC;
    m_axi_data3_WREADY : IN STD_LOGIC;
    m_axi_data3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_DATA_WIDTH-1 downto 0);
    m_axi_data3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_DATA_WIDTH/8-1 downto 0);
    m_axi_data3_WLAST : OUT STD_LOGIC;
    m_axi_data3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_WUSER_WIDTH-1 downto 0);
    m_axi_data3_ARVALID : OUT STD_LOGIC;
    m_axi_data3_ARREADY : IN STD_LOGIC;
    m_axi_data3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ADDR_WIDTH-1 downto 0);
    m_axi_data3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA3_ARUSER_WIDTH-1 downto 0);
    m_axi_data3_RVALID : IN STD_LOGIC;
    m_axi_data3_RREADY : OUT STD_LOGIC;
    m_axi_data3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_DATA_WIDTH-1 downto 0);
    m_axi_data3_RLAST : IN STD_LOGIC;
    m_axi_data3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_RUSER_WIDTH-1 downto 0);
    m_axi_data3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_BVALID : IN STD_LOGIC;
    m_axi_data3_BREADY : OUT STD_LOGIC;
    m_axi_data3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_ID_WIDTH-1 downto 0);
    m_axi_data3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA3_BUSER_WIDTH-1 downto 0);
    m_axi_data35_AWVALID : OUT STD_LOGIC;
    m_axi_data35_AWREADY : IN STD_LOGIC;
    m_axi_data35_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_ADDR_WIDTH-1 downto 0);
    m_axi_data35_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_ID_WIDTH-1 downto 0);
    m_axi_data35_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data35_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data35_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data35_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data35_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data35_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data35_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data35_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data35_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_AWUSER_WIDTH-1 downto 0);
    m_axi_data35_WVALID : OUT STD_LOGIC;
    m_axi_data35_WREADY : IN STD_LOGIC;
    m_axi_data35_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_DATA_WIDTH-1 downto 0);
    m_axi_data35_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_DATA_WIDTH/8-1 downto 0);
    m_axi_data35_WLAST : OUT STD_LOGIC;
    m_axi_data35_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_ID_WIDTH-1 downto 0);
    m_axi_data35_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_WUSER_WIDTH-1 downto 0);
    m_axi_data35_ARVALID : OUT STD_LOGIC;
    m_axi_data35_ARREADY : IN STD_LOGIC;
    m_axi_data35_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_ADDR_WIDTH-1 downto 0);
    m_axi_data35_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_ID_WIDTH-1 downto 0);
    m_axi_data35_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data35_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data35_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data35_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data35_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data35_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data35_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data35_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data35_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA35_ARUSER_WIDTH-1 downto 0);
    m_axi_data35_RVALID : IN STD_LOGIC;
    m_axi_data35_RREADY : OUT STD_LOGIC;
    m_axi_data35_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA35_DATA_WIDTH-1 downto 0);
    m_axi_data35_RLAST : IN STD_LOGIC;
    m_axi_data35_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA35_ID_WIDTH-1 downto 0);
    m_axi_data35_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA35_RUSER_WIDTH-1 downto 0);
    m_axi_data35_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data35_BVALID : IN STD_LOGIC;
    m_axi_data35_BREADY : OUT STD_LOGIC;
    m_axi_data35_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data35_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA35_ID_WIDTH-1 downto 0);
    m_axi_data35_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA35_BUSER_WIDTH-1 downto 0);
    m_axi_data36_AWVALID : OUT STD_LOGIC;
    m_axi_data36_AWREADY : IN STD_LOGIC;
    m_axi_data36_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_ADDR_WIDTH-1 downto 0);
    m_axi_data36_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_ID_WIDTH-1 downto 0);
    m_axi_data36_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data36_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data36_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data36_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data36_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data36_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data36_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data36_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data36_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_AWUSER_WIDTH-1 downto 0);
    m_axi_data36_WVALID : OUT STD_LOGIC;
    m_axi_data36_WREADY : IN STD_LOGIC;
    m_axi_data36_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_DATA_WIDTH-1 downto 0);
    m_axi_data36_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_DATA_WIDTH/8-1 downto 0);
    m_axi_data36_WLAST : OUT STD_LOGIC;
    m_axi_data36_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_ID_WIDTH-1 downto 0);
    m_axi_data36_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_WUSER_WIDTH-1 downto 0);
    m_axi_data36_ARVALID : OUT STD_LOGIC;
    m_axi_data36_ARREADY : IN STD_LOGIC;
    m_axi_data36_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_ADDR_WIDTH-1 downto 0);
    m_axi_data36_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_ID_WIDTH-1 downto 0);
    m_axi_data36_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data36_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data36_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data36_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data36_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data36_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data36_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data36_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data36_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA36_ARUSER_WIDTH-1 downto 0);
    m_axi_data36_RVALID : IN STD_LOGIC;
    m_axi_data36_RREADY : OUT STD_LOGIC;
    m_axi_data36_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA36_DATA_WIDTH-1 downto 0);
    m_axi_data36_RLAST : IN STD_LOGIC;
    m_axi_data36_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA36_ID_WIDTH-1 downto 0);
    m_axi_data36_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA36_RUSER_WIDTH-1 downto 0);
    m_axi_data36_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data36_BVALID : IN STD_LOGIC;
    m_axi_data36_BREADY : OUT STD_LOGIC;
    m_axi_data36_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data36_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA36_ID_WIDTH-1 downto 0);
    m_axi_data36_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA36_BUSER_WIDTH-1 downto 0);
    m_axi_data18_AWVALID : OUT STD_LOGIC;
    m_axi_data18_AWREADY : IN STD_LOGIC;
    m_axi_data18_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_ADDR_WIDTH-1 downto 0);
    m_axi_data18_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_ID_WIDTH-1 downto 0);
    m_axi_data18_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data18_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data18_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data18_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data18_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data18_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data18_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data18_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data18_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_AWUSER_WIDTH-1 downto 0);
    m_axi_data18_WVALID : OUT STD_LOGIC;
    m_axi_data18_WREADY : IN STD_LOGIC;
    m_axi_data18_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_DATA_WIDTH-1 downto 0);
    m_axi_data18_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_DATA_WIDTH/8-1 downto 0);
    m_axi_data18_WLAST : OUT STD_LOGIC;
    m_axi_data18_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_ID_WIDTH-1 downto 0);
    m_axi_data18_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_WUSER_WIDTH-1 downto 0);
    m_axi_data18_ARVALID : OUT STD_LOGIC;
    m_axi_data18_ARREADY : IN STD_LOGIC;
    m_axi_data18_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_ADDR_WIDTH-1 downto 0);
    m_axi_data18_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_ID_WIDTH-1 downto 0);
    m_axi_data18_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data18_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data18_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data18_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data18_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data18_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data18_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data18_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data18_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA18_ARUSER_WIDTH-1 downto 0);
    m_axi_data18_RVALID : IN STD_LOGIC;
    m_axi_data18_RREADY : OUT STD_LOGIC;
    m_axi_data18_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA18_DATA_WIDTH-1 downto 0);
    m_axi_data18_RLAST : IN STD_LOGIC;
    m_axi_data18_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA18_ID_WIDTH-1 downto 0);
    m_axi_data18_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA18_RUSER_WIDTH-1 downto 0);
    m_axi_data18_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data18_BVALID : IN STD_LOGIC;
    m_axi_data18_BREADY : OUT STD_LOGIC;
    m_axi_data18_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data18_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA18_ID_WIDTH-1 downto 0);
    m_axi_data18_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA18_BUSER_WIDTH-1 downto 0);
    m_axi_data4_AWVALID : OUT STD_LOGIC;
    m_axi_data4_AWREADY : IN STD_LOGIC;
    m_axi_data4_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ADDR_WIDTH-1 downto 0);
    m_axi_data4_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_AWUSER_WIDTH-1 downto 0);
    m_axi_data4_WVALID : OUT STD_LOGIC;
    m_axi_data4_WREADY : IN STD_LOGIC;
    m_axi_data4_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_DATA_WIDTH-1 downto 0);
    m_axi_data4_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_DATA_WIDTH/8-1 downto 0);
    m_axi_data4_WLAST : OUT STD_LOGIC;
    m_axi_data4_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_WUSER_WIDTH-1 downto 0);
    m_axi_data4_ARVALID : OUT STD_LOGIC;
    m_axi_data4_ARREADY : IN STD_LOGIC;
    m_axi_data4_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ADDR_WIDTH-1 downto 0);
    m_axi_data4_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data4_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA4_ARUSER_WIDTH-1 downto 0);
    m_axi_data4_RVALID : IN STD_LOGIC;
    m_axi_data4_RREADY : OUT STD_LOGIC;
    m_axi_data4_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_DATA_WIDTH-1 downto 0);
    m_axi_data4_RLAST : IN STD_LOGIC;
    m_axi_data4_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_RUSER_WIDTH-1 downto 0);
    m_axi_data4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_BVALID : IN STD_LOGIC;
    m_axi_data4_BREADY : OUT STD_LOGIC;
    m_axi_data4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data4_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_ID_WIDTH-1 downto 0);
    m_axi_data4_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA4_BUSER_WIDTH-1 downto 0);
    m_axi_data37_AWVALID : OUT STD_LOGIC;
    m_axi_data37_AWREADY : IN STD_LOGIC;
    m_axi_data37_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_ADDR_WIDTH-1 downto 0);
    m_axi_data37_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_ID_WIDTH-1 downto 0);
    m_axi_data37_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data37_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data37_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data37_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data37_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data37_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data37_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data37_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data37_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_AWUSER_WIDTH-1 downto 0);
    m_axi_data37_WVALID : OUT STD_LOGIC;
    m_axi_data37_WREADY : IN STD_LOGIC;
    m_axi_data37_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_DATA_WIDTH-1 downto 0);
    m_axi_data37_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_DATA_WIDTH/8-1 downto 0);
    m_axi_data37_WLAST : OUT STD_LOGIC;
    m_axi_data37_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_ID_WIDTH-1 downto 0);
    m_axi_data37_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_WUSER_WIDTH-1 downto 0);
    m_axi_data37_ARVALID : OUT STD_LOGIC;
    m_axi_data37_ARREADY : IN STD_LOGIC;
    m_axi_data37_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_ADDR_WIDTH-1 downto 0);
    m_axi_data37_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_ID_WIDTH-1 downto 0);
    m_axi_data37_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data37_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data37_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data37_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data37_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data37_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data37_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data37_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data37_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA37_ARUSER_WIDTH-1 downto 0);
    m_axi_data37_RVALID : IN STD_LOGIC;
    m_axi_data37_RREADY : OUT STD_LOGIC;
    m_axi_data37_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA37_DATA_WIDTH-1 downto 0);
    m_axi_data37_RLAST : IN STD_LOGIC;
    m_axi_data37_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA37_ID_WIDTH-1 downto 0);
    m_axi_data37_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA37_RUSER_WIDTH-1 downto 0);
    m_axi_data37_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data37_BVALID : IN STD_LOGIC;
    m_axi_data37_BREADY : OUT STD_LOGIC;
    m_axi_data37_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data37_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA37_ID_WIDTH-1 downto 0);
    m_axi_data37_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA37_BUSER_WIDTH-1 downto 0);
    m_axi_data38_AWVALID : OUT STD_LOGIC;
    m_axi_data38_AWREADY : IN STD_LOGIC;
    m_axi_data38_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_ADDR_WIDTH-1 downto 0);
    m_axi_data38_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_ID_WIDTH-1 downto 0);
    m_axi_data38_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data38_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data38_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data38_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data38_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data38_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data38_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data38_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data38_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_AWUSER_WIDTH-1 downto 0);
    m_axi_data38_WVALID : OUT STD_LOGIC;
    m_axi_data38_WREADY : IN STD_LOGIC;
    m_axi_data38_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_DATA_WIDTH-1 downto 0);
    m_axi_data38_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_DATA_WIDTH/8-1 downto 0);
    m_axi_data38_WLAST : OUT STD_LOGIC;
    m_axi_data38_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_ID_WIDTH-1 downto 0);
    m_axi_data38_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_WUSER_WIDTH-1 downto 0);
    m_axi_data38_ARVALID : OUT STD_LOGIC;
    m_axi_data38_ARREADY : IN STD_LOGIC;
    m_axi_data38_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_ADDR_WIDTH-1 downto 0);
    m_axi_data38_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_ID_WIDTH-1 downto 0);
    m_axi_data38_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data38_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data38_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data38_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data38_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data38_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data38_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data38_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data38_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA38_ARUSER_WIDTH-1 downto 0);
    m_axi_data38_RVALID : IN STD_LOGIC;
    m_axi_data38_RREADY : OUT STD_LOGIC;
    m_axi_data38_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA38_DATA_WIDTH-1 downto 0);
    m_axi_data38_RLAST : IN STD_LOGIC;
    m_axi_data38_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA38_ID_WIDTH-1 downto 0);
    m_axi_data38_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA38_RUSER_WIDTH-1 downto 0);
    m_axi_data38_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data38_BVALID : IN STD_LOGIC;
    m_axi_data38_BREADY : OUT STD_LOGIC;
    m_axi_data38_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data38_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA38_ID_WIDTH-1 downto 0);
    m_axi_data38_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA38_BUSER_WIDTH-1 downto 0);
    m_axi_data19_AWVALID : OUT STD_LOGIC;
    m_axi_data19_AWREADY : IN STD_LOGIC;
    m_axi_data19_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_ADDR_WIDTH-1 downto 0);
    m_axi_data19_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_ID_WIDTH-1 downto 0);
    m_axi_data19_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data19_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data19_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data19_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data19_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data19_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data19_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data19_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data19_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_AWUSER_WIDTH-1 downto 0);
    m_axi_data19_WVALID : OUT STD_LOGIC;
    m_axi_data19_WREADY : IN STD_LOGIC;
    m_axi_data19_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_DATA_WIDTH-1 downto 0);
    m_axi_data19_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_DATA_WIDTH/8-1 downto 0);
    m_axi_data19_WLAST : OUT STD_LOGIC;
    m_axi_data19_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_ID_WIDTH-1 downto 0);
    m_axi_data19_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_WUSER_WIDTH-1 downto 0);
    m_axi_data19_ARVALID : OUT STD_LOGIC;
    m_axi_data19_ARREADY : IN STD_LOGIC;
    m_axi_data19_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_ADDR_WIDTH-1 downto 0);
    m_axi_data19_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_ID_WIDTH-1 downto 0);
    m_axi_data19_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data19_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data19_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data19_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data19_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data19_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data19_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data19_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data19_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA19_ARUSER_WIDTH-1 downto 0);
    m_axi_data19_RVALID : IN STD_LOGIC;
    m_axi_data19_RREADY : OUT STD_LOGIC;
    m_axi_data19_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA19_DATA_WIDTH-1 downto 0);
    m_axi_data19_RLAST : IN STD_LOGIC;
    m_axi_data19_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA19_ID_WIDTH-1 downto 0);
    m_axi_data19_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA19_RUSER_WIDTH-1 downto 0);
    m_axi_data19_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data19_BVALID : IN STD_LOGIC;
    m_axi_data19_BREADY : OUT STD_LOGIC;
    m_axi_data19_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data19_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA19_ID_WIDTH-1 downto 0);
    m_axi_data19_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA19_BUSER_WIDTH-1 downto 0);
    m_axi_data5_AWVALID : OUT STD_LOGIC;
    m_axi_data5_AWREADY : IN STD_LOGIC;
    m_axi_data5_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_ADDR_WIDTH-1 downto 0);
    m_axi_data5_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_ID_WIDTH-1 downto 0);
    m_axi_data5_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data5_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data5_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data5_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data5_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data5_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data5_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data5_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data5_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_AWUSER_WIDTH-1 downto 0);
    m_axi_data5_WVALID : OUT STD_LOGIC;
    m_axi_data5_WREADY : IN STD_LOGIC;
    m_axi_data5_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_DATA_WIDTH-1 downto 0);
    m_axi_data5_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_DATA_WIDTH/8-1 downto 0);
    m_axi_data5_WLAST : OUT STD_LOGIC;
    m_axi_data5_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_ID_WIDTH-1 downto 0);
    m_axi_data5_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_WUSER_WIDTH-1 downto 0);
    m_axi_data5_ARVALID : OUT STD_LOGIC;
    m_axi_data5_ARREADY : IN STD_LOGIC;
    m_axi_data5_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_ADDR_WIDTH-1 downto 0);
    m_axi_data5_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_ID_WIDTH-1 downto 0);
    m_axi_data5_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data5_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data5_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data5_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data5_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data5_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data5_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data5_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data5_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA5_ARUSER_WIDTH-1 downto 0);
    m_axi_data5_RVALID : IN STD_LOGIC;
    m_axi_data5_RREADY : OUT STD_LOGIC;
    m_axi_data5_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA5_DATA_WIDTH-1 downto 0);
    m_axi_data5_RLAST : IN STD_LOGIC;
    m_axi_data5_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA5_ID_WIDTH-1 downto 0);
    m_axi_data5_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA5_RUSER_WIDTH-1 downto 0);
    m_axi_data5_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data5_BVALID : IN STD_LOGIC;
    m_axi_data5_BREADY : OUT STD_LOGIC;
    m_axi_data5_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data5_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA5_ID_WIDTH-1 downto 0);
    m_axi_data5_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA5_BUSER_WIDTH-1 downto 0);
    m_axi_data39_AWVALID : OUT STD_LOGIC;
    m_axi_data39_AWREADY : IN STD_LOGIC;
    m_axi_data39_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_ADDR_WIDTH-1 downto 0);
    m_axi_data39_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_ID_WIDTH-1 downto 0);
    m_axi_data39_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data39_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data39_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data39_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data39_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data39_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data39_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data39_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data39_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_AWUSER_WIDTH-1 downto 0);
    m_axi_data39_WVALID : OUT STD_LOGIC;
    m_axi_data39_WREADY : IN STD_LOGIC;
    m_axi_data39_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_DATA_WIDTH-1 downto 0);
    m_axi_data39_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_DATA_WIDTH/8-1 downto 0);
    m_axi_data39_WLAST : OUT STD_LOGIC;
    m_axi_data39_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_ID_WIDTH-1 downto 0);
    m_axi_data39_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_WUSER_WIDTH-1 downto 0);
    m_axi_data39_ARVALID : OUT STD_LOGIC;
    m_axi_data39_ARREADY : IN STD_LOGIC;
    m_axi_data39_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_ADDR_WIDTH-1 downto 0);
    m_axi_data39_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_ID_WIDTH-1 downto 0);
    m_axi_data39_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data39_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data39_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data39_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data39_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data39_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data39_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data39_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data39_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA39_ARUSER_WIDTH-1 downto 0);
    m_axi_data39_RVALID : IN STD_LOGIC;
    m_axi_data39_RREADY : OUT STD_LOGIC;
    m_axi_data39_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA39_DATA_WIDTH-1 downto 0);
    m_axi_data39_RLAST : IN STD_LOGIC;
    m_axi_data39_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA39_ID_WIDTH-1 downto 0);
    m_axi_data39_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA39_RUSER_WIDTH-1 downto 0);
    m_axi_data39_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data39_BVALID : IN STD_LOGIC;
    m_axi_data39_BREADY : OUT STD_LOGIC;
    m_axi_data39_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data39_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA39_ID_WIDTH-1 downto 0);
    m_axi_data39_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA39_BUSER_WIDTH-1 downto 0);
    m_axi_data40_AWVALID : OUT STD_LOGIC;
    m_axi_data40_AWREADY : IN STD_LOGIC;
    m_axi_data40_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_ADDR_WIDTH-1 downto 0);
    m_axi_data40_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_ID_WIDTH-1 downto 0);
    m_axi_data40_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data40_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data40_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data40_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data40_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data40_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data40_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data40_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data40_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_AWUSER_WIDTH-1 downto 0);
    m_axi_data40_WVALID : OUT STD_LOGIC;
    m_axi_data40_WREADY : IN STD_LOGIC;
    m_axi_data40_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_DATA_WIDTH-1 downto 0);
    m_axi_data40_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_DATA_WIDTH/8-1 downto 0);
    m_axi_data40_WLAST : OUT STD_LOGIC;
    m_axi_data40_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_ID_WIDTH-1 downto 0);
    m_axi_data40_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_WUSER_WIDTH-1 downto 0);
    m_axi_data40_ARVALID : OUT STD_LOGIC;
    m_axi_data40_ARREADY : IN STD_LOGIC;
    m_axi_data40_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_ADDR_WIDTH-1 downto 0);
    m_axi_data40_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_ID_WIDTH-1 downto 0);
    m_axi_data40_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data40_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data40_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data40_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data40_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data40_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data40_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data40_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data40_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA40_ARUSER_WIDTH-1 downto 0);
    m_axi_data40_RVALID : IN STD_LOGIC;
    m_axi_data40_RREADY : OUT STD_LOGIC;
    m_axi_data40_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA40_DATA_WIDTH-1 downto 0);
    m_axi_data40_RLAST : IN STD_LOGIC;
    m_axi_data40_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA40_ID_WIDTH-1 downto 0);
    m_axi_data40_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA40_RUSER_WIDTH-1 downto 0);
    m_axi_data40_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data40_BVALID : IN STD_LOGIC;
    m_axi_data40_BREADY : OUT STD_LOGIC;
    m_axi_data40_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data40_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA40_ID_WIDTH-1 downto 0);
    m_axi_data40_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA40_BUSER_WIDTH-1 downto 0);
    m_axi_data20_AWVALID : OUT STD_LOGIC;
    m_axi_data20_AWREADY : IN STD_LOGIC;
    m_axi_data20_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_ADDR_WIDTH-1 downto 0);
    m_axi_data20_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_ID_WIDTH-1 downto 0);
    m_axi_data20_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data20_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data20_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data20_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data20_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data20_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data20_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data20_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data20_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_AWUSER_WIDTH-1 downto 0);
    m_axi_data20_WVALID : OUT STD_LOGIC;
    m_axi_data20_WREADY : IN STD_LOGIC;
    m_axi_data20_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_DATA_WIDTH-1 downto 0);
    m_axi_data20_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_DATA_WIDTH/8-1 downto 0);
    m_axi_data20_WLAST : OUT STD_LOGIC;
    m_axi_data20_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_ID_WIDTH-1 downto 0);
    m_axi_data20_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_WUSER_WIDTH-1 downto 0);
    m_axi_data20_ARVALID : OUT STD_LOGIC;
    m_axi_data20_ARREADY : IN STD_LOGIC;
    m_axi_data20_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_ADDR_WIDTH-1 downto 0);
    m_axi_data20_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_ID_WIDTH-1 downto 0);
    m_axi_data20_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data20_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data20_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data20_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data20_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data20_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data20_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data20_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data20_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA20_ARUSER_WIDTH-1 downto 0);
    m_axi_data20_RVALID : IN STD_LOGIC;
    m_axi_data20_RREADY : OUT STD_LOGIC;
    m_axi_data20_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA20_DATA_WIDTH-1 downto 0);
    m_axi_data20_RLAST : IN STD_LOGIC;
    m_axi_data20_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA20_ID_WIDTH-1 downto 0);
    m_axi_data20_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA20_RUSER_WIDTH-1 downto 0);
    m_axi_data20_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data20_BVALID : IN STD_LOGIC;
    m_axi_data20_BREADY : OUT STD_LOGIC;
    m_axi_data20_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data20_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA20_ID_WIDTH-1 downto 0);
    m_axi_data20_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA20_BUSER_WIDTH-1 downto 0);
    m_axi_data6_AWVALID : OUT STD_LOGIC;
    m_axi_data6_AWREADY : IN STD_LOGIC;
    m_axi_data6_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_ADDR_WIDTH-1 downto 0);
    m_axi_data6_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_ID_WIDTH-1 downto 0);
    m_axi_data6_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data6_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data6_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data6_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data6_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data6_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data6_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data6_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data6_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_AWUSER_WIDTH-1 downto 0);
    m_axi_data6_WVALID : OUT STD_LOGIC;
    m_axi_data6_WREADY : IN STD_LOGIC;
    m_axi_data6_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_DATA_WIDTH-1 downto 0);
    m_axi_data6_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_DATA_WIDTH/8-1 downto 0);
    m_axi_data6_WLAST : OUT STD_LOGIC;
    m_axi_data6_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_ID_WIDTH-1 downto 0);
    m_axi_data6_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_WUSER_WIDTH-1 downto 0);
    m_axi_data6_ARVALID : OUT STD_LOGIC;
    m_axi_data6_ARREADY : IN STD_LOGIC;
    m_axi_data6_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_ADDR_WIDTH-1 downto 0);
    m_axi_data6_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_ID_WIDTH-1 downto 0);
    m_axi_data6_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data6_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data6_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data6_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data6_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data6_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data6_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data6_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data6_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA6_ARUSER_WIDTH-1 downto 0);
    m_axi_data6_RVALID : IN STD_LOGIC;
    m_axi_data6_RREADY : OUT STD_LOGIC;
    m_axi_data6_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA6_DATA_WIDTH-1 downto 0);
    m_axi_data6_RLAST : IN STD_LOGIC;
    m_axi_data6_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA6_ID_WIDTH-1 downto 0);
    m_axi_data6_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA6_RUSER_WIDTH-1 downto 0);
    m_axi_data6_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data6_BVALID : IN STD_LOGIC;
    m_axi_data6_BREADY : OUT STD_LOGIC;
    m_axi_data6_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data6_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA6_ID_WIDTH-1 downto 0);
    m_axi_data6_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA6_BUSER_WIDTH-1 downto 0);
    m_axi_data41_AWVALID : OUT STD_LOGIC;
    m_axi_data41_AWREADY : IN STD_LOGIC;
    m_axi_data41_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_ADDR_WIDTH-1 downto 0);
    m_axi_data41_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_ID_WIDTH-1 downto 0);
    m_axi_data41_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data41_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data41_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data41_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data41_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data41_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data41_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data41_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data41_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_AWUSER_WIDTH-1 downto 0);
    m_axi_data41_WVALID : OUT STD_LOGIC;
    m_axi_data41_WREADY : IN STD_LOGIC;
    m_axi_data41_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_DATA_WIDTH-1 downto 0);
    m_axi_data41_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_DATA_WIDTH/8-1 downto 0);
    m_axi_data41_WLAST : OUT STD_LOGIC;
    m_axi_data41_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_ID_WIDTH-1 downto 0);
    m_axi_data41_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_WUSER_WIDTH-1 downto 0);
    m_axi_data41_ARVALID : OUT STD_LOGIC;
    m_axi_data41_ARREADY : IN STD_LOGIC;
    m_axi_data41_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_ADDR_WIDTH-1 downto 0);
    m_axi_data41_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_ID_WIDTH-1 downto 0);
    m_axi_data41_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data41_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data41_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data41_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data41_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data41_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data41_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data41_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data41_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA41_ARUSER_WIDTH-1 downto 0);
    m_axi_data41_RVALID : IN STD_LOGIC;
    m_axi_data41_RREADY : OUT STD_LOGIC;
    m_axi_data41_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA41_DATA_WIDTH-1 downto 0);
    m_axi_data41_RLAST : IN STD_LOGIC;
    m_axi_data41_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA41_ID_WIDTH-1 downto 0);
    m_axi_data41_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA41_RUSER_WIDTH-1 downto 0);
    m_axi_data41_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data41_BVALID : IN STD_LOGIC;
    m_axi_data41_BREADY : OUT STD_LOGIC;
    m_axi_data41_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data41_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA41_ID_WIDTH-1 downto 0);
    m_axi_data41_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA41_BUSER_WIDTH-1 downto 0);
    m_axi_data42_AWVALID : OUT STD_LOGIC;
    m_axi_data42_AWREADY : IN STD_LOGIC;
    m_axi_data42_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_ADDR_WIDTH-1 downto 0);
    m_axi_data42_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_ID_WIDTH-1 downto 0);
    m_axi_data42_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data42_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data42_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data42_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data42_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data42_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data42_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data42_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data42_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_AWUSER_WIDTH-1 downto 0);
    m_axi_data42_WVALID : OUT STD_LOGIC;
    m_axi_data42_WREADY : IN STD_LOGIC;
    m_axi_data42_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_DATA_WIDTH-1 downto 0);
    m_axi_data42_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_DATA_WIDTH/8-1 downto 0);
    m_axi_data42_WLAST : OUT STD_LOGIC;
    m_axi_data42_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_ID_WIDTH-1 downto 0);
    m_axi_data42_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_WUSER_WIDTH-1 downto 0);
    m_axi_data42_ARVALID : OUT STD_LOGIC;
    m_axi_data42_ARREADY : IN STD_LOGIC;
    m_axi_data42_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_ADDR_WIDTH-1 downto 0);
    m_axi_data42_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_ID_WIDTH-1 downto 0);
    m_axi_data42_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data42_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data42_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data42_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data42_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data42_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data42_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data42_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data42_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA42_ARUSER_WIDTH-1 downto 0);
    m_axi_data42_RVALID : IN STD_LOGIC;
    m_axi_data42_RREADY : OUT STD_LOGIC;
    m_axi_data42_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA42_DATA_WIDTH-1 downto 0);
    m_axi_data42_RLAST : IN STD_LOGIC;
    m_axi_data42_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA42_ID_WIDTH-1 downto 0);
    m_axi_data42_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA42_RUSER_WIDTH-1 downto 0);
    m_axi_data42_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data42_BVALID : IN STD_LOGIC;
    m_axi_data42_BREADY : OUT STD_LOGIC;
    m_axi_data42_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data42_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA42_ID_WIDTH-1 downto 0);
    m_axi_data42_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA42_BUSER_WIDTH-1 downto 0);
    m_axi_data21_AWVALID : OUT STD_LOGIC;
    m_axi_data21_AWREADY : IN STD_LOGIC;
    m_axi_data21_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_ADDR_WIDTH-1 downto 0);
    m_axi_data21_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_ID_WIDTH-1 downto 0);
    m_axi_data21_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data21_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data21_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data21_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data21_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data21_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data21_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data21_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data21_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_AWUSER_WIDTH-1 downto 0);
    m_axi_data21_WVALID : OUT STD_LOGIC;
    m_axi_data21_WREADY : IN STD_LOGIC;
    m_axi_data21_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_DATA_WIDTH-1 downto 0);
    m_axi_data21_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_DATA_WIDTH/8-1 downto 0);
    m_axi_data21_WLAST : OUT STD_LOGIC;
    m_axi_data21_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_ID_WIDTH-1 downto 0);
    m_axi_data21_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_WUSER_WIDTH-1 downto 0);
    m_axi_data21_ARVALID : OUT STD_LOGIC;
    m_axi_data21_ARREADY : IN STD_LOGIC;
    m_axi_data21_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_ADDR_WIDTH-1 downto 0);
    m_axi_data21_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_ID_WIDTH-1 downto 0);
    m_axi_data21_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data21_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data21_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data21_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data21_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data21_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data21_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data21_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data21_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA21_ARUSER_WIDTH-1 downto 0);
    m_axi_data21_RVALID : IN STD_LOGIC;
    m_axi_data21_RREADY : OUT STD_LOGIC;
    m_axi_data21_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA21_DATA_WIDTH-1 downto 0);
    m_axi_data21_RLAST : IN STD_LOGIC;
    m_axi_data21_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA21_ID_WIDTH-1 downto 0);
    m_axi_data21_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA21_RUSER_WIDTH-1 downto 0);
    m_axi_data21_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data21_BVALID : IN STD_LOGIC;
    m_axi_data21_BREADY : OUT STD_LOGIC;
    m_axi_data21_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data21_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA21_ID_WIDTH-1 downto 0);
    m_axi_data21_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA21_BUSER_WIDTH-1 downto 0);
    m_axi_data7_AWVALID : OUT STD_LOGIC;
    m_axi_data7_AWREADY : IN STD_LOGIC;
    m_axi_data7_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_ADDR_WIDTH-1 downto 0);
    m_axi_data7_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_ID_WIDTH-1 downto 0);
    m_axi_data7_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data7_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data7_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data7_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data7_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data7_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data7_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data7_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data7_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_AWUSER_WIDTH-1 downto 0);
    m_axi_data7_WVALID : OUT STD_LOGIC;
    m_axi_data7_WREADY : IN STD_LOGIC;
    m_axi_data7_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_DATA_WIDTH-1 downto 0);
    m_axi_data7_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_DATA_WIDTH/8-1 downto 0);
    m_axi_data7_WLAST : OUT STD_LOGIC;
    m_axi_data7_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_ID_WIDTH-1 downto 0);
    m_axi_data7_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_WUSER_WIDTH-1 downto 0);
    m_axi_data7_ARVALID : OUT STD_LOGIC;
    m_axi_data7_ARREADY : IN STD_LOGIC;
    m_axi_data7_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_ADDR_WIDTH-1 downto 0);
    m_axi_data7_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_ID_WIDTH-1 downto 0);
    m_axi_data7_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data7_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data7_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data7_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data7_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data7_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data7_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data7_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data7_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA7_ARUSER_WIDTH-1 downto 0);
    m_axi_data7_RVALID : IN STD_LOGIC;
    m_axi_data7_RREADY : OUT STD_LOGIC;
    m_axi_data7_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA7_DATA_WIDTH-1 downto 0);
    m_axi_data7_RLAST : IN STD_LOGIC;
    m_axi_data7_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA7_ID_WIDTH-1 downto 0);
    m_axi_data7_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA7_RUSER_WIDTH-1 downto 0);
    m_axi_data7_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data7_BVALID : IN STD_LOGIC;
    m_axi_data7_BREADY : OUT STD_LOGIC;
    m_axi_data7_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data7_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA7_ID_WIDTH-1 downto 0);
    m_axi_data7_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA7_BUSER_WIDTH-1 downto 0);
    m_axi_data43_AWVALID : OUT STD_LOGIC;
    m_axi_data43_AWREADY : IN STD_LOGIC;
    m_axi_data43_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_ADDR_WIDTH-1 downto 0);
    m_axi_data43_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_ID_WIDTH-1 downto 0);
    m_axi_data43_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data43_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data43_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data43_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data43_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data43_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data43_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data43_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data43_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_AWUSER_WIDTH-1 downto 0);
    m_axi_data43_WVALID : OUT STD_LOGIC;
    m_axi_data43_WREADY : IN STD_LOGIC;
    m_axi_data43_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_DATA_WIDTH-1 downto 0);
    m_axi_data43_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_DATA_WIDTH/8-1 downto 0);
    m_axi_data43_WLAST : OUT STD_LOGIC;
    m_axi_data43_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_ID_WIDTH-1 downto 0);
    m_axi_data43_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_WUSER_WIDTH-1 downto 0);
    m_axi_data43_ARVALID : OUT STD_LOGIC;
    m_axi_data43_ARREADY : IN STD_LOGIC;
    m_axi_data43_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_ADDR_WIDTH-1 downto 0);
    m_axi_data43_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_ID_WIDTH-1 downto 0);
    m_axi_data43_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data43_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data43_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data43_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data43_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data43_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data43_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data43_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data43_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA43_ARUSER_WIDTH-1 downto 0);
    m_axi_data43_RVALID : IN STD_LOGIC;
    m_axi_data43_RREADY : OUT STD_LOGIC;
    m_axi_data43_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA43_DATA_WIDTH-1 downto 0);
    m_axi_data43_RLAST : IN STD_LOGIC;
    m_axi_data43_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA43_ID_WIDTH-1 downto 0);
    m_axi_data43_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA43_RUSER_WIDTH-1 downto 0);
    m_axi_data43_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data43_BVALID : IN STD_LOGIC;
    m_axi_data43_BREADY : OUT STD_LOGIC;
    m_axi_data43_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data43_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA43_ID_WIDTH-1 downto 0);
    m_axi_data43_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA43_BUSER_WIDTH-1 downto 0);
    m_axi_data44_AWVALID : OUT STD_LOGIC;
    m_axi_data44_AWREADY : IN STD_LOGIC;
    m_axi_data44_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_ADDR_WIDTH-1 downto 0);
    m_axi_data44_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_ID_WIDTH-1 downto 0);
    m_axi_data44_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data44_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data44_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data44_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data44_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data44_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data44_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data44_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data44_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_AWUSER_WIDTH-1 downto 0);
    m_axi_data44_WVALID : OUT STD_LOGIC;
    m_axi_data44_WREADY : IN STD_LOGIC;
    m_axi_data44_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_DATA_WIDTH-1 downto 0);
    m_axi_data44_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_DATA_WIDTH/8-1 downto 0);
    m_axi_data44_WLAST : OUT STD_LOGIC;
    m_axi_data44_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_ID_WIDTH-1 downto 0);
    m_axi_data44_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_WUSER_WIDTH-1 downto 0);
    m_axi_data44_ARVALID : OUT STD_LOGIC;
    m_axi_data44_ARREADY : IN STD_LOGIC;
    m_axi_data44_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_ADDR_WIDTH-1 downto 0);
    m_axi_data44_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_ID_WIDTH-1 downto 0);
    m_axi_data44_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data44_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data44_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data44_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data44_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data44_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data44_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data44_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data44_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA44_ARUSER_WIDTH-1 downto 0);
    m_axi_data44_RVALID : IN STD_LOGIC;
    m_axi_data44_RREADY : OUT STD_LOGIC;
    m_axi_data44_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA44_DATA_WIDTH-1 downto 0);
    m_axi_data44_RLAST : IN STD_LOGIC;
    m_axi_data44_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA44_ID_WIDTH-1 downto 0);
    m_axi_data44_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA44_RUSER_WIDTH-1 downto 0);
    m_axi_data44_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data44_BVALID : IN STD_LOGIC;
    m_axi_data44_BREADY : OUT STD_LOGIC;
    m_axi_data44_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data44_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA44_ID_WIDTH-1 downto 0);
    m_axi_data44_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA44_BUSER_WIDTH-1 downto 0);
    m_axi_data22_AWVALID : OUT STD_LOGIC;
    m_axi_data22_AWREADY : IN STD_LOGIC;
    m_axi_data22_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_ADDR_WIDTH-1 downto 0);
    m_axi_data22_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_ID_WIDTH-1 downto 0);
    m_axi_data22_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data22_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data22_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data22_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data22_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data22_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data22_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data22_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data22_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_AWUSER_WIDTH-1 downto 0);
    m_axi_data22_WVALID : OUT STD_LOGIC;
    m_axi_data22_WREADY : IN STD_LOGIC;
    m_axi_data22_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_DATA_WIDTH-1 downto 0);
    m_axi_data22_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_DATA_WIDTH/8-1 downto 0);
    m_axi_data22_WLAST : OUT STD_LOGIC;
    m_axi_data22_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_ID_WIDTH-1 downto 0);
    m_axi_data22_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_WUSER_WIDTH-1 downto 0);
    m_axi_data22_ARVALID : OUT STD_LOGIC;
    m_axi_data22_ARREADY : IN STD_LOGIC;
    m_axi_data22_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_ADDR_WIDTH-1 downto 0);
    m_axi_data22_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_ID_WIDTH-1 downto 0);
    m_axi_data22_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data22_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data22_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data22_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data22_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data22_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data22_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data22_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data22_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA22_ARUSER_WIDTH-1 downto 0);
    m_axi_data22_RVALID : IN STD_LOGIC;
    m_axi_data22_RREADY : OUT STD_LOGIC;
    m_axi_data22_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA22_DATA_WIDTH-1 downto 0);
    m_axi_data22_RLAST : IN STD_LOGIC;
    m_axi_data22_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA22_ID_WIDTH-1 downto 0);
    m_axi_data22_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA22_RUSER_WIDTH-1 downto 0);
    m_axi_data22_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data22_BVALID : IN STD_LOGIC;
    m_axi_data22_BREADY : OUT STD_LOGIC;
    m_axi_data22_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data22_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA22_ID_WIDTH-1 downto 0);
    m_axi_data22_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA22_BUSER_WIDTH-1 downto 0);
    m_axi_data8_AWVALID : OUT STD_LOGIC;
    m_axi_data8_AWREADY : IN STD_LOGIC;
    m_axi_data8_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_ADDR_WIDTH-1 downto 0);
    m_axi_data8_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_ID_WIDTH-1 downto 0);
    m_axi_data8_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data8_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data8_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data8_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data8_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data8_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data8_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data8_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data8_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_AWUSER_WIDTH-1 downto 0);
    m_axi_data8_WVALID : OUT STD_LOGIC;
    m_axi_data8_WREADY : IN STD_LOGIC;
    m_axi_data8_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_DATA_WIDTH-1 downto 0);
    m_axi_data8_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_DATA_WIDTH/8-1 downto 0);
    m_axi_data8_WLAST : OUT STD_LOGIC;
    m_axi_data8_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_ID_WIDTH-1 downto 0);
    m_axi_data8_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_WUSER_WIDTH-1 downto 0);
    m_axi_data8_ARVALID : OUT STD_LOGIC;
    m_axi_data8_ARREADY : IN STD_LOGIC;
    m_axi_data8_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_ADDR_WIDTH-1 downto 0);
    m_axi_data8_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_ID_WIDTH-1 downto 0);
    m_axi_data8_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data8_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data8_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data8_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data8_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data8_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data8_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data8_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data8_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA8_ARUSER_WIDTH-1 downto 0);
    m_axi_data8_RVALID : IN STD_LOGIC;
    m_axi_data8_RREADY : OUT STD_LOGIC;
    m_axi_data8_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA8_DATA_WIDTH-1 downto 0);
    m_axi_data8_RLAST : IN STD_LOGIC;
    m_axi_data8_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA8_ID_WIDTH-1 downto 0);
    m_axi_data8_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA8_RUSER_WIDTH-1 downto 0);
    m_axi_data8_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data8_BVALID : IN STD_LOGIC;
    m_axi_data8_BREADY : OUT STD_LOGIC;
    m_axi_data8_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data8_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA8_ID_WIDTH-1 downto 0);
    m_axi_data8_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA8_BUSER_WIDTH-1 downto 0);
    m_axi_data45_AWVALID : OUT STD_LOGIC;
    m_axi_data45_AWREADY : IN STD_LOGIC;
    m_axi_data45_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_ADDR_WIDTH-1 downto 0);
    m_axi_data45_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_ID_WIDTH-1 downto 0);
    m_axi_data45_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data45_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data45_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data45_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data45_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data45_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data45_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data45_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data45_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_AWUSER_WIDTH-1 downto 0);
    m_axi_data45_WVALID : OUT STD_LOGIC;
    m_axi_data45_WREADY : IN STD_LOGIC;
    m_axi_data45_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_DATA_WIDTH-1 downto 0);
    m_axi_data45_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_DATA_WIDTH/8-1 downto 0);
    m_axi_data45_WLAST : OUT STD_LOGIC;
    m_axi_data45_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_ID_WIDTH-1 downto 0);
    m_axi_data45_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_WUSER_WIDTH-1 downto 0);
    m_axi_data45_ARVALID : OUT STD_LOGIC;
    m_axi_data45_ARREADY : IN STD_LOGIC;
    m_axi_data45_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_ADDR_WIDTH-1 downto 0);
    m_axi_data45_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_ID_WIDTH-1 downto 0);
    m_axi_data45_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data45_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data45_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data45_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data45_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data45_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data45_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data45_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data45_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA45_ARUSER_WIDTH-1 downto 0);
    m_axi_data45_RVALID : IN STD_LOGIC;
    m_axi_data45_RREADY : OUT STD_LOGIC;
    m_axi_data45_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA45_DATA_WIDTH-1 downto 0);
    m_axi_data45_RLAST : IN STD_LOGIC;
    m_axi_data45_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA45_ID_WIDTH-1 downto 0);
    m_axi_data45_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA45_RUSER_WIDTH-1 downto 0);
    m_axi_data45_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data45_BVALID : IN STD_LOGIC;
    m_axi_data45_BREADY : OUT STD_LOGIC;
    m_axi_data45_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data45_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA45_ID_WIDTH-1 downto 0);
    m_axi_data45_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA45_BUSER_WIDTH-1 downto 0);
    m_axi_data46_AWVALID : OUT STD_LOGIC;
    m_axi_data46_AWREADY : IN STD_LOGIC;
    m_axi_data46_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_ADDR_WIDTH-1 downto 0);
    m_axi_data46_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_ID_WIDTH-1 downto 0);
    m_axi_data46_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data46_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data46_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data46_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data46_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data46_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data46_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data46_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data46_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_AWUSER_WIDTH-1 downto 0);
    m_axi_data46_WVALID : OUT STD_LOGIC;
    m_axi_data46_WREADY : IN STD_LOGIC;
    m_axi_data46_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_DATA_WIDTH-1 downto 0);
    m_axi_data46_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_DATA_WIDTH/8-1 downto 0);
    m_axi_data46_WLAST : OUT STD_LOGIC;
    m_axi_data46_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_ID_WIDTH-1 downto 0);
    m_axi_data46_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_WUSER_WIDTH-1 downto 0);
    m_axi_data46_ARVALID : OUT STD_LOGIC;
    m_axi_data46_ARREADY : IN STD_LOGIC;
    m_axi_data46_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_ADDR_WIDTH-1 downto 0);
    m_axi_data46_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_ID_WIDTH-1 downto 0);
    m_axi_data46_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data46_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data46_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data46_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data46_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data46_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data46_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data46_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data46_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA46_ARUSER_WIDTH-1 downto 0);
    m_axi_data46_RVALID : IN STD_LOGIC;
    m_axi_data46_RREADY : OUT STD_LOGIC;
    m_axi_data46_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA46_DATA_WIDTH-1 downto 0);
    m_axi_data46_RLAST : IN STD_LOGIC;
    m_axi_data46_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA46_ID_WIDTH-1 downto 0);
    m_axi_data46_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA46_RUSER_WIDTH-1 downto 0);
    m_axi_data46_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data46_BVALID : IN STD_LOGIC;
    m_axi_data46_BREADY : OUT STD_LOGIC;
    m_axi_data46_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data46_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA46_ID_WIDTH-1 downto 0);
    m_axi_data46_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA46_BUSER_WIDTH-1 downto 0);
    m_axi_data23_AWVALID : OUT STD_LOGIC;
    m_axi_data23_AWREADY : IN STD_LOGIC;
    m_axi_data23_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_ADDR_WIDTH-1 downto 0);
    m_axi_data23_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_ID_WIDTH-1 downto 0);
    m_axi_data23_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data23_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data23_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data23_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data23_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data23_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data23_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data23_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data23_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_AWUSER_WIDTH-1 downto 0);
    m_axi_data23_WVALID : OUT STD_LOGIC;
    m_axi_data23_WREADY : IN STD_LOGIC;
    m_axi_data23_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_DATA_WIDTH-1 downto 0);
    m_axi_data23_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_DATA_WIDTH/8-1 downto 0);
    m_axi_data23_WLAST : OUT STD_LOGIC;
    m_axi_data23_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_ID_WIDTH-1 downto 0);
    m_axi_data23_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_WUSER_WIDTH-1 downto 0);
    m_axi_data23_ARVALID : OUT STD_LOGIC;
    m_axi_data23_ARREADY : IN STD_LOGIC;
    m_axi_data23_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_ADDR_WIDTH-1 downto 0);
    m_axi_data23_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_ID_WIDTH-1 downto 0);
    m_axi_data23_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data23_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data23_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data23_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data23_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data23_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data23_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data23_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data23_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA23_ARUSER_WIDTH-1 downto 0);
    m_axi_data23_RVALID : IN STD_LOGIC;
    m_axi_data23_RREADY : OUT STD_LOGIC;
    m_axi_data23_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA23_DATA_WIDTH-1 downto 0);
    m_axi_data23_RLAST : IN STD_LOGIC;
    m_axi_data23_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA23_ID_WIDTH-1 downto 0);
    m_axi_data23_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA23_RUSER_WIDTH-1 downto 0);
    m_axi_data23_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data23_BVALID : IN STD_LOGIC;
    m_axi_data23_BREADY : OUT STD_LOGIC;
    m_axi_data23_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data23_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA23_ID_WIDTH-1 downto 0);
    m_axi_data23_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA23_BUSER_WIDTH-1 downto 0);
    m_axi_data9_AWVALID : OUT STD_LOGIC;
    m_axi_data9_AWREADY : IN STD_LOGIC;
    m_axi_data9_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_ADDR_WIDTH-1 downto 0);
    m_axi_data9_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_ID_WIDTH-1 downto 0);
    m_axi_data9_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data9_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data9_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data9_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data9_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data9_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data9_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data9_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data9_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_AWUSER_WIDTH-1 downto 0);
    m_axi_data9_WVALID : OUT STD_LOGIC;
    m_axi_data9_WREADY : IN STD_LOGIC;
    m_axi_data9_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_DATA_WIDTH-1 downto 0);
    m_axi_data9_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_DATA_WIDTH/8-1 downto 0);
    m_axi_data9_WLAST : OUT STD_LOGIC;
    m_axi_data9_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_ID_WIDTH-1 downto 0);
    m_axi_data9_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_WUSER_WIDTH-1 downto 0);
    m_axi_data9_ARVALID : OUT STD_LOGIC;
    m_axi_data9_ARREADY : IN STD_LOGIC;
    m_axi_data9_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_ADDR_WIDTH-1 downto 0);
    m_axi_data9_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_ID_WIDTH-1 downto 0);
    m_axi_data9_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data9_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data9_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data9_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data9_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data9_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data9_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data9_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data9_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA9_ARUSER_WIDTH-1 downto 0);
    m_axi_data9_RVALID : IN STD_LOGIC;
    m_axi_data9_RREADY : OUT STD_LOGIC;
    m_axi_data9_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA9_DATA_WIDTH-1 downto 0);
    m_axi_data9_RLAST : IN STD_LOGIC;
    m_axi_data9_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA9_ID_WIDTH-1 downto 0);
    m_axi_data9_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA9_RUSER_WIDTH-1 downto 0);
    m_axi_data9_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data9_BVALID : IN STD_LOGIC;
    m_axi_data9_BREADY : OUT STD_LOGIC;
    m_axi_data9_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data9_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA9_ID_WIDTH-1 downto 0);
    m_axi_data9_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA9_BUSER_WIDTH-1 downto 0);
    m_axi_data47_AWVALID : OUT STD_LOGIC;
    m_axi_data47_AWREADY : IN STD_LOGIC;
    m_axi_data47_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_ADDR_WIDTH-1 downto 0);
    m_axi_data47_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_ID_WIDTH-1 downto 0);
    m_axi_data47_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data47_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data47_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data47_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data47_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data47_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data47_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data47_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data47_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_AWUSER_WIDTH-1 downto 0);
    m_axi_data47_WVALID : OUT STD_LOGIC;
    m_axi_data47_WREADY : IN STD_LOGIC;
    m_axi_data47_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_DATA_WIDTH-1 downto 0);
    m_axi_data47_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_DATA_WIDTH/8-1 downto 0);
    m_axi_data47_WLAST : OUT STD_LOGIC;
    m_axi_data47_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_ID_WIDTH-1 downto 0);
    m_axi_data47_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_WUSER_WIDTH-1 downto 0);
    m_axi_data47_ARVALID : OUT STD_LOGIC;
    m_axi_data47_ARREADY : IN STD_LOGIC;
    m_axi_data47_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_ADDR_WIDTH-1 downto 0);
    m_axi_data47_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_ID_WIDTH-1 downto 0);
    m_axi_data47_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data47_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data47_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data47_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data47_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data47_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data47_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data47_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data47_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA47_ARUSER_WIDTH-1 downto 0);
    m_axi_data47_RVALID : IN STD_LOGIC;
    m_axi_data47_RREADY : OUT STD_LOGIC;
    m_axi_data47_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA47_DATA_WIDTH-1 downto 0);
    m_axi_data47_RLAST : IN STD_LOGIC;
    m_axi_data47_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA47_ID_WIDTH-1 downto 0);
    m_axi_data47_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA47_RUSER_WIDTH-1 downto 0);
    m_axi_data47_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data47_BVALID : IN STD_LOGIC;
    m_axi_data47_BREADY : OUT STD_LOGIC;
    m_axi_data47_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data47_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA47_ID_WIDTH-1 downto 0);
    m_axi_data47_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA47_BUSER_WIDTH-1 downto 0);
    m_axi_data48_AWVALID : OUT STD_LOGIC;
    m_axi_data48_AWREADY : IN STD_LOGIC;
    m_axi_data48_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_ADDR_WIDTH-1 downto 0);
    m_axi_data48_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_ID_WIDTH-1 downto 0);
    m_axi_data48_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data48_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data48_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data48_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data48_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data48_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data48_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data48_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data48_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_AWUSER_WIDTH-1 downto 0);
    m_axi_data48_WVALID : OUT STD_LOGIC;
    m_axi_data48_WREADY : IN STD_LOGIC;
    m_axi_data48_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_DATA_WIDTH-1 downto 0);
    m_axi_data48_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_DATA_WIDTH/8-1 downto 0);
    m_axi_data48_WLAST : OUT STD_LOGIC;
    m_axi_data48_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_ID_WIDTH-1 downto 0);
    m_axi_data48_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_WUSER_WIDTH-1 downto 0);
    m_axi_data48_ARVALID : OUT STD_LOGIC;
    m_axi_data48_ARREADY : IN STD_LOGIC;
    m_axi_data48_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_ADDR_WIDTH-1 downto 0);
    m_axi_data48_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_ID_WIDTH-1 downto 0);
    m_axi_data48_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data48_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data48_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data48_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data48_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data48_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data48_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data48_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data48_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA48_ARUSER_WIDTH-1 downto 0);
    m_axi_data48_RVALID : IN STD_LOGIC;
    m_axi_data48_RREADY : OUT STD_LOGIC;
    m_axi_data48_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA48_DATA_WIDTH-1 downto 0);
    m_axi_data48_RLAST : IN STD_LOGIC;
    m_axi_data48_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA48_ID_WIDTH-1 downto 0);
    m_axi_data48_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA48_RUSER_WIDTH-1 downto 0);
    m_axi_data48_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data48_BVALID : IN STD_LOGIC;
    m_axi_data48_BREADY : OUT STD_LOGIC;
    m_axi_data48_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data48_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA48_ID_WIDTH-1 downto 0);
    m_axi_data48_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA48_BUSER_WIDTH-1 downto 0);
    m_axi_data24_AWVALID : OUT STD_LOGIC;
    m_axi_data24_AWREADY : IN STD_LOGIC;
    m_axi_data24_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_ADDR_WIDTH-1 downto 0);
    m_axi_data24_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_ID_WIDTH-1 downto 0);
    m_axi_data24_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data24_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data24_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data24_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data24_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data24_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data24_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data24_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data24_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_AWUSER_WIDTH-1 downto 0);
    m_axi_data24_WVALID : OUT STD_LOGIC;
    m_axi_data24_WREADY : IN STD_LOGIC;
    m_axi_data24_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_DATA_WIDTH-1 downto 0);
    m_axi_data24_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_DATA_WIDTH/8-1 downto 0);
    m_axi_data24_WLAST : OUT STD_LOGIC;
    m_axi_data24_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_ID_WIDTH-1 downto 0);
    m_axi_data24_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_WUSER_WIDTH-1 downto 0);
    m_axi_data24_ARVALID : OUT STD_LOGIC;
    m_axi_data24_ARREADY : IN STD_LOGIC;
    m_axi_data24_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_ADDR_WIDTH-1 downto 0);
    m_axi_data24_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_ID_WIDTH-1 downto 0);
    m_axi_data24_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data24_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data24_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data24_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data24_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data24_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data24_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data24_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data24_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA24_ARUSER_WIDTH-1 downto 0);
    m_axi_data24_RVALID : IN STD_LOGIC;
    m_axi_data24_RREADY : OUT STD_LOGIC;
    m_axi_data24_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA24_DATA_WIDTH-1 downto 0);
    m_axi_data24_RLAST : IN STD_LOGIC;
    m_axi_data24_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA24_ID_WIDTH-1 downto 0);
    m_axi_data24_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA24_RUSER_WIDTH-1 downto 0);
    m_axi_data24_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data24_BVALID : IN STD_LOGIC;
    m_axi_data24_BREADY : OUT STD_LOGIC;
    m_axi_data24_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data24_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA24_ID_WIDTH-1 downto 0);
    m_axi_data24_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA24_BUSER_WIDTH-1 downto 0);
    m_axi_data10_AWVALID : OUT STD_LOGIC;
    m_axi_data10_AWREADY : IN STD_LOGIC;
    m_axi_data10_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_ADDR_WIDTH-1 downto 0);
    m_axi_data10_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_ID_WIDTH-1 downto 0);
    m_axi_data10_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data10_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data10_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data10_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data10_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data10_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data10_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data10_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data10_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_AWUSER_WIDTH-1 downto 0);
    m_axi_data10_WVALID : OUT STD_LOGIC;
    m_axi_data10_WREADY : IN STD_LOGIC;
    m_axi_data10_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_DATA_WIDTH-1 downto 0);
    m_axi_data10_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_DATA_WIDTH/8-1 downto 0);
    m_axi_data10_WLAST : OUT STD_LOGIC;
    m_axi_data10_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_ID_WIDTH-1 downto 0);
    m_axi_data10_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_WUSER_WIDTH-1 downto 0);
    m_axi_data10_ARVALID : OUT STD_LOGIC;
    m_axi_data10_ARREADY : IN STD_LOGIC;
    m_axi_data10_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_ADDR_WIDTH-1 downto 0);
    m_axi_data10_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_ID_WIDTH-1 downto 0);
    m_axi_data10_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data10_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data10_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data10_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data10_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data10_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data10_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data10_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data10_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA10_ARUSER_WIDTH-1 downto 0);
    m_axi_data10_RVALID : IN STD_LOGIC;
    m_axi_data10_RREADY : OUT STD_LOGIC;
    m_axi_data10_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA10_DATA_WIDTH-1 downto 0);
    m_axi_data10_RLAST : IN STD_LOGIC;
    m_axi_data10_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA10_ID_WIDTH-1 downto 0);
    m_axi_data10_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA10_RUSER_WIDTH-1 downto 0);
    m_axi_data10_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data10_BVALID : IN STD_LOGIC;
    m_axi_data10_BREADY : OUT STD_LOGIC;
    m_axi_data10_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data10_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA10_ID_WIDTH-1 downto 0);
    m_axi_data10_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA10_BUSER_WIDTH-1 downto 0);
    m_axi_data49_AWVALID : OUT STD_LOGIC;
    m_axi_data49_AWREADY : IN STD_LOGIC;
    m_axi_data49_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_ADDR_WIDTH-1 downto 0);
    m_axi_data49_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_ID_WIDTH-1 downto 0);
    m_axi_data49_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data49_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data49_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data49_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data49_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data49_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data49_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data49_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data49_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_AWUSER_WIDTH-1 downto 0);
    m_axi_data49_WVALID : OUT STD_LOGIC;
    m_axi_data49_WREADY : IN STD_LOGIC;
    m_axi_data49_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_DATA_WIDTH-1 downto 0);
    m_axi_data49_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_DATA_WIDTH/8-1 downto 0);
    m_axi_data49_WLAST : OUT STD_LOGIC;
    m_axi_data49_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_ID_WIDTH-1 downto 0);
    m_axi_data49_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_WUSER_WIDTH-1 downto 0);
    m_axi_data49_ARVALID : OUT STD_LOGIC;
    m_axi_data49_ARREADY : IN STD_LOGIC;
    m_axi_data49_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_ADDR_WIDTH-1 downto 0);
    m_axi_data49_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_ID_WIDTH-1 downto 0);
    m_axi_data49_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data49_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data49_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data49_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data49_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data49_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data49_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data49_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data49_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA49_ARUSER_WIDTH-1 downto 0);
    m_axi_data49_RVALID : IN STD_LOGIC;
    m_axi_data49_RREADY : OUT STD_LOGIC;
    m_axi_data49_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA49_DATA_WIDTH-1 downto 0);
    m_axi_data49_RLAST : IN STD_LOGIC;
    m_axi_data49_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA49_ID_WIDTH-1 downto 0);
    m_axi_data49_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA49_RUSER_WIDTH-1 downto 0);
    m_axi_data49_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data49_BVALID : IN STD_LOGIC;
    m_axi_data49_BREADY : OUT STD_LOGIC;
    m_axi_data49_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data49_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA49_ID_WIDTH-1 downto 0);
    m_axi_data49_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA49_BUSER_WIDTH-1 downto 0);
    m_axi_data50_AWVALID : OUT STD_LOGIC;
    m_axi_data50_AWREADY : IN STD_LOGIC;
    m_axi_data50_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_ADDR_WIDTH-1 downto 0);
    m_axi_data50_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_ID_WIDTH-1 downto 0);
    m_axi_data50_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data50_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data50_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data50_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data50_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data50_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data50_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data50_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data50_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_AWUSER_WIDTH-1 downto 0);
    m_axi_data50_WVALID : OUT STD_LOGIC;
    m_axi_data50_WREADY : IN STD_LOGIC;
    m_axi_data50_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_DATA_WIDTH-1 downto 0);
    m_axi_data50_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_DATA_WIDTH/8-1 downto 0);
    m_axi_data50_WLAST : OUT STD_LOGIC;
    m_axi_data50_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_ID_WIDTH-1 downto 0);
    m_axi_data50_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_WUSER_WIDTH-1 downto 0);
    m_axi_data50_ARVALID : OUT STD_LOGIC;
    m_axi_data50_ARREADY : IN STD_LOGIC;
    m_axi_data50_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_ADDR_WIDTH-1 downto 0);
    m_axi_data50_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_ID_WIDTH-1 downto 0);
    m_axi_data50_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data50_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data50_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data50_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data50_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data50_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data50_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data50_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data50_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA50_ARUSER_WIDTH-1 downto 0);
    m_axi_data50_RVALID : IN STD_LOGIC;
    m_axi_data50_RREADY : OUT STD_LOGIC;
    m_axi_data50_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA50_DATA_WIDTH-1 downto 0);
    m_axi_data50_RLAST : IN STD_LOGIC;
    m_axi_data50_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA50_ID_WIDTH-1 downto 0);
    m_axi_data50_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA50_RUSER_WIDTH-1 downto 0);
    m_axi_data50_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data50_BVALID : IN STD_LOGIC;
    m_axi_data50_BREADY : OUT STD_LOGIC;
    m_axi_data50_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data50_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA50_ID_WIDTH-1 downto 0);
    m_axi_data50_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA50_BUSER_WIDTH-1 downto 0);
    m_axi_data25_AWVALID : OUT STD_LOGIC;
    m_axi_data25_AWREADY : IN STD_LOGIC;
    m_axi_data25_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_ADDR_WIDTH-1 downto 0);
    m_axi_data25_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_ID_WIDTH-1 downto 0);
    m_axi_data25_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data25_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data25_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data25_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data25_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data25_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data25_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data25_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data25_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_AWUSER_WIDTH-1 downto 0);
    m_axi_data25_WVALID : OUT STD_LOGIC;
    m_axi_data25_WREADY : IN STD_LOGIC;
    m_axi_data25_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_DATA_WIDTH-1 downto 0);
    m_axi_data25_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_DATA_WIDTH/8-1 downto 0);
    m_axi_data25_WLAST : OUT STD_LOGIC;
    m_axi_data25_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_ID_WIDTH-1 downto 0);
    m_axi_data25_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_WUSER_WIDTH-1 downto 0);
    m_axi_data25_ARVALID : OUT STD_LOGIC;
    m_axi_data25_ARREADY : IN STD_LOGIC;
    m_axi_data25_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_ADDR_WIDTH-1 downto 0);
    m_axi_data25_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_ID_WIDTH-1 downto 0);
    m_axi_data25_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data25_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data25_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data25_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data25_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data25_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data25_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data25_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data25_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA25_ARUSER_WIDTH-1 downto 0);
    m_axi_data25_RVALID : IN STD_LOGIC;
    m_axi_data25_RREADY : OUT STD_LOGIC;
    m_axi_data25_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA25_DATA_WIDTH-1 downto 0);
    m_axi_data25_RLAST : IN STD_LOGIC;
    m_axi_data25_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA25_ID_WIDTH-1 downto 0);
    m_axi_data25_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA25_RUSER_WIDTH-1 downto 0);
    m_axi_data25_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data25_BVALID : IN STD_LOGIC;
    m_axi_data25_BREADY : OUT STD_LOGIC;
    m_axi_data25_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data25_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA25_ID_WIDTH-1 downto 0);
    m_axi_data25_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA25_BUSER_WIDTH-1 downto 0);
    m_axi_data11_AWVALID : OUT STD_LOGIC;
    m_axi_data11_AWREADY : IN STD_LOGIC;
    m_axi_data11_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_ADDR_WIDTH-1 downto 0);
    m_axi_data11_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_ID_WIDTH-1 downto 0);
    m_axi_data11_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data11_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data11_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data11_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data11_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data11_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data11_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data11_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data11_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_AWUSER_WIDTH-1 downto 0);
    m_axi_data11_WVALID : OUT STD_LOGIC;
    m_axi_data11_WREADY : IN STD_LOGIC;
    m_axi_data11_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_DATA_WIDTH-1 downto 0);
    m_axi_data11_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_DATA_WIDTH/8-1 downto 0);
    m_axi_data11_WLAST : OUT STD_LOGIC;
    m_axi_data11_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_ID_WIDTH-1 downto 0);
    m_axi_data11_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_WUSER_WIDTH-1 downto 0);
    m_axi_data11_ARVALID : OUT STD_LOGIC;
    m_axi_data11_ARREADY : IN STD_LOGIC;
    m_axi_data11_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_ADDR_WIDTH-1 downto 0);
    m_axi_data11_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_ID_WIDTH-1 downto 0);
    m_axi_data11_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data11_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data11_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data11_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data11_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data11_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data11_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data11_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data11_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA11_ARUSER_WIDTH-1 downto 0);
    m_axi_data11_RVALID : IN STD_LOGIC;
    m_axi_data11_RREADY : OUT STD_LOGIC;
    m_axi_data11_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA11_DATA_WIDTH-1 downto 0);
    m_axi_data11_RLAST : IN STD_LOGIC;
    m_axi_data11_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA11_ID_WIDTH-1 downto 0);
    m_axi_data11_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA11_RUSER_WIDTH-1 downto 0);
    m_axi_data11_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data11_BVALID : IN STD_LOGIC;
    m_axi_data11_BREADY : OUT STD_LOGIC;
    m_axi_data11_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data11_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA11_ID_WIDTH-1 downto 0);
    m_axi_data11_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA11_BUSER_WIDTH-1 downto 0);
    m_axi_data51_AWVALID : OUT STD_LOGIC;
    m_axi_data51_AWREADY : IN STD_LOGIC;
    m_axi_data51_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_ADDR_WIDTH-1 downto 0);
    m_axi_data51_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_ID_WIDTH-1 downto 0);
    m_axi_data51_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data51_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data51_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data51_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data51_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data51_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data51_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data51_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data51_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_AWUSER_WIDTH-1 downto 0);
    m_axi_data51_WVALID : OUT STD_LOGIC;
    m_axi_data51_WREADY : IN STD_LOGIC;
    m_axi_data51_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_DATA_WIDTH-1 downto 0);
    m_axi_data51_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_DATA_WIDTH/8-1 downto 0);
    m_axi_data51_WLAST : OUT STD_LOGIC;
    m_axi_data51_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_ID_WIDTH-1 downto 0);
    m_axi_data51_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_WUSER_WIDTH-1 downto 0);
    m_axi_data51_ARVALID : OUT STD_LOGIC;
    m_axi_data51_ARREADY : IN STD_LOGIC;
    m_axi_data51_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_ADDR_WIDTH-1 downto 0);
    m_axi_data51_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_ID_WIDTH-1 downto 0);
    m_axi_data51_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data51_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data51_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data51_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data51_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data51_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data51_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data51_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data51_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA51_ARUSER_WIDTH-1 downto 0);
    m_axi_data51_RVALID : IN STD_LOGIC;
    m_axi_data51_RREADY : OUT STD_LOGIC;
    m_axi_data51_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA51_DATA_WIDTH-1 downto 0);
    m_axi_data51_RLAST : IN STD_LOGIC;
    m_axi_data51_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA51_ID_WIDTH-1 downto 0);
    m_axi_data51_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA51_RUSER_WIDTH-1 downto 0);
    m_axi_data51_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data51_BVALID : IN STD_LOGIC;
    m_axi_data51_BREADY : OUT STD_LOGIC;
    m_axi_data51_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data51_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA51_ID_WIDTH-1 downto 0);
    m_axi_data51_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA51_BUSER_WIDTH-1 downto 0);
    m_axi_data52_AWVALID : OUT STD_LOGIC;
    m_axi_data52_AWREADY : IN STD_LOGIC;
    m_axi_data52_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_ADDR_WIDTH-1 downto 0);
    m_axi_data52_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_ID_WIDTH-1 downto 0);
    m_axi_data52_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data52_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data52_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data52_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data52_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data52_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data52_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data52_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data52_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_AWUSER_WIDTH-1 downto 0);
    m_axi_data52_WVALID : OUT STD_LOGIC;
    m_axi_data52_WREADY : IN STD_LOGIC;
    m_axi_data52_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_DATA_WIDTH-1 downto 0);
    m_axi_data52_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_DATA_WIDTH/8-1 downto 0);
    m_axi_data52_WLAST : OUT STD_LOGIC;
    m_axi_data52_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_ID_WIDTH-1 downto 0);
    m_axi_data52_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_WUSER_WIDTH-1 downto 0);
    m_axi_data52_ARVALID : OUT STD_LOGIC;
    m_axi_data52_ARREADY : IN STD_LOGIC;
    m_axi_data52_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_ADDR_WIDTH-1 downto 0);
    m_axi_data52_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_ID_WIDTH-1 downto 0);
    m_axi_data52_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data52_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data52_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data52_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data52_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data52_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data52_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data52_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data52_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA52_ARUSER_WIDTH-1 downto 0);
    m_axi_data52_RVALID : IN STD_LOGIC;
    m_axi_data52_RREADY : OUT STD_LOGIC;
    m_axi_data52_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA52_DATA_WIDTH-1 downto 0);
    m_axi_data52_RLAST : IN STD_LOGIC;
    m_axi_data52_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA52_ID_WIDTH-1 downto 0);
    m_axi_data52_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA52_RUSER_WIDTH-1 downto 0);
    m_axi_data52_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data52_BVALID : IN STD_LOGIC;
    m_axi_data52_BREADY : OUT STD_LOGIC;
    m_axi_data52_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data52_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA52_ID_WIDTH-1 downto 0);
    m_axi_data52_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA52_BUSER_WIDTH-1 downto 0);
    m_axi_data26_AWVALID : OUT STD_LOGIC;
    m_axi_data26_AWREADY : IN STD_LOGIC;
    m_axi_data26_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_ADDR_WIDTH-1 downto 0);
    m_axi_data26_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_ID_WIDTH-1 downto 0);
    m_axi_data26_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data26_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data26_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data26_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data26_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data26_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data26_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data26_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data26_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_AWUSER_WIDTH-1 downto 0);
    m_axi_data26_WVALID : OUT STD_LOGIC;
    m_axi_data26_WREADY : IN STD_LOGIC;
    m_axi_data26_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_DATA_WIDTH-1 downto 0);
    m_axi_data26_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_DATA_WIDTH/8-1 downto 0);
    m_axi_data26_WLAST : OUT STD_LOGIC;
    m_axi_data26_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_ID_WIDTH-1 downto 0);
    m_axi_data26_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_WUSER_WIDTH-1 downto 0);
    m_axi_data26_ARVALID : OUT STD_LOGIC;
    m_axi_data26_ARREADY : IN STD_LOGIC;
    m_axi_data26_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_ADDR_WIDTH-1 downto 0);
    m_axi_data26_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_ID_WIDTH-1 downto 0);
    m_axi_data26_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data26_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data26_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data26_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data26_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data26_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data26_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data26_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data26_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA26_ARUSER_WIDTH-1 downto 0);
    m_axi_data26_RVALID : IN STD_LOGIC;
    m_axi_data26_RREADY : OUT STD_LOGIC;
    m_axi_data26_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA26_DATA_WIDTH-1 downto 0);
    m_axi_data26_RLAST : IN STD_LOGIC;
    m_axi_data26_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA26_ID_WIDTH-1 downto 0);
    m_axi_data26_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA26_RUSER_WIDTH-1 downto 0);
    m_axi_data26_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data26_BVALID : IN STD_LOGIC;
    m_axi_data26_BREADY : OUT STD_LOGIC;
    m_axi_data26_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data26_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA26_ID_WIDTH-1 downto 0);
    m_axi_data26_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA26_BUSER_WIDTH-1 downto 0);
    m_axi_data12_AWVALID : OUT STD_LOGIC;
    m_axi_data12_AWREADY : IN STD_LOGIC;
    m_axi_data12_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_ADDR_WIDTH-1 downto 0);
    m_axi_data12_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_ID_WIDTH-1 downto 0);
    m_axi_data12_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data12_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data12_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data12_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data12_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data12_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data12_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data12_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data12_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_AWUSER_WIDTH-1 downto 0);
    m_axi_data12_WVALID : OUT STD_LOGIC;
    m_axi_data12_WREADY : IN STD_LOGIC;
    m_axi_data12_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_DATA_WIDTH-1 downto 0);
    m_axi_data12_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_DATA_WIDTH/8-1 downto 0);
    m_axi_data12_WLAST : OUT STD_LOGIC;
    m_axi_data12_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_ID_WIDTH-1 downto 0);
    m_axi_data12_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_WUSER_WIDTH-1 downto 0);
    m_axi_data12_ARVALID : OUT STD_LOGIC;
    m_axi_data12_ARREADY : IN STD_LOGIC;
    m_axi_data12_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_ADDR_WIDTH-1 downto 0);
    m_axi_data12_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_ID_WIDTH-1 downto 0);
    m_axi_data12_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data12_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data12_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data12_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data12_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data12_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data12_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data12_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data12_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA12_ARUSER_WIDTH-1 downto 0);
    m_axi_data12_RVALID : IN STD_LOGIC;
    m_axi_data12_RREADY : OUT STD_LOGIC;
    m_axi_data12_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA12_DATA_WIDTH-1 downto 0);
    m_axi_data12_RLAST : IN STD_LOGIC;
    m_axi_data12_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA12_ID_WIDTH-1 downto 0);
    m_axi_data12_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA12_RUSER_WIDTH-1 downto 0);
    m_axi_data12_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data12_BVALID : IN STD_LOGIC;
    m_axi_data12_BREADY : OUT STD_LOGIC;
    m_axi_data12_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data12_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA12_ID_WIDTH-1 downto 0);
    m_axi_data12_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA12_BUSER_WIDTH-1 downto 0);
    m_axi_data53_AWVALID : OUT STD_LOGIC;
    m_axi_data53_AWREADY : IN STD_LOGIC;
    m_axi_data53_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_ADDR_WIDTH-1 downto 0);
    m_axi_data53_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_ID_WIDTH-1 downto 0);
    m_axi_data53_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data53_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data53_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data53_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data53_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data53_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data53_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data53_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data53_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_AWUSER_WIDTH-1 downto 0);
    m_axi_data53_WVALID : OUT STD_LOGIC;
    m_axi_data53_WREADY : IN STD_LOGIC;
    m_axi_data53_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_DATA_WIDTH-1 downto 0);
    m_axi_data53_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_DATA_WIDTH/8-1 downto 0);
    m_axi_data53_WLAST : OUT STD_LOGIC;
    m_axi_data53_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_ID_WIDTH-1 downto 0);
    m_axi_data53_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_WUSER_WIDTH-1 downto 0);
    m_axi_data53_ARVALID : OUT STD_LOGIC;
    m_axi_data53_ARREADY : IN STD_LOGIC;
    m_axi_data53_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_ADDR_WIDTH-1 downto 0);
    m_axi_data53_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_ID_WIDTH-1 downto 0);
    m_axi_data53_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data53_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data53_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data53_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data53_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data53_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data53_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data53_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data53_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA53_ARUSER_WIDTH-1 downto 0);
    m_axi_data53_RVALID : IN STD_LOGIC;
    m_axi_data53_RREADY : OUT STD_LOGIC;
    m_axi_data53_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA53_DATA_WIDTH-1 downto 0);
    m_axi_data53_RLAST : IN STD_LOGIC;
    m_axi_data53_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA53_ID_WIDTH-1 downto 0);
    m_axi_data53_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA53_RUSER_WIDTH-1 downto 0);
    m_axi_data53_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data53_BVALID : IN STD_LOGIC;
    m_axi_data53_BREADY : OUT STD_LOGIC;
    m_axi_data53_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data53_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA53_ID_WIDTH-1 downto 0);
    m_axi_data53_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA53_BUSER_WIDTH-1 downto 0);
    m_axi_data54_AWVALID : OUT STD_LOGIC;
    m_axi_data54_AWREADY : IN STD_LOGIC;
    m_axi_data54_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_ADDR_WIDTH-1 downto 0);
    m_axi_data54_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_ID_WIDTH-1 downto 0);
    m_axi_data54_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data54_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data54_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data54_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data54_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data54_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data54_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data54_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data54_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_AWUSER_WIDTH-1 downto 0);
    m_axi_data54_WVALID : OUT STD_LOGIC;
    m_axi_data54_WREADY : IN STD_LOGIC;
    m_axi_data54_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_DATA_WIDTH-1 downto 0);
    m_axi_data54_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_DATA_WIDTH/8-1 downto 0);
    m_axi_data54_WLAST : OUT STD_LOGIC;
    m_axi_data54_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_ID_WIDTH-1 downto 0);
    m_axi_data54_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_WUSER_WIDTH-1 downto 0);
    m_axi_data54_ARVALID : OUT STD_LOGIC;
    m_axi_data54_ARREADY : IN STD_LOGIC;
    m_axi_data54_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_ADDR_WIDTH-1 downto 0);
    m_axi_data54_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_ID_WIDTH-1 downto 0);
    m_axi_data54_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data54_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data54_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data54_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data54_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data54_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data54_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data54_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data54_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA54_ARUSER_WIDTH-1 downto 0);
    m_axi_data54_RVALID : IN STD_LOGIC;
    m_axi_data54_RREADY : OUT STD_LOGIC;
    m_axi_data54_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA54_DATA_WIDTH-1 downto 0);
    m_axi_data54_RLAST : IN STD_LOGIC;
    m_axi_data54_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA54_ID_WIDTH-1 downto 0);
    m_axi_data54_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA54_RUSER_WIDTH-1 downto 0);
    m_axi_data54_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data54_BVALID : IN STD_LOGIC;
    m_axi_data54_BREADY : OUT STD_LOGIC;
    m_axi_data54_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data54_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA54_ID_WIDTH-1 downto 0);
    m_axi_data54_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA54_BUSER_WIDTH-1 downto 0);
    m_axi_data27_AWVALID : OUT STD_LOGIC;
    m_axi_data27_AWREADY : IN STD_LOGIC;
    m_axi_data27_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_ADDR_WIDTH-1 downto 0);
    m_axi_data27_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_ID_WIDTH-1 downto 0);
    m_axi_data27_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data27_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data27_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data27_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data27_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data27_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data27_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data27_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data27_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_AWUSER_WIDTH-1 downto 0);
    m_axi_data27_WVALID : OUT STD_LOGIC;
    m_axi_data27_WREADY : IN STD_LOGIC;
    m_axi_data27_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_DATA_WIDTH-1 downto 0);
    m_axi_data27_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_DATA_WIDTH/8-1 downto 0);
    m_axi_data27_WLAST : OUT STD_LOGIC;
    m_axi_data27_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_ID_WIDTH-1 downto 0);
    m_axi_data27_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_WUSER_WIDTH-1 downto 0);
    m_axi_data27_ARVALID : OUT STD_LOGIC;
    m_axi_data27_ARREADY : IN STD_LOGIC;
    m_axi_data27_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_ADDR_WIDTH-1 downto 0);
    m_axi_data27_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_ID_WIDTH-1 downto 0);
    m_axi_data27_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data27_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data27_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data27_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data27_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data27_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data27_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data27_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data27_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA27_ARUSER_WIDTH-1 downto 0);
    m_axi_data27_RVALID : IN STD_LOGIC;
    m_axi_data27_RREADY : OUT STD_LOGIC;
    m_axi_data27_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA27_DATA_WIDTH-1 downto 0);
    m_axi_data27_RLAST : IN STD_LOGIC;
    m_axi_data27_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA27_ID_WIDTH-1 downto 0);
    m_axi_data27_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA27_RUSER_WIDTH-1 downto 0);
    m_axi_data27_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data27_BVALID : IN STD_LOGIC;
    m_axi_data27_BREADY : OUT STD_LOGIC;
    m_axi_data27_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data27_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA27_ID_WIDTH-1 downto 0);
    m_axi_data27_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA27_BUSER_WIDTH-1 downto 0);
    m_axi_data13_AWVALID : OUT STD_LOGIC;
    m_axi_data13_AWREADY : IN STD_LOGIC;
    m_axi_data13_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_ADDR_WIDTH-1 downto 0);
    m_axi_data13_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_ID_WIDTH-1 downto 0);
    m_axi_data13_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data13_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data13_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data13_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data13_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data13_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data13_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data13_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data13_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_AWUSER_WIDTH-1 downto 0);
    m_axi_data13_WVALID : OUT STD_LOGIC;
    m_axi_data13_WREADY : IN STD_LOGIC;
    m_axi_data13_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_DATA_WIDTH-1 downto 0);
    m_axi_data13_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_DATA_WIDTH/8-1 downto 0);
    m_axi_data13_WLAST : OUT STD_LOGIC;
    m_axi_data13_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_ID_WIDTH-1 downto 0);
    m_axi_data13_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_WUSER_WIDTH-1 downto 0);
    m_axi_data13_ARVALID : OUT STD_LOGIC;
    m_axi_data13_ARREADY : IN STD_LOGIC;
    m_axi_data13_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_ADDR_WIDTH-1 downto 0);
    m_axi_data13_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_ID_WIDTH-1 downto 0);
    m_axi_data13_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data13_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data13_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data13_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data13_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data13_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data13_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data13_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data13_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA13_ARUSER_WIDTH-1 downto 0);
    m_axi_data13_RVALID : IN STD_LOGIC;
    m_axi_data13_RREADY : OUT STD_LOGIC;
    m_axi_data13_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA13_DATA_WIDTH-1 downto 0);
    m_axi_data13_RLAST : IN STD_LOGIC;
    m_axi_data13_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA13_ID_WIDTH-1 downto 0);
    m_axi_data13_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA13_RUSER_WIDTH-1 downto 0);
    m_axi_data13_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data13_BVALID : IN STD_LOGIC;
    m_axi_data13_BREADY : OUT STD_LOGIC;
    m_axi_data13_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data13_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA13_ID_WIDTH-1 downto 0);
    m_axi_data13_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA13_BUSER_WIDTH-1 downto 0);
    m_axi_data55_AWVALID : OUT STD_LOGIC;
    m_axi_data55_AWREADY : IN STD_LOGIC;
    m_axi_data55_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_ADDR_WIDTH-1 downto 0);
    m_axi_data55_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_ID_WIDTH-1 downto 0);
    m_axi_data55_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data55_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data55_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data55_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data55_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data55_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data55_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data55_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data55_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_AWUSER_WIDTH-1 downto 0);
    m_axi_data55_WVALID : OUT STD_LOGIC;
    m_axi_data55_WREADY : IN STD_LOGIC;
    m_axi_data55_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_DATA_WIDTH-1 downto 0);
    m_axi_data55_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_DATA_WIDTH/8-1 downto 0);
    m_axi_data55_WLAST : OUT STD_LOGIC;
    m_axi_data55_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_ID_WIDTH-1 downto 0);
    m_axi_data55_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_WUSER_WIDTH-1 downto 0);
    m_axi_data55_ARVALID : OUT STD_LOGIC;
    m_axi_data55_ARREADY : IN STD_LOGIC;
    m_axi_data55_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_ADDR_WIDTH-1 downto 0);
    m_axi_data55_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_ID_WIDTH-1 downto 0);
    m_axi_data55_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data55_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data55_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data55_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data55_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data55_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data55_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data55_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data55_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA55_ARUSER_WIDTH-1 downto 0);
    m_axi_data55_RVALID : IN STD_LOGIC;
    m_axi_data55_RREADY : OUT STD_LOGIC;
    m_axi_data55_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA55_DATA_WIDTH-1 downto 0);
    m_axi_data55_RLAST : IN STD_LOGIC;
    m_axi_data55_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA55_ID_WIDTH-1 downto 0);
    m_axi_data55_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA55_RUSER_WIDTH-1 downto 0);
    m_axi_data55_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data55_BVALID : IN STD_LOGIC;
    m_axi_data55_BREADY : OUT STD_LOGIC;
    m_axi_data55_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data55_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA55_ID_WIDTH-1 downto 0);
    m_axi_data55_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA55_BUSER_WIDTH-1 downto 0);
    m_axi_data56_AWVALID : OUT STD_LOGIC;
    m_axi_data56_AWREADY : IN STD_LOGIC;
    m_axi_data56_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_ADDR_WIDTH-1 downto 0);
    m_axi_data56_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_ID_WIDTH-1 downto 0);
    m_axi_data56_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data56_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data56_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data56_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data56_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data56_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data56_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data56_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data56_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_AWUSER_WIDTH-1 downto 0);
    m_axi_data56_WVALID : OUT STD_LOGIC;
    m_axi_data56_WREADY : IN STD_LOGIC;
    m_axi_data56_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_DATA_WIDTH-1 downto 0);
    m_axi_data56_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_DATA_WIDTH/8-1 downto 0);
    m_axi_data56_WLAST : OUT STD_LOGIC;
    m_axi_data56_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_ID_WIDTH-1 downto 0);
    m_axi_data56_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_WUSER_WIDTH-1 downto 0);
    m_axi_data56_ARVALID : OUT STD_LOGIC;
    m_axi_data56_ARREADY : IN STD_LOGIC;
    m_axi_data56_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_ADDR_WIDTH-1 downto 0);
    m_axi_data56_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_ID_WIDTH-1 downto 0);
    m_axi_data56_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data56_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data56_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data56_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data56_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data56_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data56_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data56_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data56_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA56_ARUSER_WIDTH-1 downto 0);
    m_axi_data56_RVALID : IN STD_LOGIC;
    m_axi_data56_RREADY : OUT STD_LOGIC;
    m_axi_data56_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA56_DATA_WIDTH-1 downto 0);
    m_axi_data56_RLAST : IN STD_LOGIC;
    m_axi_data56_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA56_ID_WIDTH-1 downto 0);
    m_axi_data56_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA56_RUSER_WIDTH-1 downto 0);
    m_axi_data56_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data56_BVALID : IN STD_LOGIC;
    m_axi_data56_BREADY : OUT STD_LOGIC;
    m_axi_data56_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data56_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA56_ID_WIDTH-1 downto 0);
    m_axi_data56_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA56_BUSER_WIDTH-1 downto 0);
    m_axi_data28_AWVALID : OUT STD_LOGIC;
    m_axi_data28_AWREADY : IN STD_LOGIC;
    m_axi_data28_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_ADDR_WIDTH-1 downto 0);
    m_axi_data28_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_ID_WIDTH-1 downto 0);
    m_axi_data28_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data28_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data28_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data28_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data28_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data28_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data28_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data28_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data28_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_AWUSER_WIDTH-1 downto 0);
    m_axi_data28_WVALID : OUT STD_LOGIC;
    m_axi_data28_WREADY : IN STD_LOGIC;
    m_axi_data28_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_DATA_WIDTH-1 downto 0);
    m_axi_data28_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_DATA_WIDTH/8-1 downto 0);
    m_axi_data28_WLAST : OUT STD_LOGIC;
    m_axi_data28_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_ID_WIDTH-1 downto 0);
    m_axi_data28_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_WUSER_WIDTH-1 downto 0);
    m_axi_data28_ARVALID : OUT STD_LOGIC;
    m_axi_data28_ARREADY : IN STD_LOGIC;
    m_axi_data28_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_ADDR_WIDTH-1 downto 0);
    m_axi_data28_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_ID_WIDTH-1 downto 0);
    m_axi_data28_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data28_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data28_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data28_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data28_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data28_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data28_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data28_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data28_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA28_ARUSER_WIDTH-1 downto 0);
    m_axi_data28_RVALID : IN STD_LOGIC;
    m_axi_data28_RREADY : OUT STD_LOGIC;
    m_axi_data28_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA28_DATA_WIDTH-1 downto 0);
    m_axi_data28_RLAST : IN STD_LOGIC;
    m_axi_data28_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA28_ID_WIDTH-1 downto 0);
    m_axi_data28_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA28_RUSER_WIDTH-1 downto 0);
    m_axi_data28_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data28_BVALID : IN STD_LOGIC;
    m_axi_data28_BREADY : OUT STD_LOGIC;
    m_axi_data28_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data28_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA28_ID_WIDTH-1 downto 0);
    m_axi_data28_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA28_BUSER_WIDTH-1 downto 0);
    m_axi_data14_AWVALID : OUT STD_LOGIC;
    m_axi_data14_AWREADY : IN STD_LOGIC;
    m_axi_data14_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_ADDR_WIDTH-1 downto 0);
    m_axi_data14_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_ID_WIDTH-1 downto 0);
    m_axi_data14_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data14_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data14_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data14_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data14_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data14_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data14_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data14_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data14_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_AWUSER_WIDTH-1 downto 0);
    m_axi_data14_WVALID : OUT STD_LOGIC;
    m_axi_data14_WREADY : IN STD_LOGIC;
    m_axi_data14_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_DATA_WIDTH-1 downto 0);
    m_axi_data14_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_DATA_WIDTH/8-1 downto 0);
    m_axi_data14_WLAST : OUT STD_LOGIC;
    m_axi_data14_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_ID_WIDTH-1 downto 0);
    m_axi_data14_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_WUSER_WIDTH-1 downto 0);
    m_axi_data14_ARVALID : OUT STD_LOGIC;
    m_axi_data14_ARREADY : IN STD_LOGIC;
    m_axi_data14_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_ADDR_WIDTH-1 downto 0);
    m_axi_data14_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_ID_WIDTH-1 downto 0);
    m_axi_data14_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data14_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data14_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data14_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data14_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data14_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data14_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data14_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data14_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA14_ARUSER_WIDTH-1 downto 0);
    m_axi_data14_RVALID : IN STD_LOGIC;
    m_axi_data14_RREADY : OUT STD_LOGIC;
    m_axi_data14_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA14_DATA_WIDTH-1 downto 0);
    m_axi_data14_RLAST : IN STD_LOGIC;
    m_axi_data14_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA14_ID_WIDTH-1 downto 0);
    m_axi_data14_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA14_RUSER_WIDTH-1 downto 0);
    m_axi_data14_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data14_BVALID : IN STD_LOGIC;
    m_axi_data14_BREADY : OUT STD_LOGIC;
    m_axi_data14_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data14_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA14_ID_WIDTH-1 downto 0);
    m_axi_data14_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA14_BUSER_WIDTH-1 downto 0);
    m_axi_data29_AWVALID : OUT STD_LOGIC;
    m_axi_data29_AWREADY : IN STD_LOGIC;
    m_axi_data29_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_ADDR_WIDTH-1 downto 0);
    m_axi_data29_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_ID_WIDTH-1 downto 0);
    m_axi_data29_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data29_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data29_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data29_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data29_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data29_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data29_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data29_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data29_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_AWUSER_WIDTH-1 downto 0);
    m_axi_data29_WVALID : OUT STD_LOGIC;
    m_axi_data29_WREADY : IN STD_LOGIC;
    m_axi_data29_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_DATA_WIDTH-1 downto 0);
    m_axi_data29_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_DATA_WIDTH/8-1 downto 0);
    m_axi_data29_WLAST : OUT STD_LOGIC;
    m_axi_data29_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_ID_WIDTH-1 downto 0);
    m_axi_data29_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_WUSER_WIDTH-1 downto 0);
    m_axi_data29_ARVALID : OUT STD_LOGIC;
    m_axi_data29_ARREADY : IN STD_LOGIC;
    m_axi_data29_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_ADDR_WIDTH-1 downto 0);
    m_axi_data29_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_ID_WIDTH-1 downto 0);
    m_axi_data29_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data29_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data29_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data29_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data29_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data29_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data29_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data29_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data29_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA29_ARUSER_WIDTH-1 downto 0);
    m_axi_data29_RVALID : IN STD_LOGIC;
    m_axi_data29_RREADY : OUT STD_LOGIC;
    m_axi_data29_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA29_DATA_WIDTH-1 downto 0);
    m_axi_data29_RLAST : IN STD_LOGIC;
    m_axi_data29_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA29_ID_WIDTH-1 downto 0);
    m_axi_data29_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA29_RUSER_WIDTH-1 downto 0);
    m_axi_data29_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data29_BVALID : IN STD_LOGIC;
    m_axi_data29_BREADY : OUT STD_LOGIC;
    m_axi_data29_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data29_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA29_ID_WIDTH-1 downto 0);
    m_axi_data29_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA29_BUSER_WIDTH-1 downto 0);
    m_axi_data15_AWVALID : OUT STD_LOGIC;
    m_axi_data15_AWREADY : IN STD_LOGIC;
    m_axi_data15_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_ADDR_WIDTH-1 downto 0);
    m_axi_data15_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_ID_WIDTH-1 downto 0);
    m_axi_data15_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data15_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data15_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data15_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data15_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data15_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data15_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data15_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data15_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_AWUSER_WIDTH-1 downto 0);
    m_axi_data15_WVALID : OUT STD_LOGIC;
    m_axi_data15_WREADY : IN STD_LOGIC;
    m_axi_data15_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_DATA_WIDTH-1 downto 0);
    m_axi_data15_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_DATA_WIDTH/8-1 downto 0);
    m_axi_data15_WLAST : OUT STD_LOGIC;
    m_axi_data15_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_ID_WIDTH-1 downto 0);
    m_axi_data15_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_WUSER_WIDTH-1 downto 0);
    m_axi_data15_ARVALID : OUT STD_LOGIC;
    m_axi_data15_ARREADY : IN STD_LOGIC;
    m_axi_data15_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_ADDR_WIDTH-1 downto 0);
    m_axi_data15_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_ID_WIDTH-1 downto 0);
    m_axi_data15_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data15_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data15_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data15_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data15_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data15_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data15_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data15_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data15_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA15_ARUSER_WIDTH-1 downto 0);
    m_axi_data15_RVALID : IN STD_LOGIC;
    m_axi_data15_RREADY : OUT STD_LOGIC;
    m_axi_data15_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA15_DATA_WIDTH-1 downto 0);
    m_axi_data15_RLAST : IN STD_LOGIC;
    m_axi_data15_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA15_ID_WIDTH-1 downto 0);
    m_axi_data15_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA15_RUSER_WIDTH-1 downto 0);
    m_axi_data15_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data15_BVALID : IN STD_LOGIC;
    m_axi_data15_BREADY : OUT STD_LOGIC;
    m_axi_data15_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data15_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA15_ID_WIDTH-1 downto 0);
    m_axi_data15_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA15_BUSER_WIDTH-1 downto 0);
    m_axi_data57_AWVALID : OUT STD_LOGIC;
    m_axi_data57_AWREADY : IN STD_LOGIC;
    m_axi_data57_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_ADDR_WIDTH-1 downto 0);
    m_axi_data57_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_ID_WIDTH-1 downto 0);
    m_axi_data57_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data57_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data57_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data57_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data57_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data57_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data57_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data57_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data57_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_AWUSER_WIDTH-1 downto 0);
    m_axi_data57_WVALID : OUT STD_LOGIC;
    m_axi_data57_WREADY : IN STD_LOGIC;
    m_axi_data57_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_DATA_WIDTH-1 downto 0);
    m_axi_data57_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_DATA_WIDTH/8-1 downto 0);
    m_axi_data57_WLAST : OUT STD_LOGIC;
    m_axi_data57_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_ID_WIDTH-1 downto 0);
    m_axi_data57_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_WUSER_WIDTH-1 downto 0);
    m_axi_data57_ARVALID : OUT STD_LOGIC;
    m_axi_data57_ARREADY : IN STD_LOGIC;
    m_axi_data57_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_ADDR_WIDTH-1 downto 0);
    m_axi_data57_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_ID_WIDTH-1 downto 0);
    m_axi_data57_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data57_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data57_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data57_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data57_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data57_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data57_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data57_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data57_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA57_ARUSER_WIDTH-1 downto 0);
    m_axi_data57_RVALID : IN STD_LOGIC;
    m_axi_data57_RREADY : OUT STD_LOGIC;
    m_axi_data57_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA57_DATA_WIDTH-1 downto 0);
    m_axi_data57_RLAST : IN STD_LOGIC;
    m_axi_data57_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA57_ID_WIDTH-1 downto 0);
    m_axi_data57_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA57_RUSER_WIDTH-1 downto 0);
    m_axi_data57_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data57_BVALID : IN STD_LOGIC;
    m_axi_data57_BREADY : OUT STD_LOGIC;
    m_axi_data57_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data57_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA57_ID_WIDTH-1 downto 0);
    m_axi_data57_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA57_BUSER_WIDTH-1 downto 0);
    m_axi_data58_AWVALID : OUT STD_LOGIC;
    m_axi_data58_AWREADY : IN STD_LOGIC;
    m_axi_data58_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_ADDR_WIDTH-1 downto 0);
    m_axi_data58_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_ID_WIDTH-1 downto 0);
    m_axi_data58_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data58_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data58_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data58_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data58_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data58_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data58_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data58_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data58_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_AWUSER_WIDTH-1 downto 0);
    m_axi_data58_WVALID : OUT STD_LOGIC;
    m_axi_data58_WREADY : IN STD_LOGIC;
    m_axi_data58_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_DATA_WIDTH-1 downto 0);
    m_axi_data58_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_DATA_WIDTH/8-1 downto 0);
    m_axi_data58_WLAST : OUT STD_LOGIC;
    m_axi_data58_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_ID_WIDTH-1 downto 0);
    m_axi_data58_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_WUSER_WIDTH-1 downto 0);
    m_axi_data58_ARVALID : OUT STD_LOGIC;
    m_axi_data58_ARREADY : IN STD_LOGIC;
    m_axi_data58_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_ADDR_WIDTH-1 downto 0);
    m_axi_data58_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_ID_WIDTH-1 downto 0);
    m_axi_data58_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data58_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data58_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data58_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data58_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data58_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data58_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data58_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data58_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA58_ARUSER_WIDTH-1 downto 0);
    m_axi_data58_RVALID : IN STD_LOGIC;
    m_axi_data58_RREADY : OUT STD_LOGIC;
    m_axi_data58_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA58_DATA_WIDTH-1 downto 0);
    m_axi_data58_RLAST : IN STD_LOGIC;
    m_axi_data58_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA58_ID_WIDTH-1 downto 0);
    m_axi_data58_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA58_RUSER_WIDTH-1 downto 0);
    m_axi_data58_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data58_BVALID : IN STD_LOGIC;
    m_axi_data58_BREADY : OUT STD_LOGIC;
    m_axi_data58_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data58_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA58_ID_WIDTH-1 downto 0);
    m_axi_data58_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA58_BUSER_WIDTH-1 downto 0);
    m_axi_data30_AWVALID : OUT STD_LOGIC;
    m_axi_data30_AWREADY : IN STD_LOGIC;
    m_axi_data30_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_ADDR_WIDTH-1 downto 0);
    m_axi_data30_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_ID_WIDTH-1 downto 0);
    m_axi_data30_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data30_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data30_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data30_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data30_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data30_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data30_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data30_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data30_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_AWUSER_WIDTH-1 downto 0);
    m_axi_data30_WVALID : OUT STD_LOGIC;
    m_axi_data30_WREADY : IN STD_LOGIC;
    m_axi_data30_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_DATA_WIDTH-1 downto 0);
    m_axi_data30_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_DATA_WIDTH/8-1 downto 0);
    m_axi_data30_WLAST : OUT STD_LOGIC;
    m_axi_data30_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_ID_WIDTH-1 downto 0);
    m_axi_data30_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_WUSER_WIDTH-1 downto 0);
    m_axi_data30_ARVALID : OUT STD_LOGIC;
    m_axi_data30_ARREADY : IN STD_LOGIC;
    m_axi_data30_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_ADDR_WIDTH-1 downto 0);
    m_axi_data30_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_ID_WIDTH-1 downto 0);
    m_axi_data30_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data30_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data30_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data30_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data30_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data30_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data30_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data30_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data30_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA30_ARUSER_WIDTH-1 downto 0);
    m_axi_data30_RVALID : IN STD_LOGIC;
    m_axi_data30_RREADY : OUT STD_LOGIC;
    m_axi_data30_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA30_DATA_WIDTH-1 downto 0);
    m_axi_data30_RLAST : IN STD_LOGIC;
    m_axi_data30_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA30_ID_WIDTH-1 downto 0);
    m_axi_data30_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA30_RUSER_WIDTH-1 downto 0);
    m_axi_data30_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data30_BVALID : IN STD_LOGIC;
    m_axi_data30_BREADY : OUT STD_LOGIC;
    m_axi_data30_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data30_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA30_ID_WIDTH-1 downto 0);
    m_axi_data30_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA30_BUSER_WIDTH-1 downto 0);
    inputs1 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights1 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas1 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs1 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs2 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights2 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas2 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs2 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs3 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights3 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas3 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs3 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs4 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights4 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas4 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs4 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs5 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights5 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas5 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs5 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs6 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights6 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas6 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs6 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs7 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights7 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas7 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs7 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs8 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights8 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas8 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs8 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs9 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights9 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas9 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs9 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs10 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights10 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas10 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs10 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs11 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights11 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas11 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs11 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs12 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights12 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas12 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs12 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs13 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights13 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas13 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs13 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs14 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs14 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs15 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights15 : IN STD_LOGIC_VECTOR (31 downto 0);
    betas15 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs15 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of moblie_net is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "moblie_net,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=4.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.048750,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=565,HLS_SYN_DSP=1182,HLS_SYN_FF=208197,HLS_SYN_LUT=205697,HLS_VERSION=2018_3}";
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal data1_AWREADY : STD_LOGIC;
    signal data1_WREADY : STD_LOGIC;
    signal data1_ARREADY : STD_LOGIC;
    signal data1_RVALID : STD_LOGIC;
    signal data1_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data1_RLAST : STD_LOGIC;
    signal data1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data1_BVALID : STD_LOGIC;
    signal data1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal data31_AWREADY : STD_LOGIC;
    signal data31_WREADY : STD_LOGIC;
    signal data31_ARREADY : STD_LOGIC;
    signal data31_RVALID : STD_LOGIC;
    signal data31_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data31_RLAST : STD_LOGIC;
    signal data31_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data31_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data31_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data31_BVALID : STD_LOGIC;
    signal data31_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data31_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data31_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data32_AWREADY : STD_LOGIC;
    signal data32_WREADY : STD_LOGIC;
    signal data32_ARREADY : STD_LOGIC;
    signal data32_RVALID : STD_LOGIC;
    signal data32_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data32_RLAST : STD_LOGIC;
    signal data32_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data32_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data32_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data32_BVALID : STD_LOGIC;
    signal data32_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data32_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data32_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data16_AWREADY : STD_LOGIC;
    signal data16_WREADY : STD_LOGIC;
    signal data16_ARREADY : STD_LOGIC;
    signal data16_RVALID : STD_LOGIC;
    signal data16_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data16_RLAST : STD_LOGIC;
    signal data16_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data16_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data16_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data16_BVALID : STD_LOGIC;
    signal data16_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data16_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data16_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_AWREADY : STD_LOGIC;
    signal data2_WREADY : STD_LOGIC;
    signal data2_ARREADY : STD_LOGIC;
    signal data2_RVALID : STD_LOGIC;
    signal data2_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data2_RLAST : STD_LOGIC;
    signal data2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_BVALID : STD_LOGIC;
    signal data2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data33_AWREADY : STD_LOGIC;
    signal data33_WREADY : STD_LOGIC;
    signal data33_ARREADY : STD_LOGIC;
    signal data33_RVALID : STD_LOGIC;
    signal data33_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data33_RLAST : STD_LOGIC;
    signal data33_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data33_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data33_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data33_BVALID : STD_LOGIC;
    signal data33_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data33_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data33_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data34_AWREADY : STD_LOGIC;
    signal data34_WREADY : STD_LOGIC;
    signal data34_ARREADY : STD_LOGIC;
    signal data34_RVALID : STD_LOGIC;
    signal data34_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data34_RLAST : STD_LOGIC;
    signal data34_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data34_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data34_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data34_BVALID : STD_LOGIC;
    signal data34_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data34_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data34_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data17_AWREADY : STD_LOGIC;
    signal data17_WREADY : STD_LOGIC;
    signal data17_ARREADY : STD_LOGIC;
    signal data17_RVALID : STD_LOGIC;
    signal data17_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data17_RLAST : STD_LOGIC;
    signal data17_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data17_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data17_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data17_BVALID : STD_LOGIC;
    signal data17_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data17_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data17_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_AWREADY : STD_LOGIC;
    signal data3_WREADY : STD_LOGIC;
    signal data3_ARREADY : STD_LOGIC;
    signal data3_RVALID : STD_LOGIC;
    signal data3_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data3_RLAST : STD_LOGIC;
    signal data3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data3_BVALID : STD_LOGIC;
    signal data3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data35_AWREADY : STD_LOGIC;
    signal data35_WREADY : STD_LOGIC;
    signal data35_ARREADY : STD_LOGIC;
    signal data35_RVALID : STD_LOGIC;
    signal data35_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data35_RLAST : STD_LOGIC;
    signal data35_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data35_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data35_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data35_BVALID : STD_LOGIC;
    signal data35_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data35_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data35_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data36_AWREADY : STD_LOGIC;
    signal data36_WREADY : STD_LOGIC;
    signal data36_ARREADY : STD_LOGIC;
    signal data36_RVALID : STD_LOGIC;
    signal data36_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data36_RLAST : STD_LOGIC;
    signal data36_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data36_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data36_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data36_BVALID : STD_LOGIC;
    signal data36_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data36_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data36_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data18_AWREADY : STD_LOGIC;
    signal data18_WREADY : STD_LOGIC;
    signal data18_ARREADY : STD_LOGIC;
    signal data18_RVALID : STD_LOGIC;
    signal data18_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data18_RLAST : STD_LOGIC;
    signal data18_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data18_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data18_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data18_BVALID : STD_LOGIC;
    signal data18_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data18_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data18_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_AWREADY : STD_LOGIC;
    signal data4_WREADY : STD_LOGIC;
    signal data4_ARREADY : STD_LOGIC;
    signal data4_RVALID : STD_LOGIC;
    signal data4_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data4_RLAST : STD_LOGIC;
    signal data4_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data4_BVALID : STD_LOGIC;
    signal data4_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data4_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data4_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data37_AWREADY : STD_LOGIC;
    signal data37_WREADY : STD_LOGIC;
    signal data37_ARREADY : STD_LOGIC;
    signal data37_RVALID : STD_LOGIC;
    signal data37_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data37_RLAST : STD_LOGIC;
    signal data37_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data37_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data37_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data37_BVALID : STD_LOGIC;
    signal data37_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data37_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data37_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data38_AWREADY : STD_LOGIC;
    signal data38_WREADY : STD_LOGIC;
    signal data38_ARREADY : STD_LOGIC;
    signal data38_RVALID : STD_LOGIC;
    signal data38_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data38_RLAST : STD_LOGIC;
    signal data38_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data38_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data38_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data38_BVALID : STD_LOGIC;
    signal data38_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data38_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data38_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data19_AWREADY : STD_LOGIC;
    signal data19_WREADY : STD_LOGIC;
    signal data19_ARREADY : STD_LOGIC;
    signal data19_RVALID : STD_LOGIC;
    signal data19_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data19_RLAST : STD_LOGIC;
    signal data19_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data19_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data19_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data19_BVALID : STD_LOGIC;
    signal data19_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data19_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data19_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data5_AWREADY : STD_LOGIC;
    signal data5_WREADY : STD_LOGIC;
    signal data5_ARREADY : STD_LOGIC;
    signal data5_RVALID : STD_LOGIC;
    signal data5_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data5_RLAST : STD_LOGIC;
    signal data5_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data5_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data5_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data5_BVALID : STD_LOGIC;
    signal data5_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data5_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data5_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data39_AWREADY : STD_LOGIC;
    signal data39_WREADY : STD_LOGIC;
    signal data39_ARREADY : STD_LOGIC;
    signal data39_RVALID : STD_LOGIC;
    signal data39_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data39_RLAST : STD_LOGIC;
    signal data39_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data39_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data39_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data39_BVALID : STD_LOGIC;
    signal data39_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data39_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data39_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data40_AWREADY : STD_LOGIC;
    signal data40_WREADY : STD_LOGIC;
    signal data40_ARREADY : STD_LOGIC;
    signal data40_RVALID : STD_LOGIC;
    signal data40_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data40_RLAST : STD_LOGIC;
    signal data40_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data40_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data40_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data40_BVALID : STD_LOGIC;
    signal data40_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data40_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data40_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data20_AWREADY : STD_LOGIC;
    signal data20_WREADY : STD_LOGIC;
    signal data20_ARREADY : STD_LOGIC;
    signal data20_RVALID : STD_LOGIC;
    signal data20_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data20_RLAST : STD_LOGIC;
    signal data20_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data20_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data20_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data20_BVALID : STD_LOGIC;
    signal data20_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data20_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data20_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data6_AWREADY : STD_LOGIC;
    signal data6_WREADY : STD_LOGIC;
    signal data6_ARREADY : STD_LOGIC;
    signal data6_RVALID : STD_LOGIC;
    signal data6_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data6_RLAST : STD_LOGIC;
    signal data6_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data6_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data6_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data6_BVALID : STD_LOGIC;
    signal data6_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data6_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data6_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data41_AWREADY : STD_LOGIC;
    signal data41_WREADY : STD_LOGIC;
    signal data41_ARREADY : STD_LOGIC;
    signal data41_RVALID : STD_LOGIC;
    signal data41_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data41_RLAST : STD_LOGIC;
    signal data41_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data41_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data41_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data41_BVALID : STD_LOGIC;
    signal data41_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data41_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data41_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data42_AWREADY : STD_LOGIC;
    signal data42_WREADY : STD_LOGIC;
    signal data42_ARREADY : STD_LOGIC;
    signal data42_RVALID : STD_LOGIC;
    signal data42_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data42_RLAST : STD_LOGIC;
    signal data42_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data42_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data42_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data42_BVALID : STD_LOGIC;
    signal data42_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data42_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data42_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data21_AWREADY : STD_LOGIC;
    signal data21_WREADY : STD_LOGIC;
    signal data21_ARREADY : STD_LOGIC;
    signal data21_RVALID : STD_LOGIC;
    signal data21_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data21_RLAST : STD_LOGIC;
    signal data21_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data21_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data21_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data21_BVALID : STD_LOGIC;
    signal data21_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data21_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data21_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data7_AWREADY : STD_LOGIC;
    signal data7_WREADY : STD_LOGIC;
    signal data7_ARREADY : STD_LOGIC;
    signal data7_RVALID : STD_LOGIC;
    signal data7_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data7_RLAST : STD_LOGIC;
    signal data7_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data7_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data7_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data7_BVALID : STD_LOGIC;
    signal data7_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data7_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data7_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data43_AWREADY : STD_LOGIC;
    signal data43_WREADY : STD_LOGIC;
    signal data43_ARREADY : STD_LOGIC;
    signal data43_RVALID : STD_LOGIC;
    signal data43_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data43_RLAST : STD_LOGIC;
    signal data43_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data43_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data43_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data43_BVALID : STD_LOGIC;
    signal data43_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data43_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data43_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data44_AWREADY : STD_LOGIC;
    signal data44_WREADY : STD_LOGIC;
    signal data44_ARREADY : STD_LOGIC;
    signal data44_RVALID : STD_LOGIC;
    signal data44_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data44_RLAST : STD_LOGIC;
    signal data44_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data44_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data44_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data44_BVALID : STD_LOGIC;
    signal data44_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data44_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data44_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data22_AWREADY : STD_LOGIC;
    signal data22_WREADY : STD_LOGIC;
    signal data22_ARREADY : STD_LOGIC;
    signal data22_RVALID : STD_LOGIC;
    signal data22_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data22_RLAST : STD_LOGIC;
    signal data22_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data22_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data22_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data22_BVALID : STD_LOGIC;
    signal data22_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data22_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data22_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data8_AWREADY : STD_LOGIC;
    signal data8_WREADY : STD_LOGIC;
    signal data8_ARREADY : STD_LOGIC;
    signal data8_RVALID : STD_LOGIC;
    signal data8_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data8_RLAST : STD_LOGIC;
    signal data8_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data8_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data8_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data8_BVALID : STD_LOGIC;
    signal data8_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data8_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data8_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data45_AWREADY : STD_LOGIC;
    signal data45_WREADY : STD_LOGIC;
    signal data45_ARREADY : STD_LOGIC;
    signal data45_RVALID : STD_LOGIC;
    signal data45_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data45_RLAST : STD_LOGIC;
    signal data45_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data45_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data45_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data45_BVALID : STD_LOGIC;
    signal data45_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data45_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data45_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data46_AWREADY : STD_LOGIC;
    signal data46_WREADY : STD_LOGIC;
    signal data46_ARREADY : STD_LOGIC;
    signal data46_RVALID : STD_LOGIC;
    signal data46_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data46_RLAST : STD_LOGIC;
    signal data46_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data46_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data46_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data46_BVALID : STD_LOGIC;
    signal data46_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data46_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data46_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data23_AWREADY : STD_LOGIC;
    signal data23_WREADY : STD_LOGIC;
    signal data23_ARREADY : STD_LOGIC;
    signal data23_RVALID : STD_LOGIC;
    signal data23_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data23_RLAST : STD_LOGIC;
    signal data23_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data23_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data23_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data23_BVALID : STD_LOGIC;
    signal data23_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data23_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data23_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data9_AWREADY : STD_LOGIC;
    signal data9_WREADY : STD_LOGIC;
    signal data9_ARREADY : STD_LOGIC;
    signal data9_RVALID : STD_LOGIC;
    signal data9_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data9_RLAST : STD_LOGIC;
    signal data9_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data9_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data9_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data9_BVALID : STD_LOGIC;
    signal data9_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data9_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data9_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data47_AWREADY : STD_LOGIC;
    signal data47_WREADY : STD_LOGIC;
    signal data47_ARREADY : STD_LOGIC;
    signal data47_RVALID : STD_LOGIC;
    signal data47_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data47_RLAST : STD_LOGIC;
    signal data47_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data47_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data47_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data47_BVALID : STD_LOGIC;
    signal data47_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data47_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data47_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data48_AWREADY : STD_LOGIC;
    signal data48_WREADY : STD_LOGIC;
    signal data48_ARREADY : STD_LOGIC;
    signal data48_RVALID : STD_LOGIC;
    signal data48_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data48_RLAST : STD_LOGIC;
    signal data48_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data48_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data48_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data48_BVALID : STD_LOGIC;
    signal data48_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data48_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data48_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data24_AWREADY : STD_LOGIC;
    signal data24_WREADY : STD_LOGIC;
    signal data24_ARREADY : STD_LOGIC;
    signal data24_RVALID : STD_LOGIC;
    signal data24_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data24_RLAST : STD_LOGIC;
    signal data24_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data24_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data24_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data24_BVALID : STD_LOGIC;
    signal data24_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data24_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data24_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data10_AWREADY : STD_LOGIC;
    signal data10_WREADY : STD_LOGIC;
    signal data10_ARREADY : STD_LOGIC;
    signal data10_RVALID : STD_LOGIC;
    signal data10_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data10_RLAST : STD_LOGIC;
    signal data10_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data10_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data10_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data10_BVALID : STD_LOGIC;
    signal data10_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data10_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data10_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data49_AWREADY : STD_LOGIC;
    signal data49_WREADY : STD_LOGIC;
    signal data49_ARREADY : STD_LOGIC;
    signal data49_RVALID : STD_LOGIC;
    signal data49_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data49_RLAST : STD_LOGIC;
    signal data49_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data49_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data49_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data49_BVALID : STD_LOGIC;
    signal data49_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data49_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data49_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data50_AWREADY : STD_LOGIC;
    signal data50_WREADY : STD_LOGIC;
    signal data50_ARREADY : STD_LOGIC;
    signal data50_RVALID : STD_LOGIC;
    signal data50_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data50_RLAST : STD_LOGIC;
    signal data50_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data50_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data50_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data50_BVALID : STD_LOGIC;
    signal data50_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data50_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data50_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data25_AWREADY : STD_LOGIC;
    signal data25_WREADY : STD_LOGIC;
    signal data25_ARREADY : STD_LOGIC;
    signal data25_RVALID : STD_LOGIC;
    signal data25_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data25_RLAST : STD_LOGIC;
    signal data25_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data25_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data25_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data25_BVALID : STD_LOGIC;
    signal data25_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data25_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data25_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data11_AWREADY : STD_LOGIC;
    signal data11_WREADY : STD_LOGIC;
    signal data11_ARREADY : STD_LOGIC;
    signal data11_RVALID : STD_LOGIC;
    signal data11_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data11_RLAST : STD_LOGIC;
    signal data11_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data11_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data11_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data11_BVALID : STD_LOGIC;
    signal data11_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data11_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data11_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data51_AWREADY : STD_LOGIC;
    signal data51_WREADY : STD_LOGIC;
    signal data51_ARREADY : STD_LOGIC;
    signal data51_RVALID : STD_LOGIC;
    signal data51_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data51_RLAST : STD_LOGIC;
    signal data51_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data51_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data51_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data51_BVALID : STD_LOGIC;
    signal data51_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data51_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data51_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data52_AWREADY : STD_LOGIC;
    signal data52_WREADY : STD_LOGIC;
    signal data52_ARREADY : STD_LOGIC;
    signal data52_RVALID : STD_LOGIC;
    signal data52_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data52_RLAST : STD_LOGIC;
    signal data52_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data52_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data52_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data52_BVALID : STD_LOGIC;
    signal data52_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data52_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data52_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data26_AWREADY : STD_LOGIC;
    signal data26_WREADY : STD_LOGIC;
    signal data26_ARREADY : STD_LOGIC;
    signal data26_RVALID : STD_LOGIC;
    signal data26_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data26_RLAST : STD_LOGIC;
    signal data26_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data26_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data26_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data26_BVALID : STD_LOGIC;
    signal data26_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data26_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data26_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data12_AWREADY : STD_LOGIC;
    signal data12_WREADY : STD_LOGIC;
    signal data12_ARREADY : STD_LOGIC;
    signal data12_RVALID : STD_LOGIC;
    signal data12_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data12_RLAST : STD_LOGIC;
    signal data12_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data12_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data12_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data12_BVALID : STD_LOGIC;
    signal data12_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data12_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data12_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data53_AWREADY : STD_LOGIC;
    signal data53_WREADY : STD_LOGIC;
    signal data53_ARREADY : STD_LOGIC;
    signal data53_RVALID : STD_LOGIC;
    signal data53_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data53_RLAST : STD_LOGIC;
    signal data53_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data53_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data53_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data53_BVALID : STD_LOGIC;
    signal data53_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data53_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data53_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data54_AWREADY : STD_LOGIC;
    signal data54_WREADY : STD_LOGIC;
    signal data54_ARREADY : STD_LOGIC;
    signal data54_RVALID : STD_LOGIC;
    signal data54_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data54_RLAST : STD_LOGIC;
    signal data54_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data54_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data54_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data54_BVALID : STD_LOGIC;
    signal data54_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data54_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data54_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data27_AWREADY : STD_LOGIC;
    signal data27_WREADY : STD_LOGIC;
    signal data27_ARREADY : STD_LOGIC;
    signal data27_RVALID : STD_LOGIC;
    signal data27_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data27_RLAST : STD_LOGIC;
    signal data27_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data27_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data27_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data27_BVALID : STD_LOGIC;
    signal data27_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data27_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data27_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data13_AWREADY : STD_LOGIC;
    signal data13_WREADY : STD_LOGIC;
    signal data13_ARREADY : STD_LOGIC;
    signal data13_RVALID : STD_LOGIC;
    signal data13_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data13_RLAST : STD_LOGIC;
    signal data13_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data13_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data13_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data13_BVALID : STD_LOGIC;
    signal data13_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data13_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data13_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data55_AWREADY : STD_LOGIC;
    signal data55_WREADY : STD_LOGIC;
    signal data55_ARREADY : STD_LOGIC;
    signal data55_RVALID : STD_LOGIC;
    signal data55_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data55_RLAST : STD_LOGIC;
    signal data55_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data55_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data55_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data55_BVALID : STD_LOGIC;
    signal data55_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data55_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data55_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data56_AWREADY : STD_LOGIC;
    signal data56_WREADY : STD_LOGIC;
    signal data56_ARREADY : STD_LOGIC;
    signal data56_RVALID : STD_LOGIC;
    signal data56_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data56_RLAST : STD_LOGIC;
    signal data56_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data56_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data56_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data56_BVALID : STD_LOGIC;
    signal data56_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data56_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data56_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data28_AWREADY : STD_LOGIC;
    signal data28_WREADY : STD_LOGIC;
    signal data28_ARREADY : STD_LOGIC;
    signal data28_RVALID : STD_LOGIC;
    signal data28_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data28_RLAST : STD_LOGIC;
    signal data28_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data28_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data28_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data28_BVALID : STD_LOGIC;
    signal data28_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data28_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data28_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data14_AWREADY : STD_LOGIC;
    signal data14_WREADY : STD_LOGIC;
    signal data14_ARREADY : STD_LOGIC;
    signal data14_RVALID : STD_LOGIC;
    signal data14_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data14_RLAST : STD_LOGIC;
    signal data14_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data14_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data14_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data14_BVALID : STD_LOGIC;
    signal data14_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data14_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data14_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data29_AWREADY : STD_LOGIC;
    signal data29_WREADY : STD_LOGIC;
    signal data29_ARREADY : STD_LOGIC;
    signal data29_RVALID : STD_LOGIC;
    signal data29_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data29_RLAST : STD_LOGIC;
    signal data29_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data29_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data29_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data29_BVALID : STD_LOGIC;
    signal data29_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data29_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data29_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data15_AWREADY : STD_LOGIC;
    signal data15_WREADY : STD_LOGIC;
    signal data15_ARREADY : STD_LOGIC;
    signal data15_RVALID : STD_LOGIC;
    signal data15_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data15_RLAST : STD_LOGIC;
    signal data15_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data15_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data15_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data15_BVALID : STD_LOGIC;
    signal data15_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data15_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data15_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data57_AWREADY : STD_LOGIC;
    signal data57_WREADY : STD_LOGIC;
    signal data57_ARREADY : STD_LOGIC;
    signal data57_RVALID : STD_LOGIC;
    signal data57_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data57_RLAST : STD_LOGIC;
    signal data57_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data57_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data57_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data57_BVALID : STD_LOGIC;
    signal data57_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data57_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data57_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data58_AWREADY : STD_LOGIC;
    signal data58_WREADY : STD_LOGIC;
    signal data58_ARREADY : STD_LOGIC;
    signal data58_RVALID : STD_LOGIC;
    signal data58_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data58_RLAST : STD_LOGIC;
    signal data58_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data58_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data58_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data58_BVALID : STD_LOGIC;
    signal data58_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data58_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data58_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data30_AWREADY : STD_LOGIC;
    signal data30_WREADY : STD_LOGIC;
    signal data30_ARREADY : STD_LOGIC;
    signal data30_RVALID : STD_LOGIC;
    signal data30_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal data30_RLAST : STD_LOGIC;
    signal data30_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal data30_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal data30_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data30_BVALID : STD_LOGIC;
    signal data30_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal data30_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal data30_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_ap_start : STD_LOGIC;
    signal first_layer173_U0_ap_done : STD_LOGIC;
    signal first_layer173_U0_ap_continue : STD_LOGIC;
    signal first_layer173_U0_ap_idle : STD_LOGIC;
    signal first_layer173_U0_ap_ready : STD_LOGIC;
    signal first_layer173_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal first_layer173_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal first_layer173_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal first_layer173_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal first_layer173_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal first_layer173_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal first_layer173_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal first_layer173_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal first_layer173_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal first_layer173_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal first_layer173_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal first_layer173_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal first_layer173_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal first_layer173_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal first_layer173_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal first_layer173_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal first_layer173_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal first_layer173_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal first_layer173_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal first_layer173_U0_nxt_ready_V_din : STD_LOGIC;
    signal first_layer173_U0_nxt_ready_V_write : STD_LOGIC;
    signal first_layer173_U0_inputs2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs2_out_write : STD_LOGIC;
    signal first_layer173_U0_weights2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights2_out_write : STD_LOGIC;
    signal first_layer173_U0_betas2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas2_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs2_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs2_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs3_out_write : STD_LOGIC;
    signal first_layer173_U0_weights3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights3_out_write : STD_LOGIC;
    signal first_layer173_U0_betas3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas3_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs3_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs3_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs4_out_write : STD_LOGIC;
    signal first_layer173_U0_weights4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights4_out_write : STD_LOGIC;
    signal first_layer173_U0_betas4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas4_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs4_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs4_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs5_out_write : STD_LOGIC;
    signal first_layer173_U0_weights5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights5_out_write : STD_LOGIC;
    signal first_layer173_U0_betas5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas5_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs5_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs5_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs6_out_write : STD_LOGIC;
    signal first_layer173_U0_weights6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights6_out_write : STD_LOGIC;
    signal first_layer173_U0_betas6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas6_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs6_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs6_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs7_out_write : STD_LOGIC;
    signal first_layer173_U0_weights7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights7_out_write : STD_LOGIC;
    signal first_layer173_U0_betas7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas7_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs7_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs7_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs8_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs8_out_write : STD_LOGIC;
    signal first_layer173_U0_weights8_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights8_out_write : STD_LOGIC;
    signal first_layer173_U0_betas8_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas8_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs8_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs8_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs9_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs9_out_write : STD_LOGIC;
    signal first_layer173_U0_weights9_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights9_out_write : STD_LOGIC;
    signal first_layer173_U0_betas9_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas9_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs9_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs9_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs10_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs10_out_write : STD_LOGIC;
    signal first_layer173_U0_weights10_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights10_out_write : STD_LOGIC;
    signal first_layer173_U0_betas10_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas10_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs10_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs10_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs11_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs11_out_write : STD_LOGIC;
    signal first_layer173_U0_weights11_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights11_out_write : STD_LOGIC;
    signal first_layer173_U0_betas11_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas11_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs11_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs11_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs12_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs12_out_write : STD_LOGIC;
    signal first_layer173_U0_weights12_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights12_out_write : STD_LOGIC;
    signal first_layer173_U0_betas12_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas12_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs12_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs12_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs13_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs13_out_write : STD_LOGIC;
    signal first_layer173_U0_weights13_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights13_out_write : STD_LOGIC;
    signal first_layer173_U0_betas13_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas13_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs13_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs13_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs14_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs14_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs14_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs14_out_write : STD_LOGIC;
    signal first_layer173_U0_inputs15_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_inputs15_out_write : STD_LOGIC;
    signal first_layer173_U0_weights15_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_weights15_out_write : STD_LOGIC;
    signal first_layer173_U0_betas15_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_betas15_out_write : STD_LOGIC;
    signal first_layer173_U0_outputs15_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal first_layer173_U0_outputs15_out_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal inter_layer_7_U0_ap_start : STD_LOGIC;
    signal inter_layer_7_U0_ap_done : STD_LOGIC;
    signal inter_layer_7_U0_ap_continue : STD_LOGIC;
    signal inter_layer_7_U0_ap_idle : STD_LOGIC;
    signal inter_layer_7_U0_ap_ready : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_7_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_7_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_7_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_7_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_7_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_7_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_7_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_7_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_7_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_7_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_7_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_7_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_2_U0_ap_start : STD_LOGIC;
    signal inter_layer_2_U0_ap_done : STD_LOGIC;
    signal inter_layer_2_U0_ap_continue : STD_LOGIC;
    signal inter_layer_2_U0_ap_idle : STD_LOGIC;
    signal inter_layer_2_U0_ap_ready : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_2_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_2_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_2_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_2_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_2_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_2_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_2_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_2_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_2_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_2_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_2_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_2_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_5_U0_ap_start : STD_LOGIC;
    signal inter_layer_5_U0_ap_done : STD_LOGIC;
    signal inter_layer_5_U0_ap_continue : STD_LOGIC;
    signal inter_layer_5_U0_ap_idle : STD_LOGIC;
    signal inter_layer_5_U0_ap_ready : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_5_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_5_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_5_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_5_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_5_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_5_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_5_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_5_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_5_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_5_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_5_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_5_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_U0_ap_start : STD_LOGIC;
    signal inter_layer_U0_ap_done : STD_LOGIC;
    signal inter_layer_U0_ap_continue : STD_LOGIC;
    signal inter_layer_U0_ap_idle : STD_LOGIC;
    signal inter_layer_U0_ap_ready : STD_LOGIC;
    signal inter_layer_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_10_U0_ap_start : STD_LOGIC;
    signal inter_layer_10_U0_ap_done : STD_LOGIC;
    signal inter_layer_10_U0_ap_continue : STD_LOGIC;
    signal inter_layer_10_U0_ap_idle : STD_LOGIC;
    signal inter_layer_10_U0_ap_ready : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_10_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_10_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_10_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_10_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_10_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_10_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_10_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_10_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_10_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_10_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_10_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_10_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_4_U0_ap_start : STD_LOGIC;
    signal inter_layer_4_U0_ap_done : STD_LOGIC;
    signal inter_layer_4_U0_ap_continue : STD_LOGIC;
    signal inter_layer_4_U0_ap_idle : STD_LOGIC;
    signal inter_layer_4_U0_ap_ready : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_4_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_4_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_4_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_4_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_4_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_4_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_4_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_4_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_4_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_4_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_4_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_4_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_8_U0_ap_start : STD_LOGIC;
    signal inter_layer_8_U0_ap_done : STD_LOGIC;
    signal inter_layer_8_U0_ap_continue : STD_LOGIC;
    signal inter_layer_8_U0_ap_idle : STD_LOGIC;
    signal inter_layer_8_U0_ap_ready : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_8_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_8_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_8_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_8_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_8_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_8_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_8_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_8_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_8_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_8_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_8_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_8_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer265_U0_ap_start : STD_LOGIC;
    signal inter_layer265_U0_ap_done : STD_LOGIC;
    signal inter_layer265_U0_ap_continue : STD_LOGIC;
    signal inter_layer265_U0_ap_idle : STD_LOGIC;
    signal inter_layer265_U0_ap_ready : STD_LOGIC;
    signal inter_layer265_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer265_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer265_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer265_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer265_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer265_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer265_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer265_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer265_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer265_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer265_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer265_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer265_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer265_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer265_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer265_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer265_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer265_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer265_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer265_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer265_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer265_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer265_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer265_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer265_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer265_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer265_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_6_U0_ap_start : STD_LOGIC;
    signal inter_layer_6_U0_ap_done : STD_LOGIC;
    signal inter_layer_6_U0_ap_continue : STD_LOGIC;
    signal inter_layer_6_U0_ap_idle : STD_LOGIC;
    signal inter_layer_6_U0_ap_ready : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_6_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_6_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_6_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_6_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_6_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_6_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_6_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_6_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_6_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_6_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_6_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_6_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_1_U0_ap_start : STD_LOGIC;
    signal inter_layer_1_U0_ap_done : STD_LOGIC;
    signal inter_layer_1_U0_ap_continue : STD_LOGIC;
    signal inter_layer_1_U0_ap_idle : STD_LOGIC;
    signal inter_layer_1_U0_ap_ready : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_1_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_1_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_1_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_1_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_1_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_1_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_1_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_1_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_1_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_1_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_1_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_1_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_9_U0_ap_start : STD_LOGIC;
    signal inter_layer_9_U0_ap_done : STD_LOGIC;
    signal inter_layer_9_U0_ap_continue : STD_LOGIC;
    signal inter_layer_9_U0_ap_idle : STD_LOGIC;
    signal inter_layer_9_U0_ap_ready : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_9_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_9_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_9_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_9_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_9_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_9_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_9_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_9_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_9_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_9_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_9_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_9_U0_nxt_ready_V_write : STD_LOGIC;
    signal inter_layer_3_U0_ap_start : STD_LOGIC;
    signal inter_layer_3_U0_ap_done : STD_LOGIC;
    signal inter_layer_3_U0_ap_continue : STD_LOGIC;
    signal inter_layer_3_U0_ap_idle : STD_LOGIC;
    signal inter_layer_3_U0_ap_ready : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal inter_layer_3_U0_inputs_offset_read : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_3_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal inter_layer_3_U0_weights_offset_read : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_3_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal inter_layer_3_U0_betas_offset_read : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal inter_layer_3_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal inter_layer_3_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal inter_layer_3_U0_outputs_offset_read : STD_LOGIC;
    signal inter_layer_3_U0_pre_ready_V_dout : STD_LOGIC;
    signal inter_layer_3_U0_pre_ready_V_read : STD_LOGIC;
    signal inter_layer_3_U0_nxt_ready_V_din : STD_LOGIC;
    signal inter_layer_3_U0_nxt_ready_V_write : STD_LOGIC;
    signal penult_layer_U0_ap_start : STD_LOGIC;
    signal penult_layer_U0_ap_done : STD_LOGIC;
    signal penult_layer_U0_ap_continue : STD_LOGIC;
    signal penult_layer_U0_ap_idle : STD_LOGIC;
    signal penult_layer_U0_ap_ready : STD_LOGIC;
    signal penult_layer_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal penult_layer_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal penult_layer_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal penult_layer_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal penult_layer_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal penult_layer_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal penult_layer_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal penult_layer_U0_inputs_offset_read : STD_LOGIC;
    signal penult_layer_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal penult_layer_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal penult_layer_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal penult_layer_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal penult_layer_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal penult_layer_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal penult_layer_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal penult_layer_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal penult_layer_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal penult_layer_U0_outputs_offset_read : STD_LOGIC;
    signal penult_layer_U0_pre_ready_V_dout : STD_LOGIC;
    signal penult_layer_U0_pre_ready_V_read : STD_LOGIC;
    signal penult_layer_U0_nxt_ready_V_din : STD_LOGIC;
    signal penult_layer_U0_nxt_ready_V_write : STD_LOGIC;
    signal last_layer_U0_ap_start : STD_LOGIC;
    signal last_layer_U0_ap_done : STD_LOGIC;
    signal last_layer_U0_ap_continue : STD_LOGIC;
    signal last_layer_U0_ap_idle : STD_LOGIC;
    signal last_layer_U0_ap_ready : STD_LOGIC;
    signal last_layer_U0_m_axi_inputs_AWVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_inputs_WVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal last_layer_U0_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_inputs_WLAST : STD_LOGIC;
    signal last_layer_U0_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_inputs_ARVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_inputs_RREADY : STD_LOGIC;
    signal last_layer_U0_m_axi_inputs_BREADY : STD_LOGIC;
    signal last_layer_U0_inputs_offset_read : STD_LOGIC;
    signal last_layer_U0_m_axi_weights_AWVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_weights_WVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal last_layer_U0_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_weights_WLAST : STD_LOGIC;
    signal last_layer_U0_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_weights_ARVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_weights_RREADY : STD_LOGIC;
    signal last_layer_U0_m_axi_weights_BREADY : STD_LOGIC;
    signal last_layer_U0_weights_offset_read : STD_LOGIC;
    signal last_layer_U0_m_axi_betas_AWVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_betas_WVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal last_layer_U0_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_betas_WLAST : STD_LOGIC;
    signal last_layer_U0_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_betas_ARVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_betas_RREADY : STD_LOGIC;
    signal last_layer_U0_m_axi_betas_BREADY : STD_LOGIC;
    signal last_layer_U0_betas_offset_read : STD_LOGIC;
    signal last_layer_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal last_layer_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal last_layer_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal last_layer_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal last_layer_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal last_layer_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal last_layer_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal last_layer_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal last_layer_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal last_layer_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal last_layer_U0_outputs_offset_read : STD_LOGIC;
    signal last_layer_U0_pre_ready_V_dout : STD_LOGIC;
    signal last_layer_U0_pre_ready_V_read : STD_LOGIC;
    signal first_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal first_ready_V_full_n : STD_LOGIC;
    signal first_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal first_ready_V_empty_n : STD_LOGIC;
    signal inputs2_c_full_n : STD_LOGIC;
    signal inputs2_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs2_c_empty_n : STD_LOGIC;
    signal weights2_c_full_n : STD_LOGIC;
    signal weights2_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights2_c_empty_n : STD_LOGIC;
    signal betas2_c_full_n : STD_LOGIC;
    signal betas2_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas2_c_empty_n : STD_LOGIC;
    signal outputs2_c_full_n : STD_LOGIC;
    signal outputs2_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs2_c_empty_n : STD_LOGIC;
    signal inputs3_c_full_n : STD_LOGIC;
    signal inputs3_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs3_c_empty_n : STD_LOGIC;
    signal weights3_c_full_n : STD_LOGIC;
    signal weights3_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights3_c_empty_n : STD_LOGIC;
    signal betas3_c_full_n : STD_LOGIC;
    signal betas3_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas3_c_empty_n : STD_LOGIC;
    signal outputs3_c_full_n : STD_LOGIC;
    signal outputs3_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs3_c_empty_n : STD_LOGIC;
    signal inputs4_c_full_n : STD_LOGIC;
    signal inputs4_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs4_c_empty_n : STD_LOGIC;
    signal weights4_c_full_n : STD_LOGIC;
    signal weights4_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights4_c_empty_n : STD_LOGIC;
    signal betas4_c_full_n : STD_LOGIC;
    signal betas4_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas4_c_empty_n : STD_LOGIC;
    signal outputs4_c_full_n : STD_LOGIC;
    signal outputs4_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs4_c_empty_n : STD_LOGIC;
    signal inputs5_c_full_n : STD_LOGIC;
    signal inputs5_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs5_c_empty_n : STD_LOGIC;
    signal weights5_c_full_n : STD_LOGIC;
    signal weights5_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights5_c_empty_n : STD_LOGIC;
    signal betas5_c_full_n : STD_LOGIC;
    signal betas5_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas5_c_empty_n : STD_LOGIC;
    signal outputs5_c_full_n : STD_LOGIC;
    signal outputs5_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs5_c_empty_n : STD_LOGIC;
    signal inputs6_c_full_n : STD_LOGIC;
    signal inputs6_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs6_c_empty_n : STD_LOGIC;
    signal weights6_c_full_n : STD_LOGIC;
    signal weights6_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights6_c_empty_n : STD_LOGIC;
    signal betas6_c_full_n : STD_LOGIC;
    signal betas6_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas6_c_empty_n : STD_LOGIC;
    signal outputs6_c_full_n : STD_LOGIC;
    signal outputs6_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs6_c_empty_n : STD_LOGIC;
    signal inputs7_c_full_n : STD_LOGIC;
    signal inputs7_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs7_c_empty_n : STD_LOGIC;
    signal weights7_c_full_n : STD_LOGIC;
    signal weights7_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights7_c_empty_n : STD_LOGIC;
    signal betas7_c_full_n : STD_LOGIC;
    signal betas7_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas7_c_empty_n : STD_LOGIC;
    signal outputs7_c_full_n : STD_LOGIC;
    signal outputs7_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs7_c_empty_n : STD_LOGIC;
    signal inputs8_c_full_n : STD_LOGIC;
    signal inputs8_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs8_c_empty_n : STD_LOGIC;
    signal weights8_c_full_n : STD_LOGIC;
    signal weights8_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights8_c_empty_n : STD_LOGIC;
    signal betas8_c_full_n : STD_LOGIC;
    signal betas8_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas8_c_empty_n : STD_LOGIC;
    signal outputs8_c_full_n : STD_LOGIC;
    signal outputs8_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs8_c_empty_n : STD_LOGIC;
    signal inputs9_c_full_n : STD_LOGIC;
    signal inputs9_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs9_c_empty_n : STD_LOGIC;
    signal weights9_c_full_n : STD_LOGIC;
    signal weights9_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights9_c_empty_n : STD_LOGIC;
    signal betas9_c_full_n : STD_LOGIC;
    signal betas9_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas9_c_empty_n : STD_LOGIC;
    signal outputs9_c_full_n : STD_LOGIC;
    signal outputs9_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs9_c_empty_n : STD_LOGIC;
    signal inputs10_c_full_n : STD_LOGIC;
    signal inputs10_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs10_c_empty_n : STD_LOGIC;
    signal weights10_c_full_n : STD_LOGIC;
    signal weights10_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights10_c_empty_n : STD_LOGIC;
    signal betas10_c_full_n : STD_LOGIC;
    signal betas10_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas10_c_empty_n : STD_LOGIC;
    signal outputs10_c_full_n : STD_LOGIC;
    signal outputs10_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs10_c_empty_n : STD_LOGIC;
    signal inputs11_c_full_n : STD_LOGIC;
    signal inputs11_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs11_c_empty_n : STD_LOGIC;
    signal weights11_c_full_n : STD_LOGIC;
    signal weights11_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights11_c_empty_n : STD_LOGIC;
    signal betas11_c_full_n : STD_LOGIC;
    signal betas11_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas11_c_empty_n : STD_LOGIC;
    signal outputs11_c_full_n : STD_LOGIC;
    signal outputs11_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs11_c_empty_n : STD_LOGIC;
    signal inputs12_c_full_n : STD_LOGIC;
    signal inputs12_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs12_c_empty_n : STD_LOGIC;
    signal weights12_c_full_n : STD_LOGIC;
    signal weights12_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights12_c_empty_n : STD_LOGIC;
    signal betas12_c_full_n : STD_LOGIC;
    signal betas12_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas12_c_empty_n : STD_LOGIC;
    signal outputs12_c_full_n : STD_LOGIC;
    signal outputs12_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs12_c_empty_n : STD_LOGIC;
    signal inputs13_c_full_n : STD_LOGIC;
    signal inputs13_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs13_c_empty_n : STD_LOGIC;
    signal weights13_c_full_n : STD_LOGIC;
    signal weights13_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights13_c_empty_n : STD_LOGIC;
    signal betas13_c_full_n : STD_LOGIC;
    signal betas13_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas13_c_empty_n : STD_LOGIC;
    signal outputs13_c_full_n : STD_LOGIC;
    signal outputs13_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs13_c_empty_n : STD_LOGIC;
    signal inputs14_c_full_n : STD_LOGIC;
    signal inputs14_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs14_c_empty_n : STD_LOGIC;
    signal outputs14_c_full_n : STD_LOGIC;
    signal outputs14_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs14_c_empty_n : STD_LOGIC;
    signal inputs15_c_full_n : STD_LOGIC;
    signal inputs15_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs15_c_empty_n : STD_LOGIC;
    signal weights15_c_full_n : STD_LOGIC;
    signal weights15_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights15_c_empty_n : STD_LOGIC;
    signal betas15_c_full_n : STD_LOGIC;
    signal betas15_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal betas15_c_empty_n : STD_LOGIC;
    signal outputs15_c_full_n : STD_LOGIC;
    signal outputs15_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs15_c_empty_n : STD_LOGIC;
    signal second_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal second_ready_V_full_n : STD_LOGIC;
    signal second_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal second_ready_V_empty_n : STD_LOGIC;
    signal third_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal third_ready_V_full_n : STD_LOGIC;
    signal third_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal third_ready_V_empty_n : STD_LOGIC;
    signal fourth_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal fourth_ready_V_full_n : STD_LOGIC;
    signal fourth_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal fourth_ready_V_empty_n : STD_LOGIC;
    signal fifth_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal fifth_ready_V_full_n : STD_LOGIC;
    signal fifth_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal fifth_ready_V_empty_n : STD_LOGIC;
    signal sixth_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal sixth_ready_V_full_n : STD_LOGIC;
    signal sixth_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal sixth_ready_V_empty_n : STD_LOGIC;
    signal seventh_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal seventh_ready_V_full_n : STD_LOGIC;
    signal seventh_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal seventh_ready_V_empty_n : STD_LOGIC;
    signal eighth_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal eighth_ready_V_full_n : STD_LOGIC;
    signal eighth_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal eighth_ready_V_empty_n : STD_LOGIC;
    signal ninth_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal ninth_ready_V_full_n : STD_LOGIC;
    signal ninth_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ninth_ready_V_empty_n : STD_LOGIC;
    signal tenth_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal tenth_ready_V_full_n : STD_LOGIC;
    signal tenth_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal tenth_ready_V_empty_n : STD_LOGIC;
    signal eleventh_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal eleventh_ready_V_full_n : STD_LOGIC;
    signal eleventh_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal eleventh_ready_V_empty_n : STD_LOGIC;
    signal twelfth_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal twelfth_ready_V_full_n : STD_LOGIC;
    signal twelfth_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal twelfth_ready_V_empty_n : STD_LOGIC;
    signal thirteenth_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal thirteenth_ready_V_full_n : STD_LOGIC;
    signal thirteenth_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal thirteenth_ready_V_empty_n : STD_LOGIC;
    signal fourteenth_ready_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal fourteenth_ready_V_full_n : STD_LOGIC;
    signal fourteenth_ready_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal fourteenth_ready_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_first_layer173_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_first_layer173_U0_ap_ready : STD_LOGIC;
    signal first_layer173_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_7_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_7_U0_ap_ready : STD_LOGIC;
    signal inter_layer_7_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_2_U0_ap_ready : STD_LOGIC;
    signal inter_layer_2_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_5_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_5_U0_ap_ready : STD_LOGIC;
    signal inter_layer_5_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_U0_ap_ready : STD_LOGIC;
    signal inter_layer_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_10_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_10_U0_ap_ready : STD_LOGIC;
    signal inter_layer_10_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_4_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_4_U0_ap_ready : STD_LOGIC;
    signal inter_layer_4_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_8_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_8_U0_ap_ready : STD_LOGIC;
    signal inter_layer_8_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer265_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer265_U0_ap_ready : STD_LOGIC;
    signal inter_layer265_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_6_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_6_U0_ap_ready : STD_LOGIC;
    signal inter_layer_6_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_1_U0_ap_ready : STD_LOGIC;
    signal inter_layer_1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_9_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_9_U0_ap_ready : STD_LOGIC;
    signal inter_layer_9_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_inter_layer_3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_inter_layer_3_U0_ap_ready : STD_LOGIC;
    signal inter_layer_3_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_penult_layer_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_penult_layer_U0_ap_ready : STD_LOGIC;
    signal penult_layer_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_last_layer_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_last_layer_U0_ap_ready : STD_LOGIC;
    signal last_layer_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal first_layer173_U0_start_full_n : STD_LOGIC;
    signal first_layer173_U0_start_write : STD_LOGIC;
    signal inter_layer_7_U0_start_full_n : STD_LOGIC;
    signal inter_layer_7_U0_start_write : STD_LOGIC;
    signal inter_layer_2_U0_start_full_n : STD_LOGIC;
    signal inter_layer_2_U0_start_write : STD_LOGIC;
    signal inter_layer_5_U0_start_full_n : STD_LOGIC;
    signal inter_layer_5_U0_start_write : STD_LOGIC;
    signal inter_layer_U0_start_full_n : STD_LOGIC;
    signal inter_layer_U0_start_write : STD_LOGIC;
    signal inter_layer_10_U0_start_full_n : STD_LOGIC;
    signal inter_layer_10_U0_start_write : STD_LOGIC;
    signal inter_layer_4_U0_start_full_n : STD_LOGIC;
    signal inter_layer_4_U0_start_write : STD_LOGIC;
    signal inter_layer_8_U0_start_full_n : STD_LOGIC;
    signal inter_layer_8_U0_start_write : STD_LOGIC;
    signal inter_layer265_U0_start_full_n : STD_LOGIC;
    signal inter_layer265_U0_start_write : STD_LOGIC;
    signal inter_layer_6_U0_start_full_n : STD_LOGIC;
    signal inter_layer_6_U0_start_write : STD_LOGIC;
    signal inter_layer_1_U0_start_full_n : STD_LOGIC;
    signal inter_layer_1_U0_start_write : STD_LOGIC;
    signal inter_layer_9_U0_start_full_n : STD_LOGIC;
    signal inter_layer_9_U0_start_write : STD_LOGIC;
    signal inter_layer_3_U0_start_full_n : STD_LOGIC;
    signal inter_layer_3_U0_start_write : STD_LOGIC;
    signal penult_layer_U0_start_full_n : STD_LOGIC;
    signal penult_layer_U0_start_write : STD_LOGIC;
    signal last_layer_U0_start_full_n : STD_LOGIC;
    signal last_layer_U0_start_write : STD_LOGIC;

    component first_layer173 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC;
        inputs2 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights2 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas2 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs2 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs3 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights3 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas3 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs3 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs4 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights4 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas4 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs4 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs5 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights5 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas5 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs5 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs6 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights6 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas6 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs6 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs7 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights7 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas7 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs7 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs8 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights8 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas8 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs8 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs9 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights9 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas9 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs9 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs10 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights10 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas10 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs10 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs11 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights11 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas11 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs11 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs12 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights12 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas12 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs12 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs13 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights13 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas13 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs13 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs14 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs14 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs15 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights15 : IN STD_LOGIC_VECTOR (31 downto 0);
        betas15 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs15 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs2_out_full_n : IN STD_LOGIC;
        inputs2_out_write : OUT STD_LOGIC;
        weights2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights2_out_full_n : IN STD_LOGIC;
        weights2_out_write : OUT STD_LOGIC;
        betas2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas2_out_full_n : IN STD_LOGIC;
        betas2_out_write : OUT STD_LOGIC;
        outputs2_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs2_out_full_n : IN STD_LOGIC;
        outputs2_out_write : OUT STD_LOGIC;
        inputs3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs3_out_full_n : IN STD_LOGIC;
        inputs3_out_write : OUT STD_LOGIC;
        weights3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights3_out_full_n : IN STD_LOGIC;
        weights3_out_write : OUT STD_LOGIC;
        betas3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas3_out_full_n : IN STD_LOGIC;
        betas3_out_write : OUT STD_LOGIC;
        outputs3_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs3_out_full_n : IN STD_LOGIC;
        outputs3_out_write : OUT STD_LOGIC;
        inputs4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs4_out_full_n : IN STD_LOGIC;
        inputs4_out_write : OUT STD_LOGIC;
        weights4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights4_out_full_n : IN STD_LOGIC;
        weights4_out_write : OUT STD_LOGIC;
        betas4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas4_out_full_n : IN STD_LOGIC;
        betas4_out_write : OUT STD_LOGIC;
        outputs4_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs4_out_full_n : IN STD_LOGIC;
        outputs4_out_write : OUT STD_LOGIC;
        inputs5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs5_out_full_n : IN STD_LOGIC;
        inputs5_out_write : OUT STD_LOGIC;
        weights5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights5_out_full_n : IN STD_LOGIC;
        weights5_out_write : OUT STD_LOGIC;
        betas5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas5_out_full_n : IN STD_LOGIC;
        betas5_out_write : OUT STD_LOGIC;
        outputs5_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs5_out_full_n : IN STD_LOGIC;
        outputs5_out_write : OUT STD_LOGIC;
        inputs6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs6_out_full_n : IN STD_LOGIC;
        inputs6_out_write : OUT STD_LOGIC;
        weights6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights6_out_full_n : IN STD_LOGIC;
        weights6_out_write : OUT STD_LOGIC;
        betas6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas6_out_full_n : IN STD_LOGIC;
        betas6_out_write : OUT STD_LOGIC;
        outputs6_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs6_out_full_n : IN STD_LOGIC;
        outputs6_out_write : OUT STD_LOGIC;
        inputs7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs7_out_full_n : IN STD_LOGIC;
        inputs7_out_write : OUT STD_LOGIC;
        weights7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights7_out_full_n : IN STD_LOGIC;
        weights7_out_write : OUT STD_LOGIC;
        betas7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas7_out_full_n : IN STD_LOGIC;
        betas7_out_write : OUT STD_LOGIC;
        outputs7_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs7_out_full_n : IN STD_LOGIC;
        outputs7_out_write : OUT STD_LOGIC;
        inputs8_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs8_out_full_n : IN STD_LOGIC;
        inputs8_out_write : OUT STD_LOGIC;
        weights8_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights8_out_full_n : IN STD_LOGIC;
        weights8_out_write : OUT STD_LOGIC;
        betas8_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas8_out_full_n : IN STD_LOGIC;
        betas8_out_write : OUT STD_LOGIC;
        outputs8_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs8_out_full_n : IN STD_LOGIC;
        outputs8_out_write : OUT STD_LOGIC;
        inputs9_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs9_out_full_n : IN STD_LOGIC;
        inputs9_out_write : OUT STD_LOGIC;
        weights9_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights9_out_full_n : IN STD_LOGIC;
        weights9_out_write : OUT STD_LOGIC;
        betas9_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas9_out_full_n : IN STD_LOGIC;
        betas9_out_write : OUT STD_LOGIC;
        outputs9_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs9_out_full_n : IN STD_LOGIC;
        outputs9_out_write : OUT STD_LOGIC;
        inputs10_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs10_out_full_n : IN STD_LOGIC;
        inputs10_out_write : OUT STD_LOGIC;
        weights10_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights10_out_full_n : IN STD_LOGIC;
        weights10_out_write : OUT STD_LOGIC;
        betas10_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas10_out_full_n : IN STD_LOGIC;
        betas10_out_write : OUT STD_LOGIC;
        outputs10_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs10_out_full_n : IN STD_LOGIC;
        outputs10_out_write : OUT STD_LOGIC;
        inputs11_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs11_out_full_n : IN STD_LOGIC;
        inputs11_out_write : OUT STD_LOGIC;
        weights11_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights11_out_full_n : IN STD_LOGIC;
        weights11_out_write : OUT STD_LOGIC;
        betas11_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas11_out_full_n : IN STD_LOGIC;
        betas11_out_write : OUT STD_LOGIC;
        outputs11_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs11_out_full_n : IN STD_LOGIC;
        outputs11_out_write : OUT STD_LOGIC;
        inputs12_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs12_out_full_n : IN STD_LOGIC;
        inputs12_out_write : OUT STD_LOGIC;
        weights12_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights12_out_full_n : IN STD_LOGIC;
        weights12_out_write : OUT STD_LOGIC;
        betas12_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas12_out_full_n : IN STD_LOGIC;
        betas12_out_write : OUT STD_LOGIC;
        outputs12_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs12_out_full_n : IN STD_LOGIC;
        outputs12_out_write : OUT STD_LOGIC;
        inputs13_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs13_out_full_n : IN STD_LOGIC;
        inputs13_out_write : OUT STD_LOGIC;
        weights13_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights13_out_full_n : IN STD_LOGIC;
        weights13_out_write : OUT STD_LOGIC;
        betas13_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas13_out_full_n : IN STD_LOGIC;
        betas13_out_write : OUT STD_LOGIC;
        outputs13_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs13_out_full_n : IN STD_LOGIC;
        outputs13_out_write : OUT STD_LOGIC;
        inputs14_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs14_out_full_n : IN STD_LOGIC;
        inputs14_out_write : OUT STD_LOGIC;
        outputs14_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs14_out_full_n : IN STD_LOGIC;
        outputs14_out_write : OUT STD_LOGIC;
        inputs15_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs15_out_full_n : IN STD_LOGIC;
        inputs15_out_write : OUT STD_LOGIC;
        weights15_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights15_out_full_n : IN STD_LOGIC;
        weights15_out_write : OUT STD_LOGIC;
        betas15_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        betas15_out_full_n : IN STD_LOGIC;
        betas15_out_write : OUT STD_LOGIC;
        outputs15_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs15_out_full_n : IN STD_LOGIC;
        outputs15_out_write : OUT STD_LOGIC );
    end component;


    component inter_layer_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer_10 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer_8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer265 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer_9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component inter_layer_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component penult_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC;
        nxt_ready_V_din : OUT STD_LOGIC;
        nxt_ready_V_full_n : IN STD_LOGIC;
        nxt_ready_V_write : OUT STD_LOGIC );
    end component;


    component last_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_offset_empty_n : IN STD_LOGIC;
        inputs_offset_read : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_offset_empty_n : IN STD_LOGIC;
        weights_offset_read : OUT STD_LOGIC;
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        betas_offset_empty_n : IN STD_LOGIC;
        betas_offset_read : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        pre_ready_V_dout : IN STD_LOGIC;
        pre_ready_V_empty_n : IN STD_LOGIC;
        pre_ready_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d9_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d11_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d12_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d13_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d14_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d15_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component moblie_net_data1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data31_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data32_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data16_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data33_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data34_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data17_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data35_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data36_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data18_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data4_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data37_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data38_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data19_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data5_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data39_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data40_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data20_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data6_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data41_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data42_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data21_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data7_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data43_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data44_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data22_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data8_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data45_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data46_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data23_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data9_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data47_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data48_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data24_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data10_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data49_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data50_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data25_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data11_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data51_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data52_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data26_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data12_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data53_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data54_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data27_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data13_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data55_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data56_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data28_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data14_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data29_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data15_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data57_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data58_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component moblie_net_data30_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    moblie_net_data1_m_axi_U : component moblie_net_data1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data1_AWVALID,
        AWREADY => m_axi_data1_AWREADY,
        AWADDR => m_axi_data1_AWADDR,
        AWID => m_axi_data1_AWID,
        AWLEN => m_axi_data1_AWLEN,
        AWSIZE => m_axi_data1_AWSIZE,
        AWBURST => m_axi_data1_AWBURST,
        AWLOCK => m_axi_data1_AWLOCK,
        AWCACHE => m_axi_data1_AWCACHE,
        AWPROT => m_axi_data1_AWPROT,
        AWQOS => m_axi_data1_AWQOS,
        AWREGION => m_axi_data1_AWREGION,
        AWUSER => m_axi_data1_AWUSER,
        WVALID => m_axi_data1_WVALID,
        WREADY => m_axi_data1_WREADY,
        WDATA => m_axi_data1_WDATA,
        WSTRB => m_axi_data1_WSTRB,
        WLAST => m_axi_data1_WLAST,
        WID => m_axi_data1_WID,
        WUSER => m_axi_data1_WUSER,
        ARVALID => m_axi_data1_ARVALID,
        ARREADY => m_axi_data1_ARREADY,
        ARADDR => m_axi_data1_ARADDR,
        ARID => m_axi_data1_ARID,
        ARLEN => m_axi_data1_ARLEN,
        ARSIZE => m_axi_data1_ARSIZE,
        ARBURST => m_axi_data1_ARBURST,
        ARLOCK => m_axi_data1_ARLOCK,
        ARCACHE => m_axi_data1_ARCACHE,
        ARPROT => m_axi_data1_ARPROT,
        ARQOS => m_axi_data1_ARQOS,
        ARREGION => m_axi_data1_ARREGION,
        ARUSER => m_axi_data1_ARUSER,
        RVALID => m_axi_data1_RVALID,
        RREADY => m_axi_data1_RREADY,
        RDATA => m_axi_data1_RDATA,
        RLAST => m_axi_data1_RLAST,
        RID => m_axi_data1_RID,
        RUSER => m_axi_data1_RUSER,
        RRESP => m_axi_data1_RRESP,
        BVALID => m_axi_data1_BVALID,
        BREADY => m_axi_data1_BREADY,
        BRESP => m_axi_data1_BRESP,
        BID => m_axi_data1_BID,
        BUSER => m_axi_data1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => first_layer173_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data1_ARREADY,
        I_ARADDR => first_layer173_U0_m_axi_inputs_ARADDR,
        I_ARID => first_layer173_U0_m_axi_inputs_ARID,
        I_ARLEN => first_layer173_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => first_layer173_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => first_layer173_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => first_layer173_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => first_layer173_U0_m_axi_inputs_ARQOS,
        I_ARPROT => first_layer173_U0_m_axi_inputs_ARPROT,
        I_ARUSER => first_layer173_U0_m_axi_inputs_ARUSER,
        I_ARBURST => first_layer173_U0_m_axi_inputs_ARBURST,
        I_ARREGION => first_layer173_U0_m_axi_inputs_ARREGION,
        I_RVALID => data1_RVALID,
        I_RREADY => first_layer173_U0_m_axi_inputs_RREADY,
        I_RDATA => data1_RDATA,
        I_RID => data1_RID,
        I_RUSER => data1_RUSER,
        I_RRESP => data1_RRESP,
        I_RLAST => data1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data1_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data1_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data1_BRESP,
        I_BID => data1_BID,
        I_BUSER => data1_BUSER);

    moblie_net_data31_m_axi_U : component moblie_net_data31_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA31_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA31_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA31_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA31_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA31_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA31_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA31_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA31_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA31_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA31_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA31_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data31_AWVALID,
        AWREADY => m_axi_data31_AWREADY,
        AWADDR => m_axi_data31_AWADDR,
        AWID => m_axi_data31_AWID,
        AWLEN => m_axi_data31_AWLEN,
        AWSIZE => m_axi_data31_AWSIZE,
        AWBURST => m_axi_data31_AWBURST,
        AWLOCK => m_axi_data31_AWLOCK,
        AWCACHE => m_axi_data31_AWCACHE,
        AWPROT => m_axi_data31_AWPROT,
        AWQOS => m_axi_data31_AWQOS,
        AWREGION => m_axi_data31_AWREGION,
        AWUSER => m_axi_data31_AWUSER,
        WVALID => m_axi_data31_WVALID,
        WREADY => m_axi_data31_WREADY,
        WDATA => m_axi_data31_WDATA,
        WSTRB => m_axi_data31_WSTRB,
        WLAST => m_axi_data31_WLAST,
        WID => m_axi_data31_WID,
        WUSER => m_axi_data31_WUSER,
        ARVALID => m_axi_data31_ARVALID,
        ARREADY => m_axi_data31_ARREADY,
        ARADDR => m_axi_data31_ARADDR,
        ARID => m_axi_data31_ARID,
        ARLEN => m_axi_data31_ARLEN,
        ARSIZE => m_axi_data31_ARSIZE,
        ARBURST => m_axi_data31_ARBURST,
        ARLOCK => m_axi_data31_ARLOCK,
        ARCACHE => m_axi_data31_ARCACHE,
        ARPROT => m_axi_data31_ARPROT,
        ARQOS => m_axi_data31_ARQOS,
        ARREGION => m_axi_data31_ARREGION,
        ARUSER => m_axi_data31_ARUSER,
        RVALID => m_axi_data31_RVALID,
        RREADY => m_axi_data31_RREADY,
        RDATA => m_axi_data31_RDATA,
        RLAST => m_axi_data31_RLAST,
        RID => m_axi_data31_RID,
        RUSER => m_axi_data31_RUSER,
        RRESP => m_axi_data31_RRESP,
        BVALID => m_axi_data31_BVALID,
        BREADY => m_axi_data31_BREADY,
        BRESP => m_axi_data31_BRESP,
        BID => m_axi_data31_BID,
        BUSER => m_axi_data31_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => first_layer173_U0_m_axi_weights_ARVALID,
        I_ARREADY => data31_ARREADY,
        I_ARADDR => first_layer173_U0_m_axi_weights_ARADDR,
        I_ARID => first_layer173_U0_m_axi_weights_ARID,
        I_ARLEN => first_layer173_U0_m_axi_weights_ARLEN,
        I_ARSIZE => first_layer173_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => first_layer173_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => first_layer173_U0_m_axi_weights_ARCACHE,
        I_ARQOS => first_layer173_U0_m_axi_weights_ARQOS,
        I_ARPROT => first_layer173_U0_m_axi_weights_ARPROT,
        I_ARUSER => first_layer173_U0_m_axi_weights_ARUSER,
        I_ARBURST => first_layer173_U0_m_axi_weights_ARBURST,
        I_ARREGION => first_layer173_U0_m_axi_weights_ARREGION,
        I_RVALID => data31_RVALID,
        I_RREADY => first_layer173_U0_m_axi_weights_RREADY,
        I_RDATA => data31_RDATA,
        I_RID => data31_RID,
        I_RUSER => data31_RUSER,
        I_RRESP => data31_RRESP,
        I_RLAST => data31_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data31_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data31_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data31_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data31_BRESP,
        I_BID => data31_BID,
        I_BUSER => data31_BUSER);

    moblie_net_data32_m_axi_U : component moblie_net_data32_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA32_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA32_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA32_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA32_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA32_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA32_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA32_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA32_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA32_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA32_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA32_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data32_AWVALID,
        AWREADY => m_axi_data32_AWREADY,
        AWADDR => m_axi_data32_AWADDR,
        AWID => m_axi_data32_AWID,
        AWLEN => m_axi_data32_AWLEN,
        AWSIZE => m_axi_data32_AWSIZE,
        AWBURST => m_axi_data32_AWBURST,
        AWLOCK => m_axi_data32_AWLOCK,
        AWCACHE => m_axi_data32_AWCACHE,
        AWPROT => m_axi_data32_AWPROT,
        AWQOS => m_axi_data32_AWQOS,
        AWREGION => m_axi_data32_AWREGION,
        AWUSER => m_axi_data32_AWUSER,
        WVALID => m_axi_data32_WVALID,
        WREADY => m_axi_data32_WREADY,
        WDATA => m_axi_data32_WDATA,
        WSTRB => m_axi_data32_WSTRB,
        WLAST => m_axi_data32_WLAST,
        WID => m_axi_data32_WID,
        WUSER => m_axi_data32_WUSER,
        ARVALID => m_axi_data32_ARVALID,
        ARREADY => m_axi_data32_ARREADY,
        ARADDR => m_axi_data32_ARADDR,
        ARID => m_axi_data32_ARID,
        ARLEN => m_axi_data32_ARLEN,
        ARSIZE => m_axi_data32_ARSIZE,
        ARBURST => m_axi_data32_ARBURST,
        ARLOCK => m_axi_data32_ARLOCK,
        ARCACHE => m_axi_data32_ARCACHE,
        ARPROT => m_axi_data32_ARPROT,
        ARQOS => m_axi_data32_ARQOS,
        ARREGION => m_axi_data32_ARREGION,
        ARUSER => m_axi_data32_ARUSER,
        RVALID => m_axi_data32_RVALID,
        RREADY => m_axi_data32_RREADY,
        RDATA => m_axi_data32_RDATA,
        RLAST => m_axi_data32_RLAST,
        RID => m_axi_data32_RID,
        RUSER => m_axi_data32_RUSER,
        RRESP => m_axi_data32_RRESP,
        BVALID => m_axi_data32_BVALID,
        BREADY => m_axi_data32_BREADY,
        BRESP => m_axi_data32_BRESP,
        BID => m_axi_data32_BID,
        BUSER => m_axi_data32_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => first_layer173_U0_m_axi_betas_ARVALID,
        I_ARREADY => data32_ARREADY,
        I_ARADDR => first_layer173_U0_m_axi_betas_ARADDR,
        I_ARID => first_layer173_U0_m_axi_betas_ARID,
        I_ARLEN => first_layer173_U0_m_axi_betas_ARLEN,
        I_ARSIZE => first_layer173_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => first_layer173_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => first_layer173_U0_m_axi_betas_ARCACHE,
        I_ARQOS => first_layer173_U0_m_axi_betas_ARQOS,
        I_ARPROT => first_layer173_U0_m_axi_betas_ARPROT,
        I_ARUSER => first_layer173_U0_m_axi_betas_ARUSER,
        I_ARBURST => first_layer173_U0_m_axi_betas_ARBURST,
        I_ARREGION => first_layer173_U0_m_axi_betas_ARREGION,
        I_RVALID => data32_RVALID,
        I_RREADY => first_layer173_U0_m_axi_betas_RREADY,
        I_RDATA => data32_RDATA,
        I_RID => data32_RID,
        I_RUSER => data32_RUSER,
        I_RRESP => data32_RRESP,
        I_RLAST => data32_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data32_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data32_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data32_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data32_BRESP,
        I_BID => data32_BID,
        I_BUSER => data32_BUSER);

    moblie_net_data16_m_axi_U : component moblie_net_data16_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA16_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA16_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA16_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA16_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA16_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA16_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA16_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA16_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA16_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA16_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA16_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data16_AWVALID,
        AWREADY => m_axi_data16_AWREADY,
        AWADDR => m_axi_data16_AWADDR,
        AWID => m_axi_data16_AWID,
        AWLEN => m_axi_data16_AWLEN,
        AWSIZE => m_axi_data16_AWSIZE,
        AWBURST => m_axi_data16_AWBURST,
        AWLOCK => m_axi_data16_AWLOCK,
        AWCACHE => m_axi_data16_AWCACHE,
        AWPROT => m_axi_data16_AWPROT,
        AWQOS => m_axi_data16_AWQOS,
        AWREGION => m_axi_data16_AWREGION,
        AWUSER => m_axi_data16_AWUSER,
        WVALID => m_axi_data16_WVALID,
        WREADY => m_axi_data16_WREADY,
        WDATA => m_axi_data16_WDATA,
        WSTRB => m_axi_data16_WSTRB,
        WLAST => m_axi_data16_WLAST,
        WID => m_axi_data16_WID,
        WUSER => m_axi_data16_WUSER,
        ARVALID => m_axi_data16_ARVALID,
        ARREADY => m_axi_data16_ARREADY,
        ARADDR => m_axi_data16_ARADDR,
        ARID => m_axi_data16_ARID,
        ARLEN => m_axi_data16_ARLEN,
        ARSIZE => m_axi_data16_ARSIZE,
        ARBURST => m_axi_data16_ARBURST,
        ARLOCK => m_axi_data16_ARLOCK,
        ARCACHE => m_axi_data16_ARCACHE,
        ARPROT => m_axi_data16_ARPROT,
        ARQOS => m_axi_data16_ARQOS,
        ARREGION => m_axi_data16_ARREGION,
        ARUSER => m_axi_data16_ARUSER,
        RVALID => m_axi_data16_RVALID,
        RREADY => m_axi_data16_RREADY,
        RDATA => m_axi_data16_RDATA,
        RLAST => m_axi_data16_RLAST,
        RID => m_axi_data16_RID,
        RUSER => m_axi_data16_RUSER,
        RRESP => m_axi_data16_RRESP,
        BVALID => m_axi_data16_BVALID,
        BREADY => m_axi_data16_BREADY,
        BRESP => m_axi_data16_BRESP,
        BID => m_axi_data16_BID,
        BUSER => m_axi_data16_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data16_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data16_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data16_RDATA,
        I_RID => data16_RID,
        I_RUSER => data16_RUSER,
        I_RRESP => data16_RRESP,
        I_RLAST => data16_RLAST,
        I_AWVALID => first_layer173_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data16_AWREADY,
        I_AWADDR => first_layer173_U0_m_axi_outputs_AWADDR,
        I_AWID => first_layer173_U0_m_axi_outputs_AWID,
        I_AWLEN => first_layer173_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => first_layer173_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => first_layer173_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => first_layer173_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => first_layer173_U0_m_axi_outputs_AWQOS,
        I_AWPROT => first_layer173_U0_m_axi_outputs_AWPROT,
        I_AWUSER => first_layer173_U0_m_axi_outputs_AWUSER,
        I_AWBURST => first_layer173_U0_m_axi_outputs_AWBURST,
        I_AWREGION => first_layer173_U0_m_axi_outputs_AWREGION,
        I_WVALID => first_layer173_U0_m_axi_outputs_WVALID,
        I_WREADY => data16_WREADY,
        I_WDATA => first_layer173_U0_m_axi_outputs_WDATA,
        I_WID => first_layer173_U0_m_axi_outputs_WID,
        I_WUSER => first_layer173_U0_m_axi_outputs_WUSER,
        I_WLAST => first_layer173_U0_m_axi_outputs_WLAST,
        I_WSTRB => first_layer173_U0_m_axi_outputs_WSTRB,
        I_BVALID => data16_BVALID,
        I_BREADY => first_layer173_U0_m_axi_outputs_BREADY,
        I_BRESP => data16_BRESP,
        I_BID => data16_BID,
        I_BUSER => data16_BUSER);

    moblie_net_data2_m_axi_U : component moblie_net_data2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data2_AWVALID,
        AWREADY => m_axi_data2_AWREADY,
        AWADDR => m_axi_data2_AWADDR,
        AWID => m_axi_data2_AWID,
        AWLEN => m_axi_data2_AWLEN,
        AWSIZE => m_axi_data2_AWSIZE,
        AWBURST => m_axi_data2_AWBURST,
        AWLOCK => m_axi_data2_AWLOCK,
        AWCACHE => m_axi_data2_AWCACHE,
        AWPROT => m_axi_data2_AWPROT,
        AWQOS => m_axi_data2_AWQOS,
        AWREGION => m_axi_data2_AWREGION,
        AWUSER => m_axi_data2_AWUSER,
        WVALID => m_axi_data2_WVALID,
        WREADY => m_axi_data2_WREADY,
        WDATA => m_axi_data2_WDATA,
        WSTRB => m_axi_data2_WSTRB,
        WLAST => m_axi_data2_WLAST,
        WID => m_axi_data2_WID,
        WUSER => m_axi_data2_WUSER,
        ARVALID => m_axi_data2_ARVALID,
        ARREADY => m_axi_data2_ARREADY,
        ARADDR => m_axi_data2_ARADDR,
        ARID => m_axi_data2_ARID,
        ARLEN => m_axi_data2_ARLEN,
        ARSIZE => m_axi_data2_ARSIZE,
        ARBURST => m_axi_data2_ARBURST,
        ARLOCK => m_axi_data2_ARLOCK,
        ARCACHE => m_axi_data2_ARCACHE,
        ARPROT => m_axi_data2_ARPROT,
        ARQOS => m_axi_data2_ARQOS,
        ARREGION => m_axi_data2_ARREGION,
        ARUSER => m_axi_data2_ARUSER,
        RVALID => m_axi_data2_RVALID,
        RREADY => m_axi_data2_RREADY,
        RDATA => m_axi_data2_RDATA,
        RLAST => m_axi_data2_RLAST,
        RID => m_axi_data2_RID,
        RUSER => m_axi_data2_RUSER,
        RRESP => m_axi_data2_RRESP,
        BVALID => m_axi_data2_BVALID,
        BREADY => m_axi_data2_BREADY,
        BRESP => m_axi_data2_BRESP,
        BID => m_axi_data2_BID,
        BUSER => m_axi_data2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_7_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data2_ARREADY,
        I_ARADDR => inter_layer_7_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_7_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_7_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_7_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_7_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_7_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_7_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_7_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_7_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_7_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_7_U0_m_axi_inputs_ARREGION,
        I_RVALID => data2_RVALID,
        I_RREADY => inter_layer_7_U0_m_axi_inputs_RREADY,
        I_RDATA => data2_RDATA,
        I_RID => data2_RID,
        I_RUSER => data2_RUSER,
        I_RRESP => data2_RRESP,
        I_RLAST => data2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data2_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data2_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data2_BRESP,
        I_BID => data2_BID,
        I_BUSER => data2_BUSER);

    moblie_net_data33_m_axi_U : component moblie_net_data33_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA33_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA33_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA33_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA33_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA33_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA33_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA33_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA33_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA33_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA33_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA33_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data33_AWVALID,
        AWREADY => m_axi_data33_AWREADY,
        AWADDR => m_axi_data33_AWADDR,
        AWID => m_axi_data33_AWID,
        AWLEN => m_axi_data33_AWLEN,
        AWSIZE => m_axi_data33_AWSIZE,
        AWBURST => m_axi_data33_AWBURST,
        AWLOCK => m_axi_data33_AWLOCK,
        AWCACHE => m_axi_data33_AWCACHE,
        AWPROT => m_axi_data33_AWPROT,
        AWQOS => m_axi_data33_AWQOS,
        AWREGION => m_axi_data33_AWREGION,
        AWUSER => m_axi_data33_AWUSER,
        WVALID => m_axi_data33_WVALID,
        WREADY => m_axi_data33_WREADY,
        WDATA => m_axi_data33_WDATA,
        WSTRB => m_axi_data33_WSTRB,
        WLAST => m_axi_data33_WLAST,
        WID => m_axi_data33_WID,
        WUSER => m_axi_data33_WUSER,
        ARVALID => m_axi_data33_ARVALID,
        ARREADY => m_axi_data33_ARREADY,
        ARADDR => m_axi_data33_ARADDR,
        ARID => m_axi_data33_ARID,
        ARLEN => m_axi_data33_ARLEN,
        ARSIZE => m_axi_data33_ARSIZE,
        ARBURST => m_axi_data33_ARBURST,
        ARLOCK => m_axi_data33_ARLOCK,
        ARCACHE => m_axi_data33_ARCACHE,
        ARPROT => m_axi_data33_ARPROT,
        ARQOS => m_axi_data33_ARQOS,
        ARREGION => m_axi_data33_ARREGION,
        ARUSER => m_axi_data33_ARUSER,
        RVALID => m_axi_data33_RVALID,
        RREADY => m_axi_data33_RREADY,
        RDATA => m_axi_data33_RDATA,
        RLAST => m_axi_data33_RLAST,
        RID => m_axi_data33_RID,
        RUSER => m_axi_data33_RUSER,
        RRESP => m_axi_data33_RRESP,
        BVALID => m_axi_data33_BVALID,
        BREADY => m_axi_data33_BREADY,
        BRESP => m_axi_data33_BRESP,
        BID => m_axi_data33_BID,
        BUSER => m_axi_data33_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_7_U0_m_axi_weights_ARVALID,
        I_ARREADY => data33_ARREADY,
        I_ARADDR => inter_layer_7_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_7_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_7_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_7_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_7_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_7_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_7_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_7_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_7_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_7_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_7_U0_m_axi_weights_ARREGION,
        I_RVALID => data33_RVALID,
        I_RREADY => inter_layer_7_U0_m_axi_weights_RREADY,
        I_RDATA => data33_RDATA,
        I_RID => data33_RID,
        I_RUSER => data33_RUSER,
        I_RRESP => data33_RRESP,
        I_RLAST => data33_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data33_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data33_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data33_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data33_BRESP,
        I_BID => data33_BID,
        I_BUSER => data33_BUSER);

    moblie_net_data34_m_axi_U : component moblie_net_data34_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA34_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA34_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA34_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA34_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA34_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA34_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA34_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA34_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA34_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA34_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA34_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data34_AWVALID,
        AWREADY => m_axi_data34_AWREADY,
        AWADDR => m_axi_data34_AWADDR,
        AWID => m_axi_data34_AWID,
        AWLEN => m_axi_data34_AWLEN,
        AWSIZE => m_axi_data34_AWSIZE,
        AWBURST => m_axi_data34_AWBURST,
        AWLOCK => m_axi_data34_AWLOCK,
        AWCACHE => m_axi_data34_AWCACHE,
        AWPROT => m_axi_data34_AWPROT,
        AWQOS => m_axi_data34_AWQOS,
        AWREGION => m_axi_data34_AWREGION,
        AWUSER => m_axi_data34_AWUSER,
        WVALID => m_axi_data34_WVALID,
        WREADY => m_axi_data34_WREADY,
        WDATA => m_axi_data34_WDATA,
        WSTRB => m_axi_data34_WSTRB,
        WLAST => m_axi_data34_WLAST,
        WID => m_axi_data34_WID,
        WUSER => m_axi_data34_WUSER,
        ARVALID => m_axi_data34_ARVALID,
        ARREADY => m_axi_data34_ARREADY,
        ARADDR => m_axi_data34_ARADDR,
        ARID => m_axi_data34_ARID,
        ARLEN => m_axi_data34_ARLEN,
        ARSIZE => m_axi_data34_ARSIZE,
        ARBURST => m_axi_data34_ARBURST,
        ARLOCK => m_axi_data34_ARLOCK,
        ARCACHE => m_axi_data34_ARCACHE,
        ARPROT => m_axi_data34_ARPROT,
        ARQOS => m_axi_data34_ARQOS,
        ARREGION => m_axi_data34_ARREGION,
        ARUSER => m_axi_data34_ARUSER,
        RVALID => m_axi_data34_RVALID,
        RREADY => m_axi_data34_RREADY,
        RDATA => m_axi_data34_RDATA,
        RLAST => m_axi_data34_RLAST,
        RID => m_axi_data34_RID,
        RUSER => m_axi_data34_RUSER,
        RRESP => m_axi_data34_RRESP,
        BVALID => m_axi_data34_BVALID,
        BREADY => m_axi_data34_BREADY,
        BRESP => m_axi_data34_BRESP,
        BID => m_axi_data34_BID,
        BUSER => m_axi_data34_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_7_U0_m_axi_betas_ARVALID,
        I_ARREADY => data34_ARREADY,
        I_ARADDR => inter_layer_7_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_7_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_7_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_7_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_7_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_7_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_7_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_7_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_7_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_7_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_7_U0_m_axi_betas_ARREGION,
        I_RVALID => data34_RVALID,
        I_RREADY => inter_layer_7_U0_m_axi_betas_RREADY,
        I_RDATA => data34_RDATA,
        I_RID => data34_RID,
        I_RUSER => data34_RUSER,
        I_RRESP => data34_RRESP,
        I_RLAST => data34_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data34_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data34_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data34_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data34_BRESP,
        I_BID => data34_BID,
        I_BUSER => data34_BUSER);

    moblie_net_data17_m_axi_U : component moblie_net_data17_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA17_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA17_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA17_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA17_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA17_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA17_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA17_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA17_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA17_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA17_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA17_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data17_AWVALID,
        AWREADY => m_axi_data17_AWREADY,
        AWADDR => m_axi_data17_AWADDR,
        AWID => m_axi_data17_AWID,
        AWLEN => m_axi_data17_AWLEN,
        AWSIZE => m_axi_data17_AWSIZE,
        AWBURST => m_axi_data17_AWBURST,
        AWLOCK => m_axi_data17_AWLOCK,
        AWCACHE => m_axi_data17_AWCACHE,
        AWPROT => m_axi_data17_AWPROT,
        AWQOS => m_axi_data17_AWQOS,
        AWREGION => m_axi_data17_AWREGION,
        AWUSER => m_axi_data17_AWUSER,
        WVALID => m_axi_data17_WVALID,
        WREADY => m_axi_data17_WREADY,
        WDATA => m_axi_data17_WDATA,
        WSTRB => m_axi_data17_WSTRB,
        WLAST => m_axi_data17_WLAST,
        WID => m_axi_data17_WID,
        WUSER => m_axi_data17_WUSER,
        ARVALID => m_axi_data17_ARVALID,
        ARREADY => m_axi_data17_ARREADY,
        ARADDR => m_axi_data17_ARADDR,
        ARID => m_axi_data17_ARID,
        ARLEN => m_axi_data17_ARLEN,
        ARSIZE => m_axi_data17_ARSIZE,
        ARBURST => m_axi_data17_ARBURST,
        ARLOCK => m_axi_data17_ARLOCK,
        ARCACHE => m_axi_data17_ARCACHE,
        ARPROT => m_axi_data17_ARPROT,
        ARQOS => m_axi_data17_ARQOS,
        ARREGION => m_axi_data17_ARREGION,
        ARUSER => m_axi_data17_ARUSER,
        RVALID => m_axi_data17_RVALID,
        RREADY => m_axi_data17_RREADY,
        RDATA => m_axi_data17_RDATA,
        RLAST => m_axi_data17_RLAST,
        RID => m_axi_data17_RID,
        RUSER => m_axi_data17_RUSER,
        RRESP => m_axi_data17_RRESP,
        BVALID => m_axi_data17_BVALID,
        BREADY => m_axi_data17_BREADY,
        BRESP => m_axi_data17_BRESP,
        BID => m_axi_data17_BID,
        BUSER => m_axi_data17_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data17_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data17_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data17_RDATA,
        I_RID => data17_RID,
        I_RUSER => data17_RUSER,
        I_RRESP => data17_RRESP,
        I_RLAST => data17_RLAST,
        I_AWVALID => inter_layer_7_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data17_AWREADY,
        I_AWADDR => inter_layer_7_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_7_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_7_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_7_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_7_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_7_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_7_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_7_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_7_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_7_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_7_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_7_U0_m_axi_outputs_WVALID,
        I_WREADY => data17_WREADY,
        I_WDATA => inter_layer_7_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_7_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_7_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_7_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_7_U0_m_axi_outputs_WSTRB,
        I_BVALID => data17_BVALID,
        I_BREADY => inter_layer_7_U0_m_axi_outputs_BREADY,
        I_BRESP => data17_BRESP,
        I_BID => data17_BID,
        I_BUSER => data17_BUSER);

    moblie_net_data3_m_axi_U : component moblie_net_data3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data3_AWVALID,
        AWREADY => m_axi_data3_AWREADY,
        AWADDR => m_axi_data3_AWADDR,
        AWID => m_axi_data3_AWID,
        AWLEN => m_axi_data3_AWLEN,
        AWSIZE => m_axi_data3_AWSIZE,
        AWBURST => m_axi_data3_AWBURST,
        AWLOCK => m_axi_data3_AWLOCK,
        AWCACHE => m_axi_data3_AWCACHE,
        AWPROT => m_axi_data3_AWPROT,
        AWQOS => m_axi_data3_AWQOS,
        AWREGION => m_axi_data3_AWREGION,
        AWUSER => m_axi_data3_AWUSER,
        WVALID => m_axi_data3_WVALID,
        WREADY => m_axi_data3_WREADY,
        WDATA => m_axi_data3_WDATA,
        WSTRB => m_axi_data3_WSTRB,
        WLAST => m_axi_data3_WLAST,
        WID => m_axi_data3_WID,
        WUSER => m_axi_data3_WUSER,
        ARVALID => m_axi_data3_ARVALID,
        ARREADY => m_axi_data3_ARREADY,
        ARADDR => m_axi_data3_ARADDR,
        ARID => m_axi_data3_ARID,
        ARLEN => m_axi_data3_ARLEN,
        ARSIZE => m_axi_data3_ARSIZE,
        ARBURST => m_axi_data3_ARBURST,
        ARLOCK => m_axi_data3_ARLOCK,
        ARCACHE => m_axi_data3_ARCACHE,
        ARPROT => m_axi_data3_ARPROT,
        ARQOS => m_axi_data3_ARQOS,
        ARREGION => m_axi_data3_ARREGION,
        ARUSER => m_axi_data3_ARUSER,
        RVALID => m_axi_data3_RVALID,
        RREADY => m_axi_data3_RREADY,
        RDATA => m_axi_data3_RDATA,
        RLAST => m_axi_data3_RLAST,
        RID => m_axi_data3_RID,
        RUSER => m_axi_data3_RUSER,
        RRESP => m_axi_data3_RRESP,
        BVALID => m_axi_data3_BVALID,
        BREADY => m_axi_data3_BREADY,
        BRESP => m_axi_data3_BRESP,
        BID => m_axi_data3_BID,
        BUSER => m_axi_data3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_2_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data3_ARREADY,
        I_ARADDR => inter_layer_2_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_2_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_2_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_2_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_2_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_2_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_2_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_2_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_2_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_2_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_2_U0_m_axi_inputs_ARREGION,
        I_RVALID => data3_RVALID,
        I_RREADY => inter_layer_2_U0_m_axi_inputs_RREADY,
        I_RDATA => data3_RDATA,
        I_RID => data3_RID,
        I_RUSER => data3_RUSER,
        I_RRESP => data3_RRESP,
        I_RLAST => data3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data3_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data3_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data3_BRESP,
        I_BID => data3_BID,
        I_BUSER => data3_BUSER);

    moblie_net_data35_m_axi_U : component moblie_net_data35_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA35_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA35_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA35_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA35_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA35_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA35_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA35_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA35_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA35_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA35_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA35_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data35_AWVALID,
        AWREADY => m_axi_data35_AWREADY,
        AWADDR => m_axi_data35_AWADDR,
        AWID => m_axi_data35_AWID,
        AWLEN => m_axi_data35_AWLEN,
        AWSIZE => m_axi_data35_AWSIZE,
        AWBURST => m_axi_data35_AWBURST,
        AWLOCK => m_axi_data35_AWLOCK,
        AWCACHE => m_axi_data35_AWCACHE,
        AWPROT => m_axi_data35_AWPROT,
        AWQOS => m_axi_data35_AWQOS,
        AWREGION => m_axi_data35_AWREGION,
        AWUSER => m_axi_data35_AWUSER,
        WVALID => m_axi_data35_WVALID,
        WREADY => m_axi_data35_WREADY,
        WDATA => m_axi_data35_WDATA,
        WSTRB => m_axi_data35_WSTRB,
        WLAST => m_axi_data35_WLAST,
        WID => m_axi_data35_WID,
        WUSER => m_axi_data35_WUSER,
        ARVALID => m_axi_data35_ARVALID,
        ARREADY => m_axi_data35_ARREADY,
        ARADDR => m_axi_data35_ARADDR,
        ARID => m_axi_data35_ARID,
        ARLEN => m_axi_data35_ARLEN,
        ARSIZE => m_axi_data35_ARSIZE,
        ARBURST => m_axi_data35_ARBURST,
        ARLOCK => m_axi_data35_ARLOCK,
        ARCACHE => m_axi_data35_ARCACHE,
        ARPROT => m_axi_data35_ARPROT,
        ARQOS => m_axi_data35_ARQOS,
        ARREGION => m_axi_data35_ARREGION,
        ARUSER => m_axi_data35_ARUSER,
        RVALID => m_axi_data35_RVALID,
        RREADY => m_axi_data35_RREADY,
        RDATA => m_axi_data35_RDATA,
        RLAST => m_axi_data35_RLAST,
        RID => m_axi_data35_RID,
        RUSER => m_axi_data35_RUSER,
        RRESP => m_axi_data35_RRESP,
        BVALID => m_axi_data35_BVALID,
        BREADY => m_axi_data35_BREADY,
        BRESP => m_axi_data35_BRESP,
        BID => m_axi_data35_BID,
        BUSER => m_axi_data35_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_2_U0_m_axi_weights_ARVALID,
        I_ARREADY => data35_ARREADY,
        I_ARADDR => inter_layer_2_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_2_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_2_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_2_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_2_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_2_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_2_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_2_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_2_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_2_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_2_U0_m_axi_weights_ARREGION,
        I_RVALID => data35_RVALID,
        I_RREADY => inter_layer_2_U0_m_axi_weights_RREADY,
        I_RDATA => data35_RDATA,
        I_RID => data35_RID,
        I_RUSER => data35_RUSER,
        I_RRESP => data35_RRESP,
        I_RLAST => data35_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data35_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data35_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data35_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data35_BRESP,
        I_BID => data35_BID,
        I_BUSER => data35_BUSER);

    moblie_net_data36_m_axi_U : component moblie_net_data36_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA36_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA36_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA36_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA36_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA36_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA36_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA36_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA36_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA36_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA36_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA36_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data36_AWVALID,
        AWREADY => m_axi_data36_AWREADY,
        AWADDR => m_axi_data36_AWADDR,
        AWID => m_axi_data36_AWID,
        AWLEN => m_axi_data36_AWLEN,
        AWSIZE => m_axi_data36_AWSIZE,
        AWBURST => m_axi_data36_AWBURST,
        AWLOCK => m_axi_data36_AWLOCK,
        AWCACHE => m_axi_data36_AWCACHE,
        AWPROT => m_axi_data36_AWPROT,
        AWQOS => m_axi_data36_AWQOS,
        AWREGION => m_axi_data36_AWREGION,
        AWUSER => m_axi_data36_AWUSER,
        WVALID => m_axi_data36_WVALID,
        WREADY => m_axi_data36_WREADY,
        WDATA => m_axi_data36_WDATA,
        WSTRB => m_axi_data36_WSTRB,
        WLAST => m_axi_data36_WLAST,
        WID => m_axi_data36_WID,
        WUSER => m_axi_data36_WUSER,
        ARVALID => m_axi_data36_ARVALID,
        ARREADY => m_axi_data36_ARREADY,
        ARADDR => m_axi_data36_ARADDR,
        ARID => m_axi_data36_ARID,
        ARLEN => m_axi_data36_ARLEN,
        ARSIZE => m_axi_data36_ARSIZE,
        ARBURST => m_axi_data36_ARBURST,
        ARLOCK => m_axi_data36_ARLOCK,
        ARCACHE => m_axi_data36_ARCACHE,
        ARPROT => m_axi_data36_ARPROT,
        ARQOS => m_axi_data36_ARQOS,
        ARREGION => m_axi_data36_ARREGION,
        ARUSER => m_axi_data36_ARUSER,
        RVALID => m_axi_data36_RVALID,
        RREADY => m_axi_data36_RREADY,
        RDATA => m_axi_data36_RDATA,
        RLAST => m_axi_data36_RLAST,
        RID => m_axi_data36_RID,
        RUSER => m_axi_data36_RUSER,
        RRESP => m_axi_data36_RRESP,
        BVALID => m_axi_data36_BVALID,
        BREADY => m_axi_data36_BREADY,
        BRESP => m_axi_data36_BRESP,
        BID => m_axi_data36_BID,
        BUSER => m_axi_data36_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_2_U0_m_axi_betas_ARVALID,
        I_ARREADY => data36_ARREADY,
        I_ARADDR => inter_layer_2_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_2_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_2_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_2_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_2_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_2_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_2_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_2_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_2_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_2_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_2_U0_m_axi_betas_ARREGION,
        I_RVALID => data36_RVALID,
        I_RREADY => inter_layer_2_U0_m_axi_betas_RREADY,
        I_RDATA => data36_RDATA,
        I_RID => data36_RID,
        I_RUSER => data36_RUSER,
        I_RRESP => data36_RRESP,
        I_RLAST => data36_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data36_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data36_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data36_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data36_BRESP,
        I_BID => data36_BID,
        I_BUSER => data36_BUSER);

    moblie_net_data18_m_axi_U : component moblie_net_data18_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA18_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA18_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA18_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA18_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA18_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA18_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA18_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA18_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA18_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA18_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA18_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data18_AWVALID,
        AWREADY => m_axi_data18_AWREADY,
        AWADDR => m_axi_data18_AWADDR,
        AWID => m_axi_data18_AWID,
        AWLEN => m_axi_data18_AWLEN,
        AWSIZE => m_axi_data18_AWSIZE,
        AWBURST => m_axi_data18_AWBURST,
        AWLOCK => m_axi_data18_AWLOCK,
        AWCACHE => m_axi_data18_AWCACHE,
        AWPROT => m_axi_data18_AWPROT,
        AWQOS => m_axi_data18_AWQOS,
        AWREGION => m_axi_data18_AWREGION,
        AWUSER => m_axi_data18_AWUSER,
        WVALID => m_axi_data18_WVALID,
        WREADY => m_axi_data18_WREADY,
        WDATA => m_axi_data18_WDATA,
        WSTRB => m_axi_data18_WSTRB,
        WLAST => m_axi_data18_WLAST,
        WID => m_axi_data18_WID,
        WUSER => m_axi_data18_WUSER,
        ARVALID => m_axi_data18_ARVALID,
        ARREADY => m_axi_data18_ARREADY,
        ARADDR => m_axi_data18_ARADDR,
        ARID => m_axi_data18_ARID,
        ARLEN => m_axi_data18_ARLEN,
        ARSIZE => m_axi_data18_ARSIZE,
        ARBURST => m_axi_data18_ARBURST,
        ARLOCK => m_axi_data18_ARLOCK,
        ARCACHE => m_axi_data18_ARCACHE,
        ARPROT => m_axi_data18_ARPROT,
        ARQOS => m_axi_data18_ARQOS,
        ARREGION => m_axi_data18_ARREGION,
        ARUSER => m_axi_data18_ARUSER,
        RVALID => m_axi_data18_RVALID,
        RREADY => m_axi_data18_RREADY,
        RDATA => m_axi_data18_RDATA,
        RLAST => m_axi_data18_RLAST,
        RID => m_axi_data18_RID,
        RUSER => m_axi_data18_RUSER,
        RRESP => m_axi_data18_RRESP,
        BVALID => m_axi_data18_BVALID,
        BREADY => m_axi_data18_BREADY,
        BRESP => m_axi_data18_BRESP,
        BID => m_axi_data18_BID,
        BUSER => m_axi_data18_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data18_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data18_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data18_RDATA,
        I_RID => data18_RID,
        I_RUSER => data18_RUSER,
        I_RRESP => data18_RRESP,
        I_RLAST => data18_RLAST,
        I_AWVALID => inter_layer_2_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data18_AWREADY,
        I_AWADDR => inter_layer_2_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_2_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_2_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_2_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_2_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_2_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_2_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_2_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_2_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_2_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_2_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_2_U0_m_axi_outputs_WVALID,
        I_WREADY => data18_WREADY,
        I_WDATA => inter_layer_2_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_2_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_2_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_2_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_2_U0_m_axi_outputs_WSTRB,
        I_BVALID => data18_BVALID,
        I_BREADY => inter_layer_2_U0_m_axi_outputs_BREADY,
        I_BRESP => data18_BRESP,
        I_BID => data18_BID,
        I_BUSER => data18_BUSER);

    moblie_net_data4_m_axi_U : component moblie_net_data4_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA4_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA4_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA4_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA4_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA4_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA4_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA4_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA4_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA4_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA4_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA4_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data4_AWVALID,
        AWREADY => m_axi_data4_AWREADY,
        AWADDR => m_axi_data4_AWADDR,
        AWID => m_axi_data4_AWID,
        AWLEN => m_axi_data4_AWLEN,
        AWSIZE => m_axi_data4_AWSIZE,
        AWBURST => m_axi_data4_AWBURST,
        AWLOCK => m_axi_data4_AWLOCK,
        AWCACHE => m_axi_data4_AWCACHE,
        AWPROT => m_axi_data4_AWPROT,
        AWQOS => m_axi_data4_AWQOS,
        AWREGION => m_axi_data4_AWREGION,
        AWUSER => m_axi_data4_AWUSER,
        WVALID => m_axi_data4_WVALID,
        WREADY => m_axi_data4_WREADY,
        WDATA => m_axi_data4_WDATA,
        WSTRB => m_axi_data4_WSTRB,
        WLAST => m_axi_data4_WLAST,
        WID => m_axi_data4_WID,
        WUSER => m_axi_data4_WUSER,
        ARVALID => m_axi_data4_ARVALID,
        ARREADY => m_axi_data4_ARREADY,
        ARADDR => m_axi_data4_ARADDR,
        ARID => m_axi_data4_ARID,
        ARLEN => m_axi_data4_ARLEN,
        ARSIZE => m_axi_data4_ARSIZE,
        ARBURST => m_axi_data4_ARBURST,
        ARLOCK => m_axi_data4_ARLOCK,
        ARCACHE => m_axi_data4_ARCACHE,
        ARPROT => m_axi_data4_ARPROT,
        ARQOS => m_axi_data4_ARQOS,
        ARREGION => m_axi_data4_ARREGION,
        ARUSER => m_axi_data4_ARUSER,
        RVALID => m_axi_data4_RVALID,
        RREADY => m_axi_data4_RREADY,
        RDATA => m_axi_data4_RDATA,
        RLAST => m_axi_data4_RLAST,
        RID => m_axi_data4_RID,
        RUSER => m_axi_data4_RUSER,
        RRESP => m_axi_data4_RRESP,
        BVALID => m_axi_data4_BVALID,
        BREADY => m_axi_data4_BREADY,
        BRESP => m_axi_data4_BRESP,
        BID => m_axi_data4_BID,
        BUSER => m_axi_data4_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_5_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data4_ARREADY,
        I_ARADDR => inter_layer_5_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_5_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_5_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_5_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_5_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_5_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_5_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_5_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_5_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_5_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_5_U0_m_axi_inputs_ARREGION,
        I_RVALID => data4_RVALID,
        I_RREADY => inter_layer_5_U0_m_axi_inputs_RREADY,
        I_RDATA => data4_RDATA,
        I_RID => data4_RID,
        I_RUSER => data4_RUSER,
        I_RRESP => data4_RRESP,
        I_RLAST => data4_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data4_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data4_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data4_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data4_BRESP,
        I_BID => data4_BID,
        I_BUSER => data4_BUSER);

    moblie_net_data37_m_axi_U : component moblie_net_data37_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA37_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA37_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA37_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA37_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA37_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA37_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA37_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA37_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA37_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA37_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA37_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data37_AWVALID,
        AWREADY => m_axi_data37_AWREADY,
        AWADDR => m_axi_data37_AWADDR,
        AWID => m_axi_data37_AWID,
        AWLEN => m_axi_data37_AWLEN,
        AWSIZE => m_axi_data37_AWSIZE,
        AWBURST => m_axi_data37_AWBURST,
        AWLOCK => m_axi_data37_AWLOCK,
        AWCACHE => m_axi_data37_AWCACHE,
        AWPROT => m_axi_data37_AWPROT,
        AWQOS => m_axi_data37_AWQOS,
        AWREGION => m_axi_data37_AWREGION,
        AWUSER => m_axi_data37_AWUSER,
        WVALID => m_axi_data37_WVALID,
        WREADY => m_axi_data37_WREADY,
        WDATA => m_axi_data37_WDATA,
        WSTRB => m_axi_data37_WSTRB,
        WLAST => m_axi_data37_WLAST,
        WID => m_axi_data37_WID,
        WUSER => m_axi_data37_WUSER,
        ARVALID => m_axi_data37_ARVALID,
        ARREADY => m_axi_data37_ARREADY,
        ARADDR => m_axi_data37_ARADDR,
        ARID => m_axi_data37_ARID,
        ARLEN => m_axi_data37_ARLEN,
        ARSIZE => m_axi_data37_ARSIZE,
        ARBURST => m_axi_data37_ARBURST,
        ARLOCK => m_axi_data37_ARLOCK,
        ARCACHE => m_axi_data37_ARCACHE,
        ARPROT => m_axi_data37_ARPROT,
        ARQOS => m_axi_data37_ARQOS,
        ARREGION => m_axi_data37_ARREGION,
        ARUSER => m_axi_data37_ARUSER,
        RVALID => m_axi_data37_RVALID,
        RREADY => m_axi_data37_RREADY,
        RDATA => m_axi_data37_RDATA,
        RLAST => m_axi_data37_RLAST,
        RID => m_axi_data37_RID,
        RUSER => m_axi_data37_RUSER,
        RRESP => m_axi_data37_RRESP,
        BVALID => m_axi_data37_BVALID,
        BREADY => m_axi_data37_BREADY,
        BRESP => m_axi_data37_BRESP,
        BID => m_axi_data37_BID,
        BUSER => m_axi_data37_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_5_U0_m_axi_weights_ARVALID,
        I_ARREADY => data37_ARREADY,
        I_ARADDR => inter_layer_5_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_5_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_5_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_5_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_5_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_5_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_5_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_5_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_5_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_5_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_5_U0_m_axi_weights_ARREGION,
        I_RVALID => data37_RVALID,
        I_RREADY => inter_layer_5_U0_m_axi_weights_RREADY,
        I_RDATA => data37_RDATA,
        I_RID => data37_RID,
        I_RUSER => data37_RUSER,
        I_RRESP => data37_RRESP,
        I_RLAST => data37_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data37_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data37_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data37_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data37_BRESP,
        I_BID => data37_BID,
        I_BUSER => data37_BUSER);

    moblie_net_data38_m_axi_U : component moblie_net_data38_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA38_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA38_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA38_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA38_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA38_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA38_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA38_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA38_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA38_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA38_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA38_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data38_AWVALID,
        AWREADY => m_axi_data38_AWREADY,
        AWADDR => m_axi_data38_AWADDR,
        AWID => m_axi_data38_AWID,
        AWLEN => m_axi_data38_AWLEN,
        AWSIZE => m_axi_data38_AWSIZE,
        AWBURST => m_axi_data38_AWBURST,
        AWLOCK => m_axi_data38_AWLOCK,
        AWCACHE => m_axi_data38_AWCACHE,
        AWPROT => m_axi_data38_AWPROT,
        AWQOS => m_axi_data38_AWQOS,
        AWREGION => m_axi_data38_AWREGION,
        AWUSER => m_axi_data38_AWUSER,
        WVALID => m_axi_data38_WVALID,
        WREADY => m_axi_data38_WREADY,
        WDATA => m_axi_data38_WDATA,
        WSTRB => m_axi_data38_WSTRB,
        WLAST => m_axi_data38_WLAST,
        WID => m_axi_data38_WID,
        WUSER => m_axi_data38_WUSER,
        ARVALID => m_axi_data38_ARVALID,
        ARREADY => m_axi_data38_ARREADY,
        ARADDR => m_axi_data38_ARADDR,
        ARID => m_axi_data38_ARID,
        ARLEN => m_axi_data38_ARLEN,
        ARSIZE => m_axi_data38_ARSIZE,
        ARBURST => m_axi_data38_ARBURST,
        ARLOCK => m_axi_data38_ARLOCK,
        ARCACHE => m_axi_data38_ARCACHE,
        ARPROT => m_axi_data38_ARPROT,
        ARQOS => m_axi_data38_ARQOS,
        ARREGION => m_axi_data38_ARREGION,
        ARUSER => m_axi_data38_ARUSER,
        RVALID => m_axi_data38_RVALID,
        RREADY => m_axi_data38_RREADY,
        RDATA => m_axi_data38_RDATA,
        RLAST => m_axi_data38_RLAST,
        RID => m_axi_data38_RID,
        RUSER => m_axi_data38_RUSER,
        RRESP => m_axi_data38_RRESP,
        BVALID => m_axi_data38_BVALID,
        BREADY => m_axi_data38_BREADY,
        BRESP => m_axi_data38_BRESP,
        BID => m_axi_data38_BID,
        BUSER => m_axi_data38_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_5_U0_m_axi_betas_ARVALID,
        I_ARREADY => data38_ARREADY,
        I_ARADDR => inter_layer_5_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_5_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_5_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_5_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_5_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_5_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_5_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_5_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_5_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_5_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_5_U0_m_axi_betas_ARREGION,
        I_RVALID => data38_RVALID,
        I_RREADY => inter_layer_5_U0_m_axi_betas_RREADY,
        I_RDATA => data38_RDATA,
        I_RID => data38_RID,
        I_RUSER => data38_RUSER,
        I_RRESP => data38_RRESP,
        I_RLAST => data38_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data38_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data38_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data38_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data38_BRESP,
        I_BID => data38_BID,
        I_BUSER => data38_BUSER);

    moblie_net_data19_m_axi_U : component moblie_net_data19_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA19_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA19_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA19_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA19_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA19_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA19_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA19_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA19_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA19_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA19_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA19_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data19_AWVALID,
        AWREADY => m_axi_data19_AWREADY,
        AWADDR => m_axi_data19_AWADDR,
        AWID => m_axi_data19_AWID,
        AWLEN => m_axi_data19_AWLEN,
        AWSIZE => m_axi_data19_AWSIZE,
        AWBURST => m_axi_data19_AWBURST,
        AWLOCK => m_axi_data19_AWLOCK,
        AWCACHE => m_axi_data19_AWCACHE,
        AWPROT => m_axi_data19_AWPROT,
        AWQOS => m_axi_data19_AWQOS,
        AWREGION => m_axi_data19_AWREGION,
        AWUSER => m_axi_data19_AWUSER,
        WVALID => m_axi_data19_WVALID,
        WREADY => m_axi_data19_WREADY,
        WDATA => m_axi_data19_WDATA,
        WSTRB => m_axi_data19_WSTRB,
        WLAST => m_axi_data19_WLAST,
        WID => m_axi_data19_WID,
        WUSER => m_axi_data19_WUSER,
        ARVALID => m_axi_data19_ARVALID,
        ARREADY => m_axi_data19_ARREADY,
        ARADDR => m_axi_data19_ARADDR,
        ARID => m_axi_data19_ARID,
        ARLEN => m_axi_data19_ARLEN,
        ARSIZE => m_axi_data19_ARSIZE,
        ARBURST => m_axi_data19_ARBURST,
        ARLOCK => m_axi_data19_ARLOCK,
        ARCACHE => m_axi_data19_ARCACHE,
        ARPROT => m_axi_data19_ARPROT,
        ARQOS => m_axi_data19_ARQOS,
        ARREGION => m_axi_data19_ARREGION,
        ARUSER => m_axi_data19_ARUSER,
        RVALID => m_axi_data19_RVALID,
        RREADY => m_axi_data19_RREADY,
        RDATA => m_axi_data19_RDATA,
        RLAST => m_axi_data19_RLAST,
        RID => m_axi_data19_RID,
        RUSER => m_axi_data19_RUSER,
        RRESP => m_axi_data19_RRESP,
        BVALID => m_axi_data19_BVALID,
        BREADY => m_axi_data19_BREADY,
        BRESP => m_axi_data19_BRESP,
        BID => m_axi_data19_BID,
        BUSER => m_axi_data19_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data19_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data19_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data19_RDATA,
        I_RID => data19_RID,
        I_RUSER => data19_RUSER,
        I_RRESP => data19_RRESP,
        I_RLAST => data19_RLAST,
        I_AWVALID => inter_layer_5_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data19_AWREADY,
        I_AWADDR => inter_layer_5_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_5_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_5_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_5_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_5_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_5_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_5_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_5_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_5_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_5_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_5_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_5_U0_m_axi_outputs_WVALID,
        I_WREADY => data19_WREADY,
        I_WDATA => inter_layer_5_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_5_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_5_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_5_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_5_U0_m_axi_outputs_WSTRB,
        I_BVALID => data19_BVALID,
        I_BREADY => inter_layer_5_U0_m_axi_outputs_BREADY,
        I_BRESP => data19_BRESP,
        I_BID => data19_BID,
        I_BUSER => data19_BUSER);

    moblie_net_data5_m_axi_U : component moblie_net_data5_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA5_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA5_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA5_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA5_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA5_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA5_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA5_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA5_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA5_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA5_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA5_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data5_AWVALID,
        AWREADY => m_axi_data5_AWREADY,
        AWADDR => m_axi_data5_AWADDR,
        AWID => m_axi_data5_AWID,
        AWLEN => m_axi_data5_AWLEN,
        AWSIZE => m_axi_data5_AWSIZE,
        AWBURST => m_axi_data5_AWBURST,
        AWLOCK => m_axi_data5_AWLOCK,
        AWCACHE => m_axi_data5_AWCACHE,
        AWPROT => m_axi_data5_AWPROT,
        AWQOS => m_axi_data5_AWQOS,
        AWREGION => m_axi_data5_AWREGION,
        AWUSER => m_axi_data5_AWUSER,
        WVALID => m_axi_data5_WVALID,
        WREADY => m_axi_data5_WREADY,
        WDATA => m_axi_data5_WDATA,
        WSTRB => m_axi_data5_WSTRB,
        WLAST => m_axi_data5_WLAST,
        WID => m_axi_data5_WID,
        WUSER => m_axi_data5_WUSER,
        ARVALID => m_axi_data5_ARVALID,
        ARREADY => m_axi_data5_ARREADY,
        ARADDR => m_axi_data5_ARADDR,
        ARID => m_axi_data5_ARID,
        ARLEN => m_axi_data5_ARLEN,
        ARSIZE => m_axi_data5_ARSIZE,
        ARBURST => m_axi_data5_ARBURST,
        ARLOCK => m_axi_data5_ARLOCK,
        ARCACHE => m_axi_data5_ARCACHE,
        ARPROT => m_axi_data5_ARPROT,
        ARQOS => m_axi_data5_ARQOS,
        ARREGION => m_axi_data5_ARREGION,
        ARUSER => m_axi_data5_ARUSER,
        RVALID => m_axi_data5_RVALID,
        RREADY => m_axi_data5_RREADY,
        RDATA => m_axi_data5_RDATA,
        RLAST => m_axi_data5_RLAST,
        RID => m_axi_data5_RID,
        RUSER => m_axi_data5_RUSER,
        RRESP => m_axi_data5_RRESP,
        BVALID => m_axi_data5_BVALID,
        BREADY => m_axi_data5_BREADY,
        BRESP => m_axi_data5_BRESP,
        BID => m_axi_data5_BID,
        BUSER => m_axi_data5_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data5_ARREADY,
        I_ARADDR => inter_layer_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_U0_m_axi_inputs_ARREGION,
        I_RVALID => data5_RVALID,
        I_RREADY => inter_layer_U0_m_axi_inputs_RREADY,
        I_RDATA => data5_RDATA,
        I_RID => data5_RID,
        I_RUSER => data5_RUSER,
        I_RRESP => data5_RRESP,
        I_RLAST => data5_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data5_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data5_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data5_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data5_BRESP,
        I_BID => data5_BID,
        I_BUSER => data5_BUSER);

    moblie_net_data39_m_axi_U : component moblie_net_data39_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA39_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA39_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA39_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA39_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA39_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA39_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA39_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA39_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA39_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA39_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA39_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data39_AWVALID,
        AWREADY => m_axi_data39_AWREADY,
        AWADDR => m_axi_data39_AWADDR,
        AWID => m_axi_data39_AWID,
        AWLEN => m_axi_data39_AWLEN,
        AWSIZE => m_axi_data39_AWSIZE,
        AWBURST => m_axi_data39_AWBURST,
        AWLOCK => m_axi_data39_AWLOCK,
        AWCACHE => m_axi_data39_AWCACHE,
        AWPROT => m_axi_data39_AWPROT,
        AWQOS => m_axi_data39_AWQOS,
        AWREGION => m_axi_data39_AWREGION,
        AWUSER => m_axi_data39_AWUSER,
        WVALID => m_axi_data39_WVALID,
        WREADY => m_axi_data39_WREADY,
        WDATA => m_axi_data39_WDATA,
        WSTRB => m_axi_data39_WSTRB,
        WLAST => m_axi_data39_WLAST,
        WID => m_axi_data39_WID,
        WUSER => m_axi_data39_WUSER,
        ARVALID => m_axi_data39_ARVALID,
        ARREADY => m_axi_data39_ARREADY,
        ARADDR => m_axi_data39_ARADDR,
        ARID => m_axi_data39_ARID,
        ARLEN => m_axi_data39_ARLEN,
        ARSIZE => m_axi_data39_ARSIZE,
        ARBURST => m_axi_data39_ARBURST,
        ARLOCK => m_axi_data39_ARLOCK,
        ARCACHE => m_axi_data39_ARCACHE,
        ARPROT => m_axi_data39_ARPROT,
        ARQOS => m_axi_data39_ARQOS,
        ARREGION => m_axi_data39_ARREGION,
        ARUSER => m_axi_data39_ARUSER,
        RVALID => m_axi_data39_RVALID,
        RREADY => m_axi_data39_RREADY,
        RDATA => m_axi_data39_RDATA,
        RLAST => m_axi_data39_RLAST,
        RID => m_axi_data39_RID,
        RUSER => m_axi_data39_RUSER,
        RRESP => m_axi_data39_RRESP,
        BVALID => m_axi_data39_BVALID,
        BREADY => m_axi_data39_BREADY,
        BRESP => m_axi_data39_BRESP,
        BID => m_axi_data39_BID,
        BUSER => m_axi_data39_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_U0_m_axi_weights_ARVALID,
        I_ARREADY => data39_ARREADY,
        I_ARADDR => inter_layer_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_U0_m_axi_weights_ARREGION,
        I_RVALID => data39_RVALID,
        I_RREADY => inter_layer_U0_m_axi_weights_RREADY,
        I_RDATA => data39_RDATA,
        I_RID => data39_RID,
        I_RUSER => data39_RUSER,
        I_RRESP => data39_RRESP,
        I_RLAST => data39_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data39_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data39_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data39_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data39_BRESP,
        I_BID => data39_BID,
        I_BUSER => data39_BUSER);

    moblie_net_data40_m_axi_U : component moblie_net_data40_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA40_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA40_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA40_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA40_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA40_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA40_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA40_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA40_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA40_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA40_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA40_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data40_AWVALID,
        AWREADY => m_axi_data40_AWREADY,
        AWADDR => m_axi_data40_AWADDR,
        AWID => m_axi_data40_AWID,
        AWLEN => m_axi_data40_AWLEN,
        AWSIZE => m_axi_data40_AWSIZE,
        AWBURST => m_axi_data40_AWBURST,
        AWLOCK => m_axi_data40_AWLOCK,
        AWCACHE => m_axi_data40_AWCACHE,
        AWPROT => m_axi_data40_AWPROT,
        AWQOS => m_axi_data40_AWQOS,
        AWREGION => m_axi_data40_AWREGION,
        AWUSER => m_axi_data40_AWUSER,
        WVALID => m_axi_data40_WVALID,
        WREADY => m_axi_data40_WREADY,
        WDATA => m_axi_data40_WDATA,
        WSTRB => m_axi_data40_WSTRB,
        WLAST => m_axi_data40_WLAST,
        WID => m_axi_data40_WID,
        WUSER => m_axi_data40_WUSER,
        ARVALID => m_axi_data40_ARVALID,
        ARREADY => m_axi_data40_ARREADY,
        ARADDR => m_axi_data40_ARADDR,
        ARID => m_axi_data40_ARID,
        ARLEN => m_axi_data40_ARLEN,
        ARSIZE => m_axi_data40_ARSIZE,
        ARBURST => m_axi_data40_ARBURST,
        ARLOCK => m_axi_data40_ARLOCK,
        ARCACHE => m_axi_data40_ARCACHE,
        ARPROT => m_axi_data40_ARPROT,
        ARQOS => m_axi_data40_ARQOS,
        ARREGION => m_axi_data40_ARREGION,
        ARUSER => m_axi_data40_ARUSER,
        RVALID => m_axi_data40_RVALID,
        RREADY => m_axi_data40_RREADY,
        RDATA => m_axi_data40_RDATA,
        RLAST => m_axi_data40_RLAST,
        RID => m_axi_data40_RID,
        RUSER => m_axi_data40_RUSER,
        RRESP => m_axi_data40_RRESP,
        BVALID => m_axi_data40_BVALID,
        BREADY => m_axi_data40_BREADY,
        BRESP => m_axi_data40_BRESP,
        BID => m_axi_data40_BID,
        BUSER => m_axi_data40_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_U0_m_axi_betas_ARVALID,
        I_ARREADY => data40_ARREADY,
        I_ARADDR => inter_layer_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_U0_m_axi_betas_ARREGION,
        I_RVALID => data40_RVALID,
        I_RREADY => inter_layer_U0_m_axi_betas_RREADY,
        I_RDATA => data40_RDATA,
        I_RID => data40_RID,
        I_RUSER => data40_RUSER,
        I_RRESP => data40_RRESP,
        I_RLAST => data40_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data40_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data40_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data40_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data40_BRESP,
        I_BID => data40_BID,
        I_BUSER => data40_BUSER);

    moblie_net_data20_m_axi_U : component moblie_net_data20_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA20_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA20_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA20_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA20_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA20_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA20_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA20_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA20_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA20_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA20_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA20_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data20_AWVALID,
        AWREADY => m_axi_data20_AWREADY,
        AWADDR => m_axi_data20_AWADDR,
        AWID => m_axi_data20_AWID,
        AWLEN => m_axi_data20_AWLEN,
        AWSIZE => m_axi_data20_AWSIZE,
        AWBURST => m_axi_data20_AWBURST,
        AWLOCK => m_axi_data20_AWLOCK,
        AWCACHE => m_axi_data20_AWCACHE,
        AWPROT => m_axi_data20_AWPROT,
        AWQOS => m_axi_data20_AWQOS,
        AWREGION => m_axi_data20_AWREGION,
        AWUSER => m_axi_data20_AWUSER,
        WVALID => m_axi_data20_WVALID,
        WREADY => m_axi_data20_WREADY,
        WDATA => m_axi_data20_WDATA,
        WSTRB => m_axi_data20_WSTRB,
        WLAST => m_axi_data20_WLAST,
        WID => m_axi_data20_WID,
        WUSER => m_axi_data20_WUSER,
        ARVALID => m_axi_data20_ARVALID,
        ARREADY => m_axi_data20_ARREADY,
        ARADDR => m_axi_data20_ARADDR,
        ARID => m_axi_data20_ARID,
        ARLEN => m_axi_data20_ARLEN,
        ARSIZE => m_axi_data20_ARSIZE,
        ARBURST => m_axi_data20_ARBURST,
        ARLOCK => m_axi_data20_ARLOCK,
        ARCACHE => m_axi_data20_ARCACHE,
        ARPROT => m_axi_data20_ARPROT,
        ARQOS => m_axi_data20_ARQOS,
        ARREGION => m_axi_data20_ARREGION,
        ARUSER => m_axi_data20_ARUSER,
        RVALID => m_axi_data20_RVALID,
        RREADY => m_axi_data20_RREADY,
        RDATA => m_axi_data20_RDATA,
        RLAST => m_axi_data20_RLAST,
        RID => m_axi_data20_RID,
        RUSER => m_axi_data20_RUSER,
        RRESP => m_axi_data20_RRESP,
        BVALID => m_axi_data20_BVALID,
        BREADY => m_axi_data20_BREADY,
        BRESP => m_axi_data20_BRESP,
        BID => m_axi_data20_BID,
        BUSER => m_axi_data20_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data20_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data20_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data20_RDATA,
        I_RID => data20_RID,
        I_RUSER => data20_RUSER,
        I_RRESP => data20_RRESP,
        I_RLAST => data20_RLAST,
        I_AWVALID => inter_layer_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data20_AWREADY,
        I_AWADDR => inter_layer_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_U0_m_axi_outputs_WVALID,
        I_WREADY => data20_WREADY,
        I_WDATA => inter_layer_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_U0_m_axi_outputs_WSTRB,
        I_BVALID => data20_BVALID,
        I_BREADY => inter_layer_U0_m_axi_outputs_BREADY,
        I_BRESP => data20_BRESP,
        I_BID => data20_BID,
        I_BUSER => data20_BUSER);

    moblie_net_data6_m_axi_U : component moblie_net_data6_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA6_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA6_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA6_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA6_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA6_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA6_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA6_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA6_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA6_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA6_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA6_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data6_AWVALID,
        AWREADY => m_axi_data6_AWREADY,
        AWADDR => m_axi_data6_AWADDR,
        AWID => m_axi_data6_AWID,
        AWLEN => m_axi_data6_AWLEN,
        AWSIZE => m_axi_data6_AWSIZE,
        AWBURST => m_axi_data6_AWBURST,
        AWLOCK => m_axi_data6_AWLOCK,
        AWCACHE => m_axi_data6_AWCACHE,
        AWPROT => m_axi_data6_AWPROT,
        AWQOS => m_axi_data6_AWQOS,
        AWREGION => m_axi_data6_AWREGION,
        AWUSER => m_axi_data6_AWUSER,
        WVALID => m_axi_data6_WVALID,
        WREADY => m_axi_data6_WREADY,
        WDATA => m_axi_data6_WDATA,
        WSTRB => m_axi_data6_WSTRB,
        WLAST => m_axi_data6_WLAST,
        WID => m_axi_data6_WID,
        WUSER => m_axi_data6_WUSER,
        ARVALID => m_axi_data6_ARVALID,
        ARREADY => m_axi_data6_ARREADY,
        ARADDR => m_axi_data6_ARADDR,
        ARID => m_axi_data6_ARID,
        ARLEN => m_axi_data6_ARLEN,
        ARSIZE => m_axi_data6_ARSIZE,
        ARBURST => m_axi_data6_ARBURST,
        ARLOCK => m_axi_data6_ARLOCK,
        ARCACHE => m_axi_data6_ARCACHE,
        ARPROT => m_axi_data6_ARPROT,
        ARQOS => m_axi_data6_ARQOS,
        ARREGION => m_axi_data6_ARREGION,
        ARUSER => m_axi_data6_ARUSER,
        RVALID => m_axi_data6_RVALID,
        RREADY => m_axi_data6_RREADY,
        RDATA => m_axi_data6_RDATA,
        RLAST => m_axi_data6_RLAST,
        RID => m_axi_data6_RID,
        RUSER => m_axi_data6_RUSER,
        RRESP => m_axi_data6_RRESP,
        BVALID => m_axi_data6_BVALID,
        BREADY => m_axi_data6_BREADY,
        BRESP => m_axi_data6_BRESP,
        BID => m_axi_data6_BID,
        BUSER => m_axi_data6_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_10_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data6_ARREADY,
        I_ARADDR => inter_layer_10_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_10_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_10_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_10_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_10_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_10_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_10_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_10_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_10_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_10_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_10_U0_m_axi_inputs_ARREGION,
        I_RVALID => data6_RVALID,
        I_RREADY => inter_layer_10_U0_m_axi_inputs_RREADY,
        I_RDATA => data6_RDATA,
        I_RID => data6_RID,
        I_RUSER => data6_RUSER,
        I_RRESP => data6_RRESP,
        I_RLAST => data6_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data6_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data6_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data6_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data6_BRESP,
        I_BID => data6_BID,
        I_BUSER => data6_BUSER);

    moblie_net_data41_m_axi_U : component moblie_net_data41_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA41_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA41_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA41_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA41_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA41_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA41_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA41_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA41_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA41_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA41_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA41_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data41_AWVALID,
        AWREADY => m_axi_data41_AWREADY,
        AWADDR => m_axi_data41_AWADDR,
        AWID => m_axi_data41_AWID,
        AWLEN => m_axi_data41_AWLEN,
        AWSIZE => m_axi_data41_AWSIZE,
        AWBURST => m_axi_data41_AWBURST,
        AWLOCK => m_axi_data41_AWLOCK,
        AWCACHE => m_axi_data41_AWCACHE,
        AWPROT => m_axi_data41_AWPROT,
        AWQOS => m_axi_data41_AWQOS,
        AWREGION => m_axi_data41_AWREGION,
        AWUSER => m_axi_data41_AWUSER,
        WVALID => m_axi_data41_WVALID,
        WREADY => m_axi_data41_WREADY,
        WDATA => m_axi_data41_WDATA,
        WSTRB => m_axi_data41_WSTRB,
        WLAST => m_axi_data41_WLAST,
        WID => m_axi_data41_WID,
        WUSER => m_axi_data41_WUSER,
        ARVALID => m_axi_data41_ARVALID,
        ARREADY => m_axi_data41_ARREADY,
        ARADDR => m_axi_data41_ARADDR,
        ARID => m_axi_data41_ARID,
        ARLEN => m_axi_data41_ARLEN,
        ARSIZE => m_axi_data41_ARSIZE,
        ARBURST => m_axi_data41_ARBURST,
        ARLOCK => m_axi_data41_ARLOCK,
        ARCACHE => m_axi_data41_ARCACHE,
        ARPROT => m_axi_data41_ARPROT,
        ARQOS => m_axi_data41_ARQOS,
        ARREGION => m_axi_data41_ARREGION,
        ARUSER => m_axi_data41_ARUSER,
        RVALID => m_axi_data41_RVALID,
        RREADY => m_axi_data41_RREADY,
        RDATA => m_axi_data41_RDATA,
        RLAST => m_axi_data41_RLAST,
        RID => m_axi_data41_RID,
        RUSER => m_axi_data41_RUSER,
        RRESP => m_axi_data41_RRESP,
        BVALID => m_axi_data41_BVALID,
        BREADY => m_axi_data41_BREADY,
        BRESP => m_axi_data41_BRESP,
        BID => m_axi_data41_BID,
        BUSER => m_axi_data41_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_10_U0_m_axi_weights_ARVALID,
        I_ARREADY => data41_ARREADY,
        I_ARADDR => inter_layer_10_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_10_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_10_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_10_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_10_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_10_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_10_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_10_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_10_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_10_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_10_U0_m_axi_weights_ARREGION,
        I_RVALID => data41_RVALID,
        I_RREADY => inter_layer_10_U0_m_axi_weights_RREADY,
        I_RDATA => data41_RDATA,
        I_RID => data41_RID,
        I_RUSER => data41_RUSER,
        I_RRESP => data41_RRESP,
        I_RLAST => data41_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data41_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data41_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data41_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data41_BRESP,
        I_BID => data41_BID,
        I_BUSER => data41_BUSER);

    moblie_net_data42_m_axi_U : component moblie_net_data42_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA42_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA42_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA42_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA42_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA42_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA42_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA42_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA42_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA42_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA42_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA42_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data42_AWVALID,
        AWREADY => m_axi_data42_AWREADY,
        AWADDR => m_axi_data42_AWADDR,
        AWID => m_axi_data42_AWID,
        AWLEN => m_axi_data42_AWLEN,
        AWSIZE => m_axi_data42_AWSIZE,
        AWBURST => m_axi_data42_AWBURST,
        AWLOCK => m_axi_data42_AWLOCK,
        AWCACHE => m_axi_data42_AWCACHE,
        AWPROT => m_axi_data42_AWPROT,
        AWQOS => m_axi_data42_AWQOS,
        AWREGION => m_axi_data42_AWREGION,
        AWUSER => m_axi_data42_AWUSER,
        WVALID => m_axi_data42_WVALID,
        WREADY => m_axi_data42_WREADY,
        WDATA => m_axi_data42_WDATA,
        WSTRB => m_axi_data42_WSTRB,
        WLAST => m_axi_data42_WLAST,
        WID => m_axi_data42_WID,
        WUSER => m_axi_data42_WUSER,
        ARVALID => m_axi_data42_ARVALID,
        ARREADY => m_axi_data42_ARREADY,
        ARADDR => m_axi_data42_ARADDR,
        ARID => m_axi_data42_ARID,
        ARLEN => m_axi_data42_ARLEN,
        ARSIZE => m_axi_data42_ARSIZE,
        ARBURST => m_axi_data42_ARBURST,
        ARLOCK => m_axi_data42_ARLOCK,
        ARCACHE => m_axi_data42_ARCACHE,
        ARPROT => m_axi_data42_ARPROT,
        ARQOS => m_axi_data42_ARQOS,
        ARREGION => m_axi_data42_ARREGION,
        ARUSER => m_axi_data42_ARUSER,
        RVALID => m_axi_data42_RVALID,
        RREADY => m_axi_data42_RREADY,
        RDATA => m_axi_data42_RDATA,
        RLAST => m_axi_data42_RLAST,
        RID => m_axi_data42_RID,
        RUSER => m_axi_data42_RUSER,
        RRESP => m_axi_data42_RRESP,
        BVALID => m_axi_data42_BVALID,
        BREADY => m_axi_data42_BREADY,
        BRESP => m_axi_data42_BRESP,
        BID => m_axi_data42_BID,
        BUSER => m_axi_data42_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_10_U0_m_axi_betas_ARVALID,
        I_ARREADY => data42_ARREADY,
        I_ARADDR => inter_layer_10_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_10_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_10_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_10_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_10_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_10_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_10_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_10_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_10_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_10_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_10_U0_m_axi_betas_ARREGION,
        I_RVALID => data42_RVALID,
        I_RREADY => inter_layer_10_U0_m_axi_betas_RREADY,
        I_RDATA => data42_RDATA,
        I_RID => data42_RID,
        I_RUSER => data42_RUSER,
        I_RRESP => data42_RRESP,
        I_RLAST => data42_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data42_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data42_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data42_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data42_BRESP,
        I_BID => data42_BID,
        I_BUSER => data42_BUSER);

    moblie_net_data21_m_axi_U : component moblie_net_data21_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA21_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA21_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA21_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA21_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA21_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA21_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA21_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA21_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA21_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA21_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA21_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data21_AWVALID,
        AWREADY => m_axi_data21_AWREADY,
        AWADDR => m_axi_data21_AWADDR,
        AWID => m_axi_data21_AWID,
        AWLEN => m_axi_data21_AWLEN,
        AWSIZE => m_axi_data21_AWSIZE,
        AWBURST => m_axi_data21_AWBURST,
        AWLOCK => m_axi_data21_AWLOCK,
        AWCACHE => m_axi_data21_AWCACHE,
        AWPROT => m_axi_data21_AWPROT,
        AWQOS => m_axi_data21_AWQOS,
        AWREGION => m_axi_data21_AWREGION,
        AWUSER => m_axi_data21_AWUSER,
        WVALID => m_axi_data21_WVALID,
        WREADY => m_axi_data21_WREADY,
        WDATA => m_axi_data21_WDATA,
        WSTRB => m_axi_data21_WSTRB,
        WLAST => m_axi_data21_WLAST,
        WID => m_axi_data21_WID,
        WUSER => m_axi_data21_WUSER,
        ARVALID => m_axi_data21_ARVALID,
        ARREADY => m_axi_data21_ARREADY,
        ARADDR => m_axi_data21_ARADDR,
        ARID => m_axi_data21_ARID,
        ARLEN => m_axi_data21_ARLEN,
        ARSIZE => m_axi_data21_ARSIZE,
        ARBURST => m_axi_data21_ARBURST,
        ARLOCK => m_axi_data21_ARLOCK,
        ARCACHE => m_axi_data21_ARCACHE,
        ARPROT => m_axi_data21_ARPROT,
        ARQOS => m_axi_data21_ARQOS,
        ARREGION => m_axi_data21_ARREGION,
        ARUSER => m_axi_data21_ARUSER,
        RVALID => m_axi_data21_RVALID,
        RREADY => m_axi_data21_RREADY,
        RDATA => m_axi_data21_RDATA,
        RLAST => m_axi_data21_RLAST,
        RID => m_axi_data21_RID,
        RUSER => m_axi_data21_RUSER,
        RRESP => m_axi_data21_RRESP,
        BVALID => m_axi_data21_BVALID,
        BREADY => m_axi_data21_BREADY,
        BRESP => m_axi_data21_BRESP,
        BID => m_axi_data21_BID,
        BUSER => m_axi_data21_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data21_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data21_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data21_RDATA,
        I_RID => data21_RID,
        I_RUSER => data21_RUSER,
        I_RRESP => data21_RRESP,
        I_RLAST => data21_RLAST,
        I_AWVALID => inter_layer_10_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data21_AWREADY,
        I_AWADDR => inter_layer_10_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_10_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_10_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_10_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_10_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_10_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_10_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_10_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_10_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_10_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_10_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_10_U0_m_axi_outputs_WVALID,
        I_WREADY => data21_WREADY,
        I_WDATA => inter_layer_10_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_10_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_10_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_10_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_10_U0_m_axi_outputs_WSTRB,
        I_BVALID => data21_BVALID,
        I_BREADY => inter_layer_10_U0_m_axi_outputs_BREADY,
        I_BRESP => data21_BRESP,
        I_BID => data21_BID,
        I_BUSER => data21_BUSER);

    moblie_net_data7_m_axi_U : component moblie_net_data7_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA7_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA7_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA7_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA7_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA7_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA7_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA7_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA7_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA7_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA7_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA7_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data7_AWVALID,
        AWREADY => m_axi_data7_AWREADY,
        AWADDR => m_axi_data7_AWADDR,
        AWID => m_axi_data7_AWID,
        AWLEN => m_axi_data7_AWLEN,
        AWSIZE => m_axi_data7_AWSIZE,
        AWBURST => m_axi_data7_AWBURST,
        AWLOCK => m_axi_data7_AWLOCK,
        AWCACHE => m_axi_data7_AWCACHE,
        AWPROT => m_axi_data7_AWPROT,
        AWQOS => m_axi_data7_AWQOS,
        AWREGION => m_axi_data7_AWREGION,
        AWUSER => m_axi_data7_AWUSER,
        WVALID => m_axi_data7_WVALID,
        WREADY => m_axi_data7_WREADY,
        WDATA => m_axi_data7_WDATA,
        WSTRB => m_axi_data7_WSTRB,
        WLAST => m_axi_data7_WLAST,
        WID => m_axi_data7_WID,
        WUSER => m_axi_data7_WUSER,
        ARVALID => m_axi_data7_ARVALID,
        ARREADY => m_axi_data7_ARREADY,
        ARADDR => m_axi_data7_ARADDR,
        ARID => m_axi_data7_ARID,
        ARLEN => m_axi_data7_ARLEN,
        ARSIZE => m_axi_data7_ARSIZE,
        ARBURST => m_axi_data7_ARBURST,
        ARLOCK => m_axi_data7_ARLOCK,
        ARCACHE => m_axi_data7_ARCACHE,
        ARPROT => m_axi_data7_ARPROT,
        ARQOS => m_axi_data7_ARQOS,
        ARREGION => m_axi_data7_ARREGION,
        ARUSER => m_axi_data7_ARUSER,
        RVALID => m_axi_data7_RVALID,
        RREADY => m_axi_data7_RREADY,
        RDATA => m_axi_data7_RDATA,
        RLAST => m_axi_data7_RLAST,
        RID => m_axi_data7_RID,
        RUSER => m_axi_data7_RUSER,
        RRESP => m_axi_data7_RRESP,
        BVALID => m_axi_data7_BVALID,
        BREADY => m_axi_data7_BREADY,
        BRESP => m_axi_data7_BRESP,
        BID => m_axi_data7_BID,
        BUSER => m_axi_data7_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_4_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data7_ARREADY,
        I_ARADDR => inter_layer_4_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_4_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_4_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_4_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_4_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_4_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_4_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_4_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_4_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_4_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_4_U0_m_axi_inputs_ARREGION,
        I_RVALID => data7_RVALID,
        I_RREADY => inter_layer_4_U0_m_axi_inputs_RREADY,
        I_RDATA => data7_RDATA,
        I_RID => data7_RID,
        I_RUSER => data7_RUSER,
        I_RRESP => data7_RRESP,
        I_RLAST => data7_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data7_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data7_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data7_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data7_BRESP,
        I_BID => data7_BID,
        I_BUSER => data7_BUSER);

    moblie_net_data43_m_axi_U : component moblie_net_data43_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA43_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA43_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA43_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA43_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA43_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA43_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA43_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA43_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA43_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA43_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA43_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data43_AWVALID,
        AWREADY => m_axi_data43_AWREADY,
        AWADDR => m_axi_data43_AWADDR,
        AWID => m_axi_data43_AWID,
        AWLEN => m_axi_data43_AWLEN,
        AWSIZE => m_axi_data43_AWSIZE,
        AWBURST => m_axi_data43_AWBURST,
        AWLOCK => m_axi_data43_AWLOCK,
        AWCACHE => m_axi_data43_AWCACHE,
        AWPROT => m_axi_data43_AWPROT,
        AWQOS => m_axi_data43_AWQOS,
        AWREGION => m_axi_data43_AWREGION,
        AWUSER => m_axi_data43_AWUSER,
        WVALID => m_axi_data43_WVALID,
        WREADY => m_axi_data43_WREADY,
        WDATA => m_axi_data43_WDATA,
        WSTRB => m_axi_data43_WSTRB,
        WLAST => m_axi_data43_WLAST,
        WID => m_axi_data43_WID,
        WUSER => m_axi_data43_WUSER,
        ARVALID => m_axi_data43_ARVALID,
        ARREADY => m_axi_data43_ARREADY,
        ARADDR => m_axi_data43_ARADDR,
        ARID => m_axi_data43_ARID,
        ARLEN => m_axi_data43_ARLEN,
        ARSIZE => m_axi_data43_ARSIZE,
        ARBURST => m_axi_data43_ARBURST,
        ARLOCK => m_axi_data43_ARLOCK,
        ARCACHE => m_axi_data43_ARCACHE,
        ARPROT => m_axi_data43_ARPROT,
        ARQOS => m_axi_data43_ARQOS,
        ARREGION => m_axi_data43_ARREGION,
        ARUSER => m_axi_data43_ARUSER,
        RVALID => m_axi_data43_RVALID,
        RREADY => m_axi_data43_RREADY,
        RDATA => m_axi_data43_RDATA,
        RLAST => m_axi_data43_RLAST,
        RID => m_axi_data43_RID,
        RUSER => m_axi_data43_RUSER,
        RRESP => m_axi_data43_RRESP,
        BVALID => m_axi_data43_BVALID,
        BREADY => m_axi_data43_BREADY,
        BRESP => m_axi_data43_BRESP,
        BID => m_axi_data43_BID,
        BUSER => m_axi_data43_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_4_U0_m_axi_weights_ARVALID,
        I_ARREADY => data43_ARREADY,
        I_ARADDR => inter_layer_4_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_4_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_4_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_4_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_4_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_4_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_4_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_4_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_4_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_4_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_4_U0_m_axi_weights_ARREGION,
        I_RVALID => data43_RVALID,
        I_RREADY => inter_layer_4_U0_m_axi_weights_RREADY,
        I_RDATA => data43_RDATA,
        I_RID => data43_RID,
        I_RUSER => data43_RUSER,
        I_RRESP => data43_RRESP,
        I_RLAST => data43_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data43_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data43_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data43_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data43_BRESP,
        I_BID => data43_BID,
        I_BUSER => data43_BUSER);

    moblie_net_data44_m_axi_U : component moblie_net_data44_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA44_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA44_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA44_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA44_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA44_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA44_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA44_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA44_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA44_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA44_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA44_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data44_AWVALID,
        AWREADY => m_axi_data44_AWREADY,
        AWADDR => m_axi_data44_AWADDR,
        AWID => m_axi_data44_AWID,
        AWLEN => m_axi_data44_AWLEN,
        AWSIZE => m_axi_data44_AWSIZE,
        AWBURST => m_axi_data44_AWBURST,
        AWLOCK => m_axi_data44_AWLOCK,
        AWCACHE => m_axi_data44_AWCACHE,
        AWPROT => m_axi_data44_AWPROT,
        AWQOS => m_axi_data44_AWQOS,
        AWREGION => m_axi_data44_AWREGION,
        AWUSER => m_axi_data44_AWUSER,
        WVALID => m_axi_data44_WVALID,
        WREADY => m_axi_data44_WREADY,
        WDATA => m_axi_data44_WDATA,
        WSTRB => m_axi_data44_WSTRB,
        WLAST => m_axi_data44_WLAST,
        WID => m_axi_data44_WID,
        WUSER => m_axi_data44_WUSER,
        ARVALID => m_axi_data44_ARVALID,
        ARREADY => m_axi_data44_ARREADY,
        ARADDR => m_axi_data44_ARADDR,
        ARID => m_axi_data44_ARID,
        ARLEN => m_axi_data44_ARLEN,
        ARSIZE => m_axi_data44_ARSIZE,
        ARBURST => m_axi_data44_ARBURST,
        ARLOCK => m_axi_data44_ARLOCK,
        ARCACHE => m_axi_data44_ARCACHE,
        ARPROT => m_axi_data44_ARPROT,
        ARQOS => m_axi_data44_ARQOS,
        ARREGION => m_axi_data44_ARREGION,
        ARUSER => m_axi_data44_ARUSER,
        RVALID => m_axi_data44_RVALID,
        RREADY => m_axi_data44_RREADY,
        RDATA => m_axi_data44_RDATA,
        RLAST => m_axi_data44_RLAST,
        RID => m_axi_data44_RID,
        RUSER => m_axi_data44_RUSER,
        RRESP => m_axi_data44_RRESP,
        BVALID => m_axi_data44_BVALID,
        BREADY => m_axi_data44_BREADY,
        BRESP => m_axi_data44_BRESP,
        BID => m_axi_data44_BID,
        BUSER => m_axi_data44_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_4_U0_m_axi_betas_ARVALID,
        I_ARREADY => data44_ARREADY,
        I_ARADDR => inter_layer_4_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_4_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_4_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_4_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_4_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_4_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_4_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_4_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_4_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_4_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_4_U0_m_axi_betas_ARREGION,
        I_RVALID => data44_RVALID,
        I_RREADY => inter_layer_4_U0_m_axi_betas_RREADY,
        I_RDATA => data44_RDATA,
        I_RID => data44_RID,
        I_RUSER => data44_RUSER,
        I_RRESP => data44_RRESP,
        I_RLAST => data44_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data44_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data44_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data44_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data44_BRESP,
        I_BID => data44_BID,
        I_BUSER => data44_BUSER);

    moblie_net_data22_m_axi_U : component moblie_net_data22_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA22_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA22_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA22_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA22_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA22_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA22_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA22_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA22_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA22_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA22_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA22_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data22_AWVALID,
        AWREADY => m_axi_data22_AWREADY,
        AWADDR => m_axi_data22_AWADDR,
        AWID => m_axi_data22_AWID,
        AWLEN => m_axi_data22_AWLEN,
        AWSIZE => m_axi_data22_AWSIZE,
        AWBURST => m_axi_data22_AWBURST,
        AWLOCK => m_axi_data22_AWLOCK,
        AWCACHE => m_axi_data22_AWCACHE,
        AWPROT => m_axi_data22_AWPROT,
        AWQOS => m_axi_data22_AWQOS,
        AWREGION => m_axi_data22_AWREGION,
        AWUSER => m_axi_data22_AWUSER,
        WVALID => m_axi_data22_WVALID,
        WREADY => m_axi_data22_WREADY,
        WDATA => m_axi_data22_WDATA,
        WSTRB => m_axi_data22_WSTRB,
        WLAST => m_axi_data22_WLAST,
        WID => m_axi_data22_WID,
        WUSER => m_axi_data22_WUSER,
        ARVALID => m_axi_data22_ARVALID,
        ARREADY => m_axi_data22_ARREADY,
        ARADDR => m_axi_data22_ARADDR,
        ARID => m_axi_data22_ARID,
        ARLEN => m_axi_data22_ARLEN,
        ARSIZE => m_axi_data22_ARSIZE,
        ARBURST => m_axi_data22_ARBURST,
        ARLOCK => m_axi_data22_ARLOCK,
        ARCACHE => m_axi_data22_ARCACHE,
        ARPROT => m_axi_data22_ARPROT,
        ARQOS => m_axi_data22_ARQOS,
        ARREGION => m_axi_data22_ARREGION,
        ARUSER => m_axi_data22_ARUSER,
        RVALID => m_axi_data22_RVALID,
        RREADY => m_axi_data22_RREADY,
        RDATA => m_axi_data22_RDATA,
        RLAST => m_axi_data22_RLAST,
        RID => m_axi_data22_RID,
        RUSER => m_axi_data22_RUSER,
        RRESP => m_axi_data22_RRESP,
        BVALID => m_axi_data22_BVALID,
        BREADY => m_axi_data22_BREADY,
        BRESP => m_axi_data22_BRESP,
        BID => m_axi_data22_BID,
        BUSER => m_axi_data22_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data22_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data22_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data22_RDATA,
        I_RID => data22_RID,
        I_RUSER => data22_RUSER,
        I_RRESP => data22_RRESP,
        I_RLAST => data22_RLAST,
        I_AWVALID => inter_layer_4_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data22_AWREADY,
        I_AWADDR => inter_layer_4_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_4_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_4_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_4_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_4_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_4_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_4_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_4_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_4_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_4_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_4_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_4_U0_m_axi_outputs_WVALID,
        I_WREADY => data22_WREADY,
        I_WDATA => inter_layer_4_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_4_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_4_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_4_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_4_U0_m_axi_outputs_WSTRB,
        I_BVALID => data22_BVALID,
        I_BREADY => inter_layer_4_U0_m_axi_outputs_BREADY,
        I_BRESP => data22_BRESP,
        I_BID => data22_BID,
        I_BUSER => data22_BUSER);

    moblie_net_data8_m_axi_U : component moblie_net_data8_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA8_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA8_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA8_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA8_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA8_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA8_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA8_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA8_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA8_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA8_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA8_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data8_AWVALID,
        AWREADY => m_axi_data8_AWREADY,
        AWADDR => m_axi_data8_AWADDR,
        AWID => m_axi_data8_AWID,
        AWLEN => m_axi_data8_AWLEN,
        AWSIZE => m_axi_data8_AWSIZE,
        AWBURST => m_axi_data8_AWBURST,
        AWLOCK => m_axi_data8_AWLOCK,
        AWCACHE => m_axi_data8_AWCACHE,
        AWPROT => m_axi_data8_AWPROT,
        AWQOS => m_axi_data8_AWQOS,
        AWREGION => m_axi_data8_AWREGION,
        AWUSER => m_axi_data8_AWUSER,
        WVALID => m_axi_data8_WVALID,
        WREADY => m_axi_data8_WREADY,
        WDATA => m_axi_data8_WDATA,
        WSTRB => m_axi_data8_WSTRB,
        WLAST => m_axi_data8_WLAST,
        WID => m_axi_data8_WID,
        WUSER => m_axi_data8_WUSER,
        ARVALID => m_axi_data8_ARVALID,
        ARREADY => m_axi_data8_ARREADY,
        ARADDR => m_axi_data8_ARADDR,
        ARID => m_axi_data8_ARID,
        ARLEN => m_axi_data8_ARLEN,
        ARSIZE => m_axi_data8_ARSIZE,
        ARBURST => m_axi_data8_ARBURST,
        ARLOCK => m_axi_data8_ARLOCK,
        ARCACHE => m_axi_data8_ARCACHE,
        ARPROT => m_axi_data8_ARPROT,
        ARQOS => m_axi_data8_ARQOS,
        ARREGION => m_axi_data8_ARREGION,
        ARUSER => m_axi_data8_ARUSER,
        RVALID => m_axi_data8_RVALID,
        RREADY => m_axi_data8_RREADY,
        RDATA => m_axi_data8_RDATA,
        RLAST => m_axi_data8_RLAST,
        RID => m_axi_data8_RID,
        RUSER => m_axi_data8_RUSER,
        RRESP => m_axi_data8_RRESP,
        BVALID => m_axi_data8_BVALID,
        BREADY => m_axi_data8_BREADY,
        BRESP => m_axi_data8_BRESP,
        BID => m_axi_data8_BID,
        BUSER => m_axi_data8_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_8_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data8_ARREADY,
        I_ARADDR => inter_layer_8_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_8_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_8_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_8_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_8_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_8_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_8_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_8_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_8_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_8_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_8_U0_m_axi_inputs_ARREGION,
        I_RVALID => data8_RVALID,
        I_RREADY => inter_layer_8_U0_m_axi_inputs_RREADY,
        I_RDATA => data8_RDATA,
        I_RID => data8_RID,
        I_RUSER => data8_RUSER,
        I_RRESP => data8_RRESP,
        I_RLAST => data8_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data8_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data8_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data8_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data8_BRESP,
        I_BID => data8_BID,
        I_BUSER => data8_BUSER);

    moblie_net_data45_m_axi_U : component moblie_net_data45_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA45_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA45_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA45_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA45_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA45_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA45_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA45_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA45_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA45_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA45_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA45_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data45_AWVALID,
        AWREADY => m_axi_data45_AWREADY,
        AWADDR => m_axi_data45_AWADDR,
        AWID => m_axi_data45_AWID,
        AWLEN => m_axi_data45_AWLEN,
        AWSIZE => m_axi_data45_AWSIZE,
        AWBURST => m_axi_data45_AWBURST,
        AWLOCK => m_axi_data45_AWLOCK,
        AWCACHE => m_axi_data45_AWCACHE,
        AWPROT => m_axi_data45_AWPROT,
        AWQOS => m_axi_data45_AWQOS,
        AWREGION => m_axi_data45_AWREGION,
        AWUSER => m_axi_data45_AWUSER,
        WVALID => m_axi_data45_WVALID,
        WREADY => m_axi_data45_WREADY,
        WDATA => m_axi_data45_WDATA,
        WSTRB => m_axi_data45_WSTRB,
        WLAST => m_axi_data45_WLAST,
        WID => m_axi_data45_WID,
        WUSER => m_axi_data45_WUSER,
        ARVALID => m_axi_data45_ARVALID,
        ARREADY => m_axi_data45_ARREADY,
        ARADDR => m_axi_data45_ARADDR,
        ARID => m_axi_data45_ARID,
        ARLEN => m_axi_data45_ARLEN,
        ARSIZE => m_axi_data45_ARSIZE,
        ARBURST => m_axi_data45_ARBURST,
        ARLOCK => m_axi_data45_ARLOCK,
        ARCACHE => m_axi_data45_ARCACHE,
        ARPROT => m_axi_data45_ARPROT,
        ARQOS => m_axi_data45_ARQOS,
        ARREGION => m_axi_data45_ARREGION,
        ARUSER => m_axi_data45_ARUSER,
        RVALID => m_axi_data45_RVALID,
        RREADY => m_axi_data45_RREADY,
        RDATA => m_axi_data45_RDATA,
        RLAST => m_axi_data45_RLAST,
        RID => m_axi_data45_RID,
        RUSER => m_axi_data45_RUSER,
        RRESP => m_axi_data45_RRESP,
        BVALID => m_axi_data45_BVALID,
        BREADY => m_axi_data45_BREADY,
        BRESP => m_axi_data45_BRESP,
        BID => m_axi_data45_BID,
        BUSER => m_axi_data45_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_8_U0_m_axi_weights_ARVALID,
        I_ARREADY => data45_ARREADY,
        I_ARADDR => inter_layer_8_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_8_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_8_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_8_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_8_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_8_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_8_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_8_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_8_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_8_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_8_U0_m_axi_weights_ARREGION,
        I_RVALID => data45_RVALID,
        I_RREADY => inter_layer_8_U0_m_axi_weights_RREADY,
        I_RDATA => data45_RDATA,
        I_RID => data45_RID,
        I_RUSER => data45_RUSER,
        I_RRESP => data45_RRESP,
        I_RLAST => data45_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data45_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data45_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data45_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data45_BRESP,
        I_BID => data45_BID,
        I_BUSER => data45_BUSER);

    moblie_net_data46_m_axi_U : component moblie_net_data46_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA46_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA46_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA46_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA46_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA46_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA46_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA46_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA46_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA46_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA46_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA46_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data46_AWVALID,
        AWREADY => m_axi_data46_AWREADY,
        AWADDR => m_axi_data46_AWADDR,
        AWID => m_axi_data46_AWID,
        AWLEN => m_axi_data46_AWLEN,
        AWSIZE => m_axi_data46_AWSIZE,
        AWBURST => m_axi_data46_AWBURST,
        AWLOCK => m_axi_data46_AWLOCK,
        AWCACHE => m_axi_data46_AWCACHE,
        AWPROT => m_axi_data46_AWPROT,
        AWQOS => m_axi_data46_AWQOS,
        AWREGION => m_axi_data46_AWREGION,
        AWUSER => m_axi_data46_AWUSER,
        WVALID => m_axi_data46_WVALID,
        WREADY => m_axi_data46_WREADY,
        WDATA => m_axi_data46_WDATA,
        WSTRB => m_axi_data46_WSTRB,
        WLAST => m_axi_data46_WLAST,
        WID => m_axi_data46_WID,
        WUSER => m_axi_data46_WUSER,
        ARVALID => m_axi_data46_ARVALID,
        ARREADY => m_axi_data46_ARREADY,
        ARADDR => m_axi_data46_ARADDR,
        ARID => m_axi_data46_ARID,
        ARLEN => m_axi_data46_ARLEN,
        ARSIZE => m_axi_data46_ARSIZE,
        ARBURST => m_axi_data46_ARBURST,
        ARLOCK => m_axi_data46_ARLOCK,
        ARCACHE => m_axi_data46_ARCACHE,
        ARPROT => m_axi_data46_ARPROT,
        ARQOS => m_axi_data46_ARQOS,
        ARREGION => m_axi_data46_ARREGION,
        ARUSER => m_axi_data46_ARUSER,
        RVALID => m_axi_data46_RVALID,
        RREADY => m_axi_data46_RREADY,
        RDATA => m_axi_data46_RDATA,
        RLAST => m_axi_data46_RLAST,
        RID => m_axi_data46_RID,
        RUSER => m_axi_data46_RUSER,
        RRESP => m_axi_data46_RRESP,
        BVALID => m_axi_data46_BVALID,
        BREADY => m_axi_data46_BREADY,
        BRESP => m_axi_data46_BRESP,
        BID => m_axi_data46_BID,
        BUSER => m_axi_data46_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_8_U0_m_axi_betas_ARVALID,
        I_ARREADY => data46_ARREADY,
        I_ARADDR => inter_layer_8_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_8_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_8_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_8_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_8_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_8_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_8_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_8_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_8_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_8_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_8_U0_m_axi_betas_ARREGION,
        I_RVALID => data46_RVALID,
        I_RREADY => inter_layer_8_U0_m_axi_betas_RREADY,
        I_RDATA => data46_RDATA,
        I_RID => data46_RID,
        I_RUSER => data46_RUSER,
        I_RRESP => data46_RRESP,
        I_RLAST => data46_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data46_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data46_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data46_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data46_BRESP,
        I_BID => data46_BID,
        I_BUSER => data46_BUSER);

    moblie_net_data23_m_axi_U : component moblie_net_data23_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA23_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA23_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA23_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA23_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA23_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA23_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA23_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA23_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA23_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA23_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA23_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data23_AWVALID,
        AWREADY => m_axi_data23_AWREADY,
        AWADDR => m_axi_data23_AWADDR,
        AWID => m_axi_data23_AWID,
        AWLEN => m_axi_data23_AWLEN,
        AWSIZE => m_axi_data23_AWSIZE,
        AWBURST => m_axi_data23_AWBURST,
        AWLOCK => m_axi_data23_AWLOCK,
        AWCACHE => m_axi_data23_AWCACHE,
        AWPROT => m_axi_data23_AWPROT,
        AWQOS => m_axi_data23_AWQOS,
        AWREGION => m_axi_data23_AWREGION,
        AWUSER => m_axi_data23_AWUSER,
        WVALID => m_axi_data23_WVALID,
        WREADY => m_axi_data23_WREADY,
        WDATA => m_axi_data23_WDATA,
        WSTRB => m_axi_data23_WSTRB,
        WLAST => m_axi_data23_WLAST,
        WID => m_axi_data23_WID,
        WUSER => m_axi_data23_WUSER,
        ARVALID => m_axi_data23_ARVALID,
        ARREADY => m_axi_data23_ARREADY,
        ARADDR => m_axi_data23_ARADDR,
        ARID => m_axi_data23_ARID,
        ARLEN => m_axi_data23_ARLEN,
        ARSIZE => m_axi_data23_ARSIZE,
        ARBURST => m_axi_data23_ARBURST,
        ARLOCK => m_axi_data23_ARLOCK,
        ARCACHE => m_axi_data23_ARCACHE,
        ARPROT => m_axi_data23_ARPROT,
        ARQOS => m_axi_data23_ARQOS,
        ARREGION => m_axi_data23_ARREGION,
        ARUSER => m_axi_data23_ARUSER,
        RVALID => m_axi_data23_RVALID,
        RREADY => m_axi_data23_RREADY,
        RDATA => m_axi_data23_RDATA,
        RLAST => m_axi_data23_RLAST,
        RID => m_axi_data23_RID,
        RUSER => m_axi_data23_RUSER,
        RRESP => m_axi_data23_RRESP,
        BVALID => m_axi_data23_BVALID,
        BREADY => m_axi_data23_BREADY,
        BRESP => m_axi_data23_BRESP,
        BID => m_axi_data23_BID,
        BUSER => m_axi_data23_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data23_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data23_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data23_RDATA,
        I_RID => data23_RID,
        I_RUSER => data23_RUSER,
        I_RRESP => data23_RRESP,
        I_RLAST => data23_RLAST,
        I_AWVALID => inter_layer_8_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data23_AWREADY,
        I_AWADDR => inter_layer_8_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_8_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_8_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_8_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_8_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_8_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_8_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_8_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_8_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_8_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_8_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_8_U0_m_axi_outputs_WVALID,
        I_WREADY => data23_WREADY,
        I_WDATA => inter_layer_8_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_8_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_8_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_8_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_8_U0_m_axi_outputs_WSTRB,
        I_BVALID => data23_BVALID,
        I_BREADY => inter_layer_8_U0_m_axi_outputs_BREADY,
        I_BRESP => data23_BRESP,
        I_BID => data23_BID,
        I_BUSER => data23_BUSER);

    moblie_net_data9_m_axi_U : component moblie_net_data9_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA9_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA9_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA9_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA9_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA9_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA9_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA9_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA9_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA9_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA9_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA9_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data9_AWVALID,
        AWREADY => m_axi_data9_AWREADY,
        AWADDR => m_axi_data9_AWADDR,
        AWID => m_axi_data9_AWID,
        AWLEN => m_axi_data9_AWLEN,
        AWSIZE => m_axi_data9_AWSIZE,
        AWBURST => m_axi_data9_AWBURST,
        AWLOCK => m_axi_data9_AWLOCK,
        AWCACHE => m_axi_data9_AWCACHE,
        AWPROT => m_axi_data9_AWPROT,
        AWQOS => m_axi_data9_AWQOS,
        AWREGION => m_axi_data9_AWREGION,
        AWUSER => m_axi_data9_AWUSER,
        WVALID => m_axi_data9_WVALID,
        WREADY => m_axi_data9_WREADY,
        WDATA => m_axi_data9_WDATA,
        WSTRB => m_axi_data9_WSTRB,
        WLAST => m_axi_data9_WLAST,
        WID => m_axi_data9_WID,
        WUSER => m_axi_data9_WUSER,
        ARVALID => m_axi_data9_ARVALID,
        ARREADY => m_axi_data9_ARREADY,
        ARADDR => m_axi_data9_ARADDR,
        ARID => m_axi_data9_ARID,
        ARLEN => m_axi_data9_ARLEN,
        ARSIZE => m_axi_data9_ARSIZE,
        ARBURST => m_axi_data9_ARBURST,
        ARLOCK => m_axi_data9_ARLOCK,
        ARCACHE => m_axi_data9_ARCACHE,
        ARPROT => m_axi_data9_ARPROT,
        ARQOS => m_axi_data9_ARQOS,
        ARREGION => m_axi_data9_ARREGION,
        ARUSER => m_axi_data9_ARUSER,
        RVALID => m_axi_data9_RVALID,
        RREADY => m_axi_data9_RREADY,
        RDATA => m_axi_data9_RDATA,
        RLAST => m_axi_data9_RLAST,
        RID => m_axi_data9_RID,
        RUSER => m_axi_data9_RUSER,
        RRESP => m_axi_data9_RRESP,
        BVALID => m_axi_data9_BVALID,
        BREADY => m_axi_data9_BREADY,
        BRESP => m_axi_data9_BRESP,
        BID => m_axi_data9_BID,
        BUSER => m_axi_data9_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer265_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data9_ARREADY,
        I_ARADDR => inter_layer265_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer265_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer265_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer265_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer265_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer265_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer265_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer265_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer265_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer265_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer265_U0_m_axi_inputs_ARREGION,
        I_RVALID => data9_RVALID,
        I_RREADY => inter_layer265_U0_m_axi_inputs_RREADY,
        I_RDATA => data9_RDATA,
        I_RID => data9_RID,
        I_RUSER => data9_RUSER,
        I_RRESP => data9_RRESP,
        I_RLAST => data9_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data9_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data9_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data9_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data9_BRESP,
        I_BID => data9_BID,
        I_BUSER => data9_BUSER);

    moblie_net_data47_m_axi_U : component moblie_net_data47_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA47_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA47_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA47_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA47_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA47_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA47_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA47_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA47_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA47_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA47_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA47_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data47_AWVALID,
        AWREADY => m_axi_data47_AWREADY,
        AWADDR => m_axi_data47_AWADDR,
        AWID => m_axi_data47_AWID,
        AWLEN => m_axi_data47_AWLEN,
        AWSIZE => m_axi_data47_AWSIZE,
        AWBURST => m_axi_data47_AWBURST,
        AWLOCK => m_axi_data47_AWLOCK,
        AWCACHE => m_axi_data47_AWCACHE,
        AWPROT => m_axi_data47_AWPROT,
        AWQOS => m_axi_data47_AWQOS,
        AWREGION => m_axi_data47_AWREGION,
        AWUSER => m_axi_data47_AWUSER,
        WVALID => m_axi_data47_WVALID,
        WREADY => m_axi_data47_WREADY,
        WDATA => m_axi_data47_WDATA,
        WSTRB => m_axi_data47_WSTRB,
        WLAST => m_axi_data47_WLAST,
        WID => m_axi_data47_WID,
        WUSER => m_axi_data47_WUSER,
        ARVALID => m_axi_data47_ARVALID,
        ARREADY => m_axi_data47_ARREADY,
        ARADDR => m_axi_data47_ARADDR,
        ARID => m_axi_data47_ARID,
        ARLEN => m_axi_data47_ARLEN,
        ARSIZE => m_axi_data47_ARSIZE,
        ARBURST => m_axi_data47_ARBURST,
        ARLOCK => m_axi_data47_ARLOCK,
        ARCACHE => m_axi_data47_ARCACHE,
        ARPROT => m_axi_data47_ARPROT,
        ARQOS => m_axi_data47_ARQOS,
        ARREGION => m_axi_data47_ARREGION,
        ARUSER => m_axi_data47_ARUSER,
        RVALID => m_axi_data47_RVALID,
        RREADY => m_axi_data47_RREADY,
        RDATA => m_axi_data47_RDATA,
        RLAST => m_axi_data47_RLAST,
        RID => m_axi_data47_RID,
        RUSER => m_axi_data47_RUSER,
        RRESP => m_axi_data47_RRESP,
        BVALID => m_axi_data47_BVALID,
        BREADY => m_axi_data47_BREADY,
        BRESP => m_axi_data47_BRESP,
        BID => m_axi_data47_BID,
        BUSER => m_axi_data47_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer265_U0_m_axi_weights_ARVALID,
        I_ARREADY => data47_ARREADY,
        I_ARADDR => inter_layer265_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer265_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer265_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer265_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer265_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer265_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer265_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer265_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer265_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer265_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer265_U0_m_axi_weights_ARREGION,
        I_RVALID => data47_RVALID,
        I_RREADY => inter_layer265_U0_m_axi_weights_RREADY,
        I_RDATA => data47_RDATA,
        I_RID => data47_RID,
        I_RUSER => data47_RUSER,
        I_RRESP => data47_RRESP,
        I_RLAST => data47_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data47_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data47_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data47_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data47_BRESP,
        I_BID => data47_BID,
        I_BUSER => data47_BUSER);

    moblie_net_data48_m_axi_U : component moblie_net_data48_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA48_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA48_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA48_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA48_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA48_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA48_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA48_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA48_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA48_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA48_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA48_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data48_AWVALID,
        AWREADY => m_axi_data48_AWREADY,
        AWADDR => m_axi_data48_AWADDR,
        AWID => m_axi_data48_AWID,
        AWLEN => m_axi_data48_AWLEN,
        AWSIZE => m_axi_data48_AWSIZE,
        AWBURST => m_axi_data48_AWBURST,
        AWLOCK => m_axi_data48_AWLOCK,
        AWCACHE => m_axi_data48_AWCACHE,
        AWPROT => m_axi_data48_AWPROT,
        AWQOS => m_axi_data48_AWQOS,
        AWREGION => m_axi_data48_AWREGION,
        AWUSER => m_axi_data48_AWUSER,
        WVALID => m_axi_data48_WVALID,
        WREADY => m_axi_data48_WREADY,
        WDATA => m_axi_data48_WDATA,
        WSTRB => m_axi_data48_WSTRB,
        WLAST => m_axi_data48_WLAST,
        WID => m_axi_data48_WID,
        WUSER => m_axi_data48_WUSER,
        ARVALID => m_axi_data48_ARVALID,
        ARREADY => m_axi_data48_ARREADY,
        ARADDR => m_axi_data48_ARADDR,
        ARID => m_axi_data48_ARID,
        ARLEN => m_axi_data48_ARLEN,
        ARSIZE => m_axi_data48_ARSIZE,
        ARBURST => m_axi_data48_ARBURST,
        ARLOCK => m_axi_data48_ARLOCK,
        ARCACHE => m_axi_data48_ARCACHE,
        ARPROT => m_axi_data48_ARPROT,
        ARQOS => m_axi_data48_ARQOS,
        ARREGION => m_axi_data48_ARREGION,
        ARUSER => m_axi_data48_ARUSER,
        RVALID => m_axi_data48_RVALID,
        RREADY => m_axi_data48_RREADY,
        RDATA => m_axi_data48_RDATA,
        RLAST => m_axi_data48_RLAST,
        RID => m_axi_data48_RID,
        RUSER => m_axi_data48_RUSER,
        RRESP => m_axi_data48_RRESP,
        BVALID => m_axi_data48_BVALID,
        BREADY => m_axi_data48_BREADY,
        BRESP => m_axi_data48_BRESP,
        BID => m_axi_data48_BID,
        BUSER => m_axi_data48_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer265_U0_m_axi_betas_ARVALID,
        I_ARREADY => data48_ARREADY,
        I_ARADDR => inter_layer265_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer265_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer265_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer265_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer265_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer265_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer265_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer265_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer265_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer265_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer265_U0_m_axi_betas_ARREGION,
        I_RVALID => data48_RVALID,
        I_RREADY => inter_layer265_U0_m_axi_betas_RREADY,
        I_RDATA => data48_RDATA,
        I_RID => data48_RID,
        I_RUSER => data48_RUSER,
        I_RRESP => data48_RRESP,
        I_RLAST => data48_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data48_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data48_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data48_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data48_BRESP,
        I_BID => data48_BID,
        I_BUSER => data48_BUSER);

    moblie_net_data24_m_axi_U : component moblie_net_data24_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA24_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA24_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA24_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA24_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA24_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA24_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA24_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA24_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA24_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA24_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA24_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data24_AWVALID,
        AWREADY => m_axi_data24_AWREADY,
        AWADDR => m_axi_data24_AWADDR,
        AWID => m_axi_data24_AWID,
        AWLEN => m_axi_data24_AWLEN,
        AWSIZE => m_axi_data24_AWSIZE,
        AWBURST => m_axi_data24_AWBURST,
        AWLOCK => m_axi_data24_AWLOCK,
        AWCACHE => m_axi_data24_AWCACHE,
        AWPROT => m_axi_data24_AWPROT,
        AWQOS => m_axi_data24_AWQOS,
        AWREGION => m_axi_data24_AWREGION,
        AWUSER => m_axi_data24_AWUSER,
        WVALID => m_axi_data24_WVALID,
        WREADY => m_axi_data24_WREADY,
        WDATA => m_axi_data24_WDATA,
        WSTRB => m_axi_data24_WSTRB,
        WLAST => m_axi_data24_WLAST,
        WID => m_axi_data24_WID,
        WUSER => m_axi_data24_WUSER,
        ARVALID => m_axi_data24_ARVALID,
        ARREADY => m_axi_data24_ARREADY,
        ARADDR => m_axi_data24_ARADDR,
        ARID => m_axi_data24_ARID,
        ARLEN => m_axi_data24_ARLEN,
        ARSIZE => m_axi_data24_ARSIZE,
        ARBURST => m_axi_data24_ARBURST,
        ARLOCK => m_axi_data24_ARLOCK,
        ARCACHE => m_axi_data24_ARCACHE,
        ARPROT => m_axi_data24_ARPROT,
        ARQOS => m_axi_data24_ARQOS,
        ARREGION => m_axi_data24_ARREGION,
        ARUSER => m_axi_data24_ARUSER,
        RVALID => m_axi_data24_RVALID,
        RREADY => m_axi_data24_RREADY,
        RDATA => m_axi_data24_RDATA,
        RLAST => m_axi_data24_RLAST,
        RID => m_axi_data24_RID,
        RUSER => m_axi_data24_RUSER,
        RRESP => m_axi_data24_RRESP,
        BVALID => m_axi_data24_BVALID,
        BREADY => m_axi_data24_BREADY,
        BRESP => m_axi_data24_BRESP,
        BID => m_axi_data24_BID,
        BUSER => m_axi_data24_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data24_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data24_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data24_RDATA,
        I_RID => data24_RID,
        I_RUSER => data24_RUSER,
        I_RRESP => data24_RRESP,
        I_RLAST => data24_RLAST,
        I_AWVALID => inter_layer265_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data24_AWREADY,
        I_AWADDR => inter_layer265_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer265_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer265_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer265_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer265_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer265_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer265_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer265_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer265_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer265_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer265_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer265_U0_m_axi_outputs_WVALID,
        I_WREADY => data24_WREADY,
        I_WDATA => inter_layer265_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer265_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer265_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer265_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer265_U0_m_axi_outputs_WSTRB,
        I_BVALID => data24_BVALID,
        I_BREADY => inter_layer265_U0_m_axi_outputs_BREADY,
        I_BRESP => data24_BRESP,
        I_BID => data24_BID,
        I_BUSER => data24_BUSER);

    moblie_net_data10_m_axi_U : component moblie_net_data10_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA10_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA10_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA10_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA10_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA10_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA10_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA10_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA10_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA10_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA10_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA10_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data10_AWVALID,
        AWREADY => m_axi_data10_AWREADY,
        AWADDR => m_axi_data10_AWADDR,
        AWID => m_axi_data10_AWID,
        AWLEN => m_axi_data10_AWLEN,
        AWSIZE => m_axi_data10_AWSIZE,
        AWBURST => m_axi_data10_AWBURST,
        AWLOCK => m_axi_data10_AWLOCK,
        AWCACHE => m_axi_data10_AWCACHE,
        AWPROT => m_axi_data10_AWPROT,
        AWQOS => m_axi_data10_AWQOS,
        AWREGION => m_axi_data10_AWREGION,
        AWUSER => m_axi_data10_AWUSER,
        WVALID => m_axi_data10_WVALID,
        WREADY => m_axi_data10_WREADY,
        WDATA => m_axi_data10_WDATA,
        WSTRB => m_axi_data10_WSTRB,
        WLAST => m_axi_data10_WLAST,
        WID => m_axi_data10_WID,
        WUSER => m_axi_data10_WUSER,
        ARVALID => m_axi_data10_ARVALID,
        ARREADY => m_axi_data10_ARREADY,
        ARADDR => m_axi_data10_ARADDR,
        ARID => m_axi_data10_ARID,
        ARLEN => m_axi_data10_ARLEN,
        ARSIZE => m_axi_data10_ARSIZE,
        ARBURST => m_axi_data10_ARBURST,
        ARLOCK => m_axi_data10_ARLOCK,
        ARCACHE => m_axi_data10_ARCACHE,
        ARPROT => m_axi_data10_ARPROT,
        ARQOS => m_axi_data10_ARQOS,
        ARREGION => m_axi_data10_ARREGION,
        ARUSER => m_axi_data10_ARUSER,
        RVALID => m_axi_data10_RVALID,
        RREADY => m_axi_data10_RREADY,
        RDATA => m_axi_data10_RDATA,
        RLAST => m_axi_data10_RLAST,
        RID => m_axi_data10_RID,
        RUSER => m_axi_data10_RUSER,
        RRESP => m_axi_data10_RRESP,
        BVALID => m_axi_data10_BVALID,
        BREADY => m_axi_data10_BREADY,
        BRESP => m_axi_data10_BRESP,
        BID => m_axi_data10_BID,
        BUSER => m_axi_data10_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_6_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data10_ARREADY,
        I_ARADDR => inter_layer_6_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_6_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_6_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_6_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_6_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_6_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_6_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_6_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_6_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_6_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_6_U0_m_axi_inputs_ARREGION,
        I_RVALID => data10_RVALID,
        I_RREADY => inter_layer_6_U0_m_axi_inputs_RREADY,
        I_RDATA => data10_RDATA,
        I_RID => data10_RID,
        I_RUSER => data10_RUSER,
        I_RRESP => data10_RRESP,
        I_RLAST => data10_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data10_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data10_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data10_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data10_BRESP,
        I_BID => data10_BID,
        I_BUSER => data10_BUSER);

    moblie_net_data49_m_axi_U : component moblie_net_data49_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA49_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA49_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA49_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA49_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA49_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA49_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA49_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA49_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA49_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA49_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA49_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data49_AWVALID,
        AWREADY => m_axi_data49_AWREADY,
        AWADDR => m_axi_data49_AWADDR,
        AWID => m_axi_data49_AWID,
        AWLEN => m_axi_data49_AWLEN,
        AWSIZE => m_axi_data49_AWSIZE,
        AWBURST => m_axi_data49_AWBURST,
        AWLOCK => m_axi_data49_AWLOCK,
        AWCACHE => m_axi_data49_AWCACHE,
        AWPROT => m_axi_data49_AWPROT,
        AWQOS => m_axi_data49_AWQOS,
        AWREGION => m_axi_data49_AWREGION,
        AWUSER => m_axi_data49_AWUSER,
        WVALID => m_axi_data49_WVALID,
        WREADY => m_axi_data49_WREADY,
        WDATA => m_axi_data49_WDATA,
        WSTRB => m_axi_data49_WSTRB,
        WLAST => m_axi_data49_WLAST,
        WID => m_axi_data49_WID,
        WUSER => m_axi_data49_WUSER,
        ARVALID => m_axi_data49_ARVALID,
        ARREADY => m_axi_data49_ARREADY,
        ARADDR => m_axi_data49_ARADDR,
        ARID => m_axi_data49_ARID,
        ARLEN => m_axi_data49_ARLEN,
        ARSIZE => m_axi_data49_ARSIZE,
        ARBURST => m_axi_data49_ARBURST,
        ARLOCK => m_axi_data49_ARLOCK,
        ARCACHE => m_axi_data49_ARCACHE,
        ARPROT => m_axi_data49_ARPROT,
        ARQOS => m_axi_data49_ARQOS,
        ARREGION => m_axi_data49_ARREGION,
        ARUSER => m_axi_data49_ARUSER,
        RVALID => m_axi_data49_RVALID,
        RREADY => m_axi_data49_RREADY,
        RDATA => m_axi_data49_RDATA,
        RLAST => m_axi_data49_RLAST,
        RID => m_axi_data49_RID,
        RUSER => m_axi_data49_RUSER,
        RRESP => m_axi_data49_RRESP,
        BVALID => m_axi_data49_BVALID,
        BREADY => m_axi_data49_BREADY,
        BRESP => m_axi_data49_BRESP,
        BID => m_axi_data49_BID,
        BUSER => m_axi_data49_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_6_U0_m_axi_weights_ARVALID,
        I_ARREADY => data49_ARREADY,
        I_ARADDR => inter_layer_6_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_6_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_6_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_6_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_6_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_6_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_6_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_6_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_6_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_6_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_6_U0_m_axi_weights_ARREGION,
        I_RVALID => data49_RVALID,
        I_RREADY => inter_layer_6_U0_m_axi_weights_RREADY,
        I_RDATA => data49_RDATA,
        I_RID => data49_RID,
        I_RUSER => data49_RUSER,
        I_RRESP => data49_RRESP,
        I_RLAST => data49_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data49_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data49_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data49_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data49_BRESP,
        I_BID => data49_BID,
        I_BUSER => data49_BUSER);

    moblie_net_data50_m_axi_U : component moblie_net_data50_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA50_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA50_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA50_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA50_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA50_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA50_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA50_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA50_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA50_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA50_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA50_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data50_AWVALID,
        AWREADY => m_axi_data50_AWREADY,
        AWADDR => m_axi_data50_AWADDR,
        AWID => m_axi_data50_AWID,
        AWLEN => m_axi_data50_AWLEN,
        AWSIZE => m_axi_data50_AWSIZE,
        AWBURST => m_axi_data50_AWBURST,
        AWLOCK => m_axi_data50_AWLOCK,
        AWCACHE => m_axi_data50_AWCACHE,
        AWPROT => m_axi_data50_AWPROT,
        AWQOS => m_axi_data50_AWQOS,
        AWREGION => m_axi_data50_AWREGION,
        AWUSER => m_axi_data50_AWUSER,
        WVALID => m_axi_data50_WVALID,
        WREADY => m_axi_data50_WREADY,
        WDATA => m_axi_data50_WDATA,
        WSTRB => m_axi_data50_WSTRB,
        WLAST => m_axi_data50_WLAST,
        WID => m_axi_data50_WID,
        WUSER => m_axi_data50_WUSER,
        ARVALID => m_axi_data50_ARVALID,
        ARREADY => m_axi_data50_ARREADY,
        ARADDR => m_axi_data50_ARADDR,
        ARID => m_axi_data50_ARID,
        ARLEN => m_axi_data50_ARLEN,
        ARSIZE => m_axi_data50_ARSIZE,
        ARBURST => m_axi_data50_ARBURST,
        ARLOCK => m_axi_data50_ARLOCK,
        ARCACHE => m_axi_data50_ARCACHE,
        ARPROT => m_axi_data50_ARPROT,
        ARQOS => m_axi_data50_ARQOS,
        ARREGION => m_axi_data50_ARREGION,
        ARUSER => m_axi_data50_ARUSER,
        RVALID => m_axi_data50_RVALID,
        RREADY => m_axi_data50_RREADY,
        RDATA => m_axi_data50_RDATA,
        RLAST => m_axi_data50_RLAST,
        RID => m_axi_data50_RID,
        RUSER => m_axi_data50_RUSER,
        RRESP => m_axi_data50_RRESP,
        BVALID => m_axi_data50_BVALID,
        BREADY => m_axi_data50_BREADY,
        BRESP => m_axi_data50_BRESP,
        BID => m_axi_data50_BID,
        BUSER => m_axi_data50_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_6_U0_m_axi_betas_ARVALID,
        I_ARREADY => data50_ARREADY,
        I_ARADDR => inter_layer_6_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_6_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_6_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_6_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_6_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_6_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_6_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_6_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_6_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_6_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_6_U0_m_axi_betas_ARREGION,
        I_RVALID => data50_RVALID,
        I_RREADY => inter_layer_6_U0_m_axi_betas_RREADY,
        I_RDATA => data50_RDATA,
        I_RID => data50_RID,
        I_RUSER => data50_RUSER,
        I_RRESP => data50_RRESP,
        I_RLAST => data50_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data50_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data50_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data50_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data50_BRESP,
        I_BID => data50_BID,
        I_BUSER => data50_BUSER);

    moblie_net_data25_m_axi_U : component moblie_net_data25_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA25_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA25_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA25_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA25_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA25_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA25_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA25_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA25_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA25_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA25_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA25_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data25_AWVALID,
        AWREADY => m_axi_data25_AWREADY,
        AWADDR => m_axi_data25_AWADDR,
        AWID => m_axi_data25_AWID,
        AWLEN => m_axi_data25_AWLEN,
        AWSIZE => m_axi_data25_AWSIZE,
        AWBURST => m_axi_data25_AWBURST,
        AWLOCK => m_axi_data25_AWLOCK,
        AWCACHE => m_axi_data25_AWCACHE,
        AWPROT => m_axi_data25_AWPROT,
        AWQOS => m_axi_data25_AWQOS,
        AWREGION => m_axi_data25_AWREGION,
        AWUSER => m_axi_data25_AWUSER,
        WVALID => m_axi_data25_WVALID,
        WREADY => m_axi_data25_WREADY,
        WDATA => m_axi_data25_WDATA,
        WSTRB => m_axi_data25_WSTRB,
        WLAST => m_axi_data25_WLAST,
        WID => m_axi_data25_WID,
        WUSER => m_axi_data25_WUSER,
        ARVALID => m_axi_data25_ARVALID,
        ARREADY => m_axi_data25_ARREADY,
        ARADDR => m_axi_data25_ARADDR,
        ARID => m_axi_data25_ARID,
        ARLEN => m_axi_data25_ARLEN,
        ARSIZE => m_axi_data25_ARSIZE,
        ARBURST => m_axi_data25_ARBURST,
        ARLOCK => m_axi_data25_ARLOCK,
        ARCACHE => m_axi_data25_ARCACHE,
        ARPROT => m_axi_data25_ARPROT,
        ARQOS => m_axi_data25_ARQOS,
        ARREGION => m_axi_data25_ARREGION,
        ARUSER => m_axi_data25_ARUSER,
        RVALID => m_axi_data25_RVALID,
        RREADY => m_axi_data25_RREADY,
        RDATA => m_axi_data25_RDATA,
        RLAST => m_axi_data25_RLAST,
        RID => m_axi_data25_RID,
        RUSER => m_axi_data25_RUSER,
        RRESP => m_axi_data25_RRESP,
        BVALID => m_axi_data25_BVALID,
        BREADY => m_axi_data25_BREADY,
        BRESP => m_axi_data25_BRESP,
        BID => m_axi_data25_BID,
        BUSER => m_axi_data25_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data25_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data25_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data25_RDATA,
        I_RID => data25_RID,
        I_RUSER => data25_RUSER,
        I_RRESP => data25_RRESP,
        I_RLAST => data25_RLAST,
        I_AWVALID => inter_layer_6_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data25_AWREADY,
        I_AWADDR => inter_layer_6_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_6_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_6_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_6_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_6_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_6_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_6_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_6_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_6_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_6_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_6_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_6_U0_m_axi_outputs_WVALID,
        I_WREADY => data25_WREADY,
        I_WDATA => inter_layer_6_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_6_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_6_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_6_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_6_U0_m_axi_outputs_WSTRB,
        I_BVALID => data25_BVALID,
        I_BREADY => inter_layer_6_U0_m_axi_outputs_BREADY,
        I_BRESP => data25_BRESP,
        I_BID => data25_BID,
        I_BUSER => data25_BUSER);

    moblie_net_data11_m_axi_U : component moblie_net_data11_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA11_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA11_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA11_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA11_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA11_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA11_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA11_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA11_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA11_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA11_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA11_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data11_AWVALID,
        AWREADY => m_axi_data11_AWREADY,
        AWADDR => m_axi_data11_AWADDR,
        AWID => m_axi_data11_AWID,
        AWLEN => m_axi_data11_AWLEN,
        AWSIZE => m_axi_data11_AWSIZE,
        AWBURST => m_axi_data11_AWBURST,
        AWLOCK => m_axi_data11_AWLOCK,
        AWCACHE => m_axi_data11_AWCACHE,
        AWPROT => m_axi_data11_AWPROT,
        AWQOS => m_axi_data11_AWQOS,
        AWREGION => m_axi_data11_AWREGION,
        AWUSER => m_axi_data11_AWUSER,
        WVALID => m_axi_data11_WVALID,
        WREADY => m_axi_data11_WREADY,
        WDATA => m_axi_data11_WDATA,
        WSTRB => m_axi_data11_WSTRB,
        WLAST => m_axi_data11_WLAST,
        WID => m_axi_data11_WID,
        WUSER => m_axi_data11_WUSER,
        ARVALID => m_axi_data11_ARVALID,
        ARREADY => m_axi_data11_ARREADY,
        ARADDR => m_axi_data11_ARADDR,
        ARID => m_axi_data11_ARID,
        ARLEN => m_axi_data11_ARLEN,
        ARSIZE => m_axi_data11_ARSIZE,
        ARBURST => m_axi_data11_ARBURST,
        ARLOCK => m_axi_data11_ARLOCK,
        ARCACHE => m_axi_data11_ARCACHE,
        ARPROT => m_axi_data11_ARPROT,
        ARQOS => m_axi_data11_ARQOS,
        ARREGION => m_axi_data11_ARREGION,
        ARUSER => m_axi_data11_ARUSER,
        RVALID => m_axi_data11_RVALID,
        RREADY => m_axi_data11_RREADY,
        RDATA => m_axi_data11_RDATA,
        RLAST => m_axi_data11_RLAST,
        RID => m_axi_data11_RID,
        RUSER => m_axi_data11_RUSER,
        RRESP => m_axi_data11_RRESP,
        BVALID => m_axi_data11_BVALID,
        BREADY => m_axi_data11_BREADY,
        BRESP => m_axi_data11_BRESP,
        BID => m_axi_data11_BID,
        BUSER => m_axi_data11_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_1_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data11_ARREADY,
        I_ARADDR => inter_layer_1_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_1_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_1_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_1_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_1_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_1_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_1_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_1_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_1_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_1_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_1_U0_m_axi_inputs_ARREGION,
        I_RVALID => data11_RVALID,
        I_RREADY => inter_layer_1_U0_m_axi_inputs_RREADY,
        I_RDATA => data11_RDATA,
        I_RID => data11_RID,
        I_RUSER => data11_RUSER,
        I_RRESP => data11_RRESP,
        I_RLAST => data11_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data11_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data11_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data11_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data11_BRESP,
        I_BID => data11_BID,
        I_BUSER => data11_BUSER);

    moblie_net_data51_m_axi_U : component moblie_net_data51_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA51_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA51_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA51_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA51_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA51_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA51_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA51_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA51_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA51_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA51_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA51_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data51_AWVALID,
        AWREADY => m_axi_data51_AWREADY,
        AWADDR => m_axi_data51_AWADDR,
        AWID => m_axi_data51_AWID,
        AWLEN => m_axi_data51_AWLEN,
        AWSIZE => m_axi_data51_AWSIZE,
        AWBURST => m_axi_data51_AWBURST,
        AWLOCK => m_axi_data51_AWLOCK,
        AWCACHE => m_axi_data51_AWCACHE,
        AWPROT => m_axi_data51_AWPROT,
        AWQOS => m_axi_data51_AWQOS,
        AWREGION => m_axi_data51_AWREGION,
        AWUSER => m_axi_data51_AWUSER,
        WVALID => m_axi_data51_WVALID,
        WREADY => m_axi_data51_WREADY,
        WDATA => m_axi_data51_WDATA,
        WSTRB => m_axi_data51_WSTRB,
        WLAST => m_axi_data51_WLAST,
        WID => m_axi_data51_WID,
        WUSER => m_axi_data51_WUSER,
        ARVALID => m_axi_data51_ARVALID,
        ARREADY => m_axi_data51_ARREADY,
        ARADDR => m_axi_data51_ARADDR,
        ARID => m_axi_data51_ARID,
        ARLEN => m_axi_data51_ARLEN,
        ARSIZE => m_axi_data51_ARSIZE,
        ARBURST => m_axi_data51_ARBURST,
        ARLOCK => m_axi_data51_ARLOCK,
        ARCACHE => m_axi_data51_ARCACHE,
        ARPROT => m_axi_data51_ARPROT,
        ARQOS => m_axi_data51_ARQOS,
        ARREGION => m_axi_data51_ARREGION,
        ARUSER => m_axi_data51_ARUSER,
        RVALID => m_axi_data51_RVALID,
        RREADY => m_axi_data51_RREADY,
        RDATA => m_axi_data51_RDATA,
        RLAST => m_axi_data51_RLAST,
        RID => m_axi_data51_RID,
        RUSER => m_axi_data51_RUSER,
        RRESP => m_axi_data51_RRESP,
        BVALID => m_axi_data51_BVALID,
        BREADY => m_axi_data51_BREADY,
        BRESP => m_axi_data51_BRESP,
        BID => m_axi_data51_BID,
        BUSER => m_axi_data51_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_1_U0_m_axi_weights_ARVALID,
        I_ARREADY => data51_ARREADY,
        I_ARADDR => inter_layer_1_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_1_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_1_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_1_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_1_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_1_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_1_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_1_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_1_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_1_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_1_U0_m_axi_weights_ARREGION,
        I_RVALID => data51_RVALID,
        I_RREADY => inter_layer_1_U0_m_axi_weights_RREADY,
        I_RDATA => data51_RDATA,
        I_RID => data51_RID,
        I_RUSER => data51_RUSER,
        I_RRESP => data51_RRESP,
        I_RLAST => data51_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data51_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data51_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data51_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data51_BRESP,
        I_BID => data51_BID,
        I_BUSER => data51_BUSER);

    moblie_net_data52_m_axi_U : component moblie_net_data52_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA52_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA52_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA52_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA52_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA52_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA52_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA52_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA52_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA52_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA52_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA52_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data52_AWVALID,
        AWREADY => m_axi_data52_AWREADY,
        AWADDR => m_axi_data52_AWADDR,
        AWID => m_axi_data52_AWID,
        AWLEN => m_axi_data52_AWLEN,
        AWSIZE => m_axi_data52_AWSIZE,
        AWBURST => m_axi_data52_AWBURST,
        AWLOCK => m_axi_data52_AWLOCK,
        AWCACHE => m_axi_data52_AWCACHE,
        AWPROT => m_axi_data52_AWPROT,
        AWQOS => m_axi_data52_AWQOS,
        AWREGION => m_axi_data52_AWREGION,
        AWUSER => m_axi_data52_AWUSER,
        WVALID => m_axi_data52_WVALID,
        WREADY => m_axi_data52_WREADY,
        WDATA => m_axi_data52_WDATA,
        WSTRB => m_axi_data52_WSTRB,
        WLAST => m_axi_data52_WLAST,
        WID => m_axi_data52_WID,
        WUSER => m_axi_data52_WUSER,
        ARVALID => m_axi_data52_ARVALID,
        ARREADY => m_axi_data52_ARREADY,
        ARADDR => m_axi_data52_ARADDR,
        ARID => m_axi_data52_ARID,
        ARLEN => m_axi_data52_ARLEN,
        ARSIZE => m_axi_data52_ARSIZE,
        ARBURST => m_axi_data52_ARBURST,
        ARLOCK => m_axi_data52_ARLOCK,
        ARCACHE => m_axi_data52_ARCACHE,
        ARPROT => m_axi_data52_ARPROT,
        ARQOS => m_axi_data52_ARQOS,
        ARREGION => m_axi_data52_ARREGION,
        ARUSER => m_axi_data52_ARUSER,
        RVALID => m_axi_data52_RVALID,
        RREADY => m_axi_data52_RREADY,
        RDATA => m_axi_data52_RDATA,
        RLAST => m_axi_data52_RLAST,
        RID => m_axi_data52_RID,
        RUSER => m_axi_data52_RUSER,
        RRESP => m_axi_data52_RRESP,
        BVALID => m_axi_data52_BVALID,
        BREADY => m_axi_data52_BREADY,
        BRESP => m_axi_data52_BRESP,
        BID => m_axi_data52_BID,
        BUSER => m_axi_data52_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_1_U0_m_axi_betas_ARVALID,
        I_ARREADY => data52_ARREADY,
        I_ARADDR => inter_layer_1_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_1_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_1_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_1_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_1_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_1_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_1_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_1_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_1_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_1_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_1_U0_m_axi_betas_ARREGION,
        I_RVALID => data52_RVALID,
        I_RREADY => inter_layer_1_U0_m_axi_betas_RREADY,
        I_RDATA => data52_RDATA,
        I_RID => data52_RID,
        I_RUSER => data52_RUSER,
        I_RRESP => data52_RRESP,
        I_RLAST => data52_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data52_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data52_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data52_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data52_BRESP,
        I_BID => data52_BID,
        I_BUSER => data52_BUSER);

    moblie_net_data26_m_axi_U : component moblie_net_data26_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA26_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA26_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA26_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA26_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA26_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA26_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA26_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA26_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA26_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA26_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA26_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data26_AWVALID,
        AWREADY => m_axi_data26_AWREADY,
        AWADDR => m_axi_data26_AWADDR,
        AWID => m_axi_data26_AWID,
        AWLEN => m_axi_data26_AWLEN,
        AWSIZE => m_axi_data26_AWSIZE,
        AWBURST => m_axi_data26_AWBURST,
        AWLOCK => m_axi_data26_AWLOCK,
        AWCACHE => m_axi_data26_AWCACHE,
        AWPROT => m_axi_data26_AWPROT,
        AWQOS => m_axi_data26_AWQOS,
        AWREGION => m_axi_data26_AWREGION,
        AWUSER => m_axi_data26_AWUSER,
        WVALID => m_axi_data26_WVALID,
        WREADY => m_axi_data26_WREADY,
        WDATA => m_axi_data26_WDATA,
        WSTRB => m_axi_data26_WSTRB,
        WLAST => m_axi_data26_WLAST,
        WID => m_axi_data26_WID,
        WUSER => m_axi_data26_WUSER,
        ARVALID => m_axi_data26_ARVALID,
        ARREADY => m_axi_data26_ARREADY,
        ARADDR => m_axi_data26_ARADDR,
        ARID => m_axi_data26_ARID,
        ARLEN => m_axi_data26_ARLEN,
        ARSIZE => m_axi_data26_ARSIZE,
        ARBURST => m_axi_data26_ARBURST,
        ARLOCK => m_axi_data26_ARLOCK,
        ARCACHE => m_axi_data26_ARCACHE,
        ARPROT => m_axi_data26_ARPROT,
        ARQOS => m_axi_data26_ARQOS,
        ARREGION => m_axi_data26_ARREGION,
        ARUSER => m_axi_data26_ARUSER,
        RVALID => m_axi_data26_RVALID,
        RREADY => m_axi_data26_RREADY,
        RDATA => m_axi_data26_RDATA,
        RLAST => m_axi_data26_RLAST,
        RID => m_axi_data26_RID,
        RUSER => m_axi_data26_RUSER,
        RRESP => m_axi_data26_RRESP,
        BVALID => m_axi_data26_BVALID,
        BREADY => m_axi_data26_BREADY,
        BRESP => m_axi_data26_BRESP,
        BID => m_axi_data26_BID,
        BUSER => m_axi_data26_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data26_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data26_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data26_RDATA,
        I_RID => data26_RID,
        I_RUSER => data26_RUSER,
        I_RRESP => data26_RRESP,
        I_RLAST => data26_RLAST,
        I_AWVALID => inter_layer_1_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data26_AWREADY,
        I_AWADDR => inter_layer_1_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_1_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_1_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_1_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_1_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_1_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_1_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_1_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_1_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_1_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_1_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_1_U0_m_axi_outputs_WVALID,
        I_WREADY => data26_WREADY,
        I_WDATA => inter_layer_1_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_1_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_1_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_1_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_1_U0_m_axi_outputs_WSTRB,
        I_BVALID => data26_BVALID,
        I_BREADY => inter_layer_1_U0_m_axi_outputs_BREADY,
        I_BRESP => data26_BRESP,
        I_BID => data26_BID,
        I_BUSER => data26_BUSER);

    moblie_net_data12_m_axi_U : component moblie_net_data12_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA12_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA12_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA12_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA12_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA12_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA12_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA12_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA12_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA12_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA12_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA12_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data12_AWVALID,
        AWREADY => m_axi_data12_AWREADY,
        AWADDR => m_axi_data12_AWADDR,
        AWID => m_axi_data12_AWID,
        AWLEN => m_axi_data12_AWLEN,
        AWSIZE => m_axi_data12_AWSIZE,
        AWBURST => m_axi_data12_AWBURST,
        AWLOCK => m_axi_data12_AWLOCK,
        AWCACHE => m_axi_data12_AWCACHE,
        AWPROT => m_axi_data12_AWPROT,
        AWQOS => m_axi_data12_AWQOS,
        AWREGION => m_axi_data12_AWREGION,
        AWUSER => m_axi_data12_AWUSER,
        WVALID => m_axi_data12_WVALID,
        WREADY => m_axi_data12_WREADY,
        WDATA => m_axi_data12_WDATA,
        WSTRB => m_axi_data12_WSTRB,
        WLAST => m_axi_data12_WLAST,
        WID => m_axi_data12_WID,
        WUSER => m_axi_data12_WUSER,
        ARVALID => m_axi_data12_ARVALID,
        ARREADY => m_axi_data12_ARREADY,
        ARADDR => m_axi_data12_ARADDR,
        ARID => m_axi_data12_ARID,
        ARLEN => m_axi_data12_ARLEN,
        ARSIZE => m_axi_data12_ARSIZE,
        ARBURST => m_axi_data12_ARBURST,
        ARLOCK => m_axi_data12_ARLOCK,
        ARCACHE => m_axi_data12_ARCACHE,
        ARPROT => m_axi_data12_ARPROT,
        ARQOS => m_axi_data12_ARQOS,
        ARREGION => m_axi_data12_ARREGION,
        ARUSER => m_axi_data12_ARUSER,
        RVALID => m_axi_data12_RVALID,
        RREADY => m_axi_data12_RREADY,
        RDATA => m_axi_data12_RDATA,
        RLAST => m_axi_data12_RLAST,
        RID => m_axi_data12_RID,
        RUSER => m_axi_data12_RUSER,
        RRESP => m_axi_data12_RRESP,
        BVALID => m_axi_data12_BVALID,
        BREADY => m_axi_data12_BREADY,
        BRESP => m_axi_data12_BRESP,
        BID => m_axi_data12_BID,
        BUSER => m_axi_data12_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_9_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data12_ARREADY,
        I_ARADDR => inter_layer_9_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_9_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_9_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_9_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_9_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_9_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_9_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_9_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_9_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_9_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_9_U0_m_axi_inputs_ARREGION,
        I_RVALID => data12_RVALID,
        I_RREADY => inter_layer_9_U0_m_axi_inputs_RREADY,
        I_RDATA => data12_RDATA,
        I_RID => data12_RID,
        I_RUSER => data12_RUSER,
        I_RRESP => data12_RRESP,
        I_RLAST => data12_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data12_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data12_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data12_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data12_BRESP,
        I_BID => data12_BID,
        I_BUSER => data12_BUSER);

    moblie_net_data53_m_axi_U : component moblie_net_data53_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA53_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA53_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA53_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA53_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA53_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA53_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA53_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA53_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA53_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA53_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA53_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data53_AWVALID,
        AWREADY => m_axi_data53_AWREADY,
        AWADDR => m_axi_data53_AWADDR,
        AWID => m_axi_data53_AWID,
        AWLEN => m_axi_data53_AWLEN,
        AWSIZE => m_axi_data53_AWSIZE,
        AWBURST => m_axi_data53_AWBURST,
        AWLOCK => m_axi_data53_AWLOCK,
        AWCACHE => m_axi_data53_AWCACHE,
        AWPROT => m_axi_data53_AWPROT,
        AWQOS => m_axi_data53_AWQOS,
        AWREGION => m_axi_data53_AWREGION,
        AWUSER => m_axi_data53_AWUSER,
        WVALID => m_axi_data53_WVALID,
        WREADY => m_axi_data53_WREADY,
        WDATA => m_axi_data53_WDATA,
        WSTRB => m_axi_data53_WSTRB,
        WLAST => m_axi_data53_WLAST,
        WID => m_axi_data53_WID,
        WUSER => m_axi_data53_WUSER,
        ARVALID => m_axi_data53_ARVALID,
        ARREADY => m_axi_data53_ARREADY,
        ARADDR => m_axi_data53_ARADDR,
        ARID => m_axi_data53_ARID,
        ARLEN => m_axi_data53_ARLEN,
        ARSIZE => m_axi_data53_ARSIZE,
        ARBURST => m_axi_data53_ARBURST,
        ARLOCK => m_axi_data53_ARLOCK,
        ARCACHE => m_axi_data53_ARCACHE,
        ARPROT => m_axi_data53_ARPROT,
        ARQOS => m_axi_data53_ARQOS,
        ARREGION => m_axi_data53_ARREGION,
        ARUSER => m_axi_data53_ARUSER,
        RVALID => m_axi_data53_RVALID,
        RREADY => m_axi_data53_RREADY,
        RDATA => m_axi_data53_RDATA,
        RLAST => m_axi_data53_RLAST,
        RID => m_axi_data53_RID,
        RUSER => m_axi_data53_RUSER,
        RRESP => m_axi_data53_RRESP,
        BVALID => m_axi_data53_BVALID,
        BREADY => m_axi_data53_BREADY,
        BRESP => m_axi_data53_BRESP,
        BID => m_axi_data53_BID,
        BUSER => m_axi_data53_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_9_U0_m_axi_weights_ARVALID,
        I_ARREADY => data53_ARREADY,
        I_ARADDR => inter_layer_9_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_9_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_9_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_9_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_9_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_9_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_9_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_9_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_9_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_9_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_9_U0_m_axi_weights_ARREGION,
        I_RVALID => data53_RVALID,
        I_RREADY => inter_layer_9_U0_m_axi_weights_RREADY,
        I_RDATA => data53_RDATA,
        I_RID => data53_RID,
        I_RUSER => data53_RUSER,
        I_RRESP => data53_RRESP,
        I_RLAST => data53_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data53_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data53_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data53_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data53_BRESP,
        I_BID => data53_BID,
        I_BUSER => data53_BUSER);

    moblie_net_data54_m_axi_U : component moblie_net_data54_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA54_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA54_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA54_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA54_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA54_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA54_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA54_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA54_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA54_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA54_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA54_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data54_AWVALID,
        AWREADY => m_axi_data54_AWREADY,
        AWADDR => m_axi_data54_AWADDR,
        AWID => m_axi_data54_AWID,
        AWLEN => m_axi_data54_AWLEN,
        AWSIZE => m_axi_data54_AWSIZE,
        AWBURST => m_axi_data54_AWBURST,
        AWLOCK => m_axi_data54_AWLOCK,
        AWCACHE => m_axi_data54_AWCACHE,
        AWPROT => m_axi_data54_AWPROT,
        AWQOS => m_axi_data54_AWQOS,
        AWREGION => m_axi_data54_AWREGION,
        AWUSER => m_axi_data54_AWUSER,
        WVALID => m_axi_data54_WVALID,
        WREADY => m_axi_data54_WREADY,
        WDATA => m_axi_data54_WDATA,
        WSTRB => m_axi_data54_WSTRB,
        WLAST => m_axi_data54_WLAST,
        WID => m_axi_data54_WID,
        WUSER => m_axi_data54_WUSER,
        ARVALID => m_axi_data54_ARVALID,
        ARREADY => m_axi_data54_ARREADY,
        ARADDR => m_axi_data54_ARADDR,
        ARID => m_axi_data54_ARID,
        ARLEN => m_axi_data54_ARLEN,
        ARSIZE => m_axi_data54_ARSIZE,
        ARBURST => m_axi_data54_ARBURST,
        ARLOCK => m_axi_data54_ARLOCK,
        ARCACHE => m_axi_data54_ARCACHE,
        ARPROT => m_axi_data54_ARPROT,
        ARQOS => m_axi_data54_ARQOS,
        ARREGION => m_axi_data54_ARREGION,
        ARUSER => m_axi_data54_ARUSER,
        RVALID => m_axi_data54_RVALID,
        RREADY => m_axi_data54_RREADY,
        RDATA => m_axi_data54_RDATA,
        RLAST => m_axi_data54_RLAST,
        RID => m_axi_data54_RID,
        RUSER => m_axi_data54_RUSER,
        RRESP => m_axi_data54_RRESP,
        BVALID => m_axi_data54_BVALID,
        BREADY => m_axi_data54_BREADY,
        BRESP => m_axi_data54_BRESP,
        BID => m_axi_data54_BID,
        BUSER => m_axi_data54_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_9_U0_m_axi_betas_ARVALID,
        I_ARREADY => data54_ARREADY,
        I_ARADDR => inter_layer_9_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_9_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_9_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_9_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_9_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_9_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_9_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_9_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_9_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_9_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_9_U0_m_axi_betas_ARREGION,
        I_RVALID => data54_RVALID,
        I_RREADY => inter_layer_9_U0_m_axi_betas_RREADY,
        I_RDATA => data54_RDATA,
        I_RID => data54_RID,
        I_RUSER => data54_RUSER,
        I_RRESP => data54_RRESP,
        I_RLAST => data54_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data54_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data54_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data54_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data54_BRESP,
        I_BID => data54_BID,
        I_BUSER => data54_BUSER);

    moblie_net_data27_m_axi_U : component moblie_net_data27_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA27_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA27_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA27_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA27_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA27_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA27_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA27_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA27_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA27_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA27_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA27_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data27_AWVALID,
        AWREADY => m_axi_data27_AWREADY,
        AWADDR => m_axi_data27_AWADDR,
        AWID => m_axi_data27_AWID,
        AWLEN => m_axi_data27_AWLEN,
        AWSIZE => m_axi_data27_AWSIZE,
        AWBURST => m_axi_data27_AWBURST,
        AWLOCK => m_axi_data27_AWLOCK,
        AWCACHE => m_axi_data27_AWCACHE,
        AWPROT => m_axi_data27_AWPROT,
        AWQOS => m_axi_data27_AWQOS,
        AWREGION => m_axi_data27_AWREGION,
        AWUSER => m_axi_data27_AWUSER,
        WVALID => m_axi_data27_WVALID,
        WREADY => m_axi_data27_WREADY,
        WDATA => m_axi_data27_WDATA,
        WSTRB => m_axi_data27_WSTRB,
        WLAST => m_axi_data27_WLAST,
        WID => m_axi_data27_WID,
        WUSER => m_axi_data27_WUSER,
        ARVALID => m_axi_data27_ARVALID,
        ARREADY => m_axi_data27_ARREADY,
        ARADDR => m_axi_data27_ARADDR,
        ARID => m_axi_data27_ARID,
        ARLEN => m_axi_data27_ARLEN,
        ARSIZE => m_axi_data27_ARSIZE,
        ARBURST => m_axi_data27_ARBURST,
        ARLOCK => m_axi_data27_ARLOCK,
        ARCACHE => m_axi_data27_ARCACHE,
        ARPROT => m_axi_data27_ARPROT,
        ARQOS => m_axi_data27_ARQOS,
        ARREGION => m_axi_data27_ARREGION,
        ARUSER => m_axi_data27_ARUSER,
        RVALID => m_axi_data27_RVALID,
        RREADY => m_axi_data27_RREADY,
        RDATA => m_axi_data27_RDATA,
        RLAST => m_axi_data27_RLAST,
        RID => m_axi_data27_RID,
        RUSER => m_axi_data27_RUSER,
        RRESP => m_axi_data27_RRESP,
        BVALID => m_axi_data27_BVALID,
        BREADY => m_axi_data27_BREADY,
        BRESP => m_axi_data27_BRESP,
        BID => m_axi_data27_BID,
        BUSER => m_axi_data27_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data27_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data27_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data27_RDATA,
        I_RID => data27_RID,
        I_RUSER => data27_RUSER,
        I_RRESP => data27_RRESP,
        I_RLAST => data27_RLAST,
        I_AWVALID => inter_layer_9_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data27_AWREADY,
        I_AWADDR => inter_layer_9_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_9_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_9_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_9_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_9_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_9_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_9_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_9_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_9_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_9_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_9_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_9_U0_m_axi_outputs_WVALID,
        I_WREADY => data27_WREADY,
        I_WDATA => inter_layer_9_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_9_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_9_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_9_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_9_U0_m_axi_outputs_WSTRB,
        I_BVALID => data27_BVALID,
        I_BREADY => inter_layer_9_U0_m_axi_outputs_BREADY,
        I_BRESP => data27_BRESP,
        I_BID => data27_BID,
        I_BUSER => data27_BUSER);

    moblie_net_data13_m_axi_U : component moblie_net_data13_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA13_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA13_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA13_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA13_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA13_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA13_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA13_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA13_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA13_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA13_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA13_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data13_AWVALID,
        AWREADY => m_axi_data13_AWREADY,
        AWADDR => m_axi_data13_AWADDR,
        AWID => m_axi_data13_AWID,
        AWLEN => m_axi_data13_AWLEN,
        AWSIZE => m_axi_data13_AWSIZE,
        AWBURST => m_axi_data13_AWBURST,
        AWLOCK => m_axi_data13_AWLOCK,
        AWCACHE => m_axi_data13_AWCACHE,
        AWPROT => m_axi_data13_AWPROT,
        AWQOS => m_axi_data13_AWQOS,
        AWREGION => m_axi_data13_AWREGION,
        AWUSER => m_axi_data13_AWUSER,
        WVALID => m_axi_data13_WVALID,
        WREADY => m_axi_data13_WREADY,
        WDATA => m_axi_data13_WDATA,
        WSTRB => m_axi_data13_WSTRB,
        WLAST => m_axi_data13_WLAST,
        WID => m_axi_data13_WID,
        WUSER => m_axi_data13_WUSER,
        ARVALID => m_axi_data13_ARVALID,
        ARREADY => m_axi_data13_ARREADY,
        ARADDR => m_axi_data13_ARADDR,
        ARID => m_axi_data13_ARID,
        ARLEN => m_axi_data13_ARLEN,
        ARSIZE => m_axi_data13_ARSIZE,
        ARBURST => m_axi_data13_ARBURST,
        ARLOCK => m_axi_data13_ARLOCK,
        ARCACHE => m_axi_data13_ARCACHE,
        ARPROT => m_axi_data13_ARPROT,
        ARQOS => m_axi_data13_ARQOS,
        ARREGION => m_axi_data13_ARREGION,
        ARUSER => m_axi_data13_ARUSER,
        RVALID => m_axi_data13_RVALID,
        RREADY => m_axi_data13_RREADY,
        RDATA => m_axi_data13_RDATA,
        RLAST => m_axi_data13_RLAST,
        RID => m_axi_data13_RID,
        RUSER => m_axi_data13_RUSER,
        RRESP => m_axi_data13_RRESP,
        BVALID => m_axi_data13_BVALID,
        BREADY => m_axi_data13_BREADY,
        BRESP => m_axi_data13_BRESP,
        BID => m_axi_data13_BID,
        BUSER => m_axi_data13_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_3_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data13_ARREADY,
        I_ARADDR => inter_layer_3_U0_m_axi_inputs_ARADDR,
        I_ARID => inter_layer_3_U0_m_axi_inputs_ARID,
        I_ARLEN => inter_layer_3_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => inter_layer_3_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => inter_layer_3_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => inter_layer_3_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => inter_layer_3_U0_m_axi_inputs_ARQOS,
        I_ARPROT => inter_layer_3_U0_m_axi_inputs_ARPROT,
        I_ARUSER => inter_layer_3_U0_m_axi_inputs_ARUSER,
        I_ARBURST => inter_layer_3_U0_m_axi_inputs_ARBURST,
        I_ARREGION => inter_layer_3_U0_m_axi_inputs_ARREGION,
        I_RVALID => data13_RVALID,
        I_RREADY => inter_layer_3_U0_m_axi_inputs_RREADY,
        I_RDATA => data13_RDATA,
        I_RID => data13_RID,
        I_RUSER => data13_RUSER,
        I_RRESP => data13_RRESP,
        I_RLAST => data13_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data13_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data13_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data13_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data13_BRESP,
        I_BID => data13_BID,
        I_BUSER => data13_BUSER);

    moblie_net_data55_m_axi_U : component moblie_net_data55_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA55_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA55_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA55_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA55_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA55_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA55_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA55_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA55_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA55_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA55_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA55_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data55_AWVALID,
        AWREADY => m_axi_data55_AWREADY,
        AWADDR => m_axi_data55_AWADDR,
        AWID => m_axi_data55_AWID,
        AWLEN => m_axi_data55_AWLEN,
        AWSIZE => m_axi_data55_AWSIZE,
        AWBURST => m_axi_data55_AWBURST,
        AWLOCK => m_axi_data55_AWLOCK,
        AWCACHE => m_axi_data55_AWCACHE,
        AWPROT => m_axi_data55_AWPROT,
        AWQOS => m_axi_data55_AWQOS,
        AWREGION => m_axi_data55_AWREGION,
        AWUSER => m_axi_data55_AWUSER,
        WVALID => m_axi_data55_WVALID,
        WREADY => m_axi_data55_WREADY,
        WDATA => m_axi_data55_WDATA,
        WSTRB => m_axi_data55_WSTRB,
        WLAST => m_axi_data55_WLAST,
        WID => m_axi_data55_WID,
        WUSER => m_axi_data55_WUSER,
        ARVALID => m_axi_data55_ARVALID,
        ARREADY => m_axi_data55_ARREADY,
        ARADDR => m_axi_data55_ARADDR,
        ARID => m_axi_data55_ARID,
        ARLEN => m_axi_data55_ARLEN,
        ARSIZE => m_axi_data55_ARSIZE,
        ARBURST => m_axi_data55_ARBURST,
        ARLOCK => m_axi_data55_ARLOCK,
        ARCACHE => m_axi_data55_ARCACHE,
        ARPROT => m_axi_data55_ARPROT,
        ARQOS => m_axi_data55_ARQOS,
        ARREGION => m_axi_data55_ARREGION,
        ARUSER => m_axi_data55_ARUSER,
        RVALID => m_axi_data55_RVALID,
        RREADY => m_axi_data55_RREADY,
        RDATA => m_axi_data55_RDATA,
        RLAST => m_axi_data55_RLAST,
        RID => m_axi_data55_RID,
        RUSER => m_axi_data55_RUSER,
        RRESP => m_axi_data55_RRESP,
        BVALID => m_axi_data55_BVALID,
        BREADY => m_axi_data55_BREADY,
        BRESP => m_axi_data55_BRESP,
        BID => m_axi_data55_BID,
        BUSER => m_axi_data55_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_3_U0_m_axi_weights_ARVALID,
        I_ARREADY => data55_ARREADY,
        I_ARADDR => inter_layer_3_U0_m_axi_weights_ARADDR,
        I_ARID => inter_layer_3_U0_m_axi_weights_ARID,
        I_ARLEN => inter_layer_3_U0_m_axi_weights_ARLEN,
        I_ARSIZE => inter_layer_3_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => inter_layer_3_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => inter_layer_3_U0_m_axi_weights_ARCACHE,
        I_ARQOS => inter_layer_3_U0_m_axi_weights_ARQOS,
        I_ARPROT => inter_layer_3_U0_m_axi_weights_ARPROT,
        I_ARUSER => inter_layer_3_U0_m_axi_weights_ARUSER,
        I_ARBURST => inter_layer_3_U0_m_axi_weights_ARBURST,
        I_ARREGION => inter_layer_3_U0_m_axi_weights_ARREGION,
        I_RVALID => data55_RVALID,
        I_RREADY => inter_layer_3_U0_m_axi_weights_RREADY,
        I_RDATA => data55_RDATA,
        I_RID => data55_RID,
        I_RUSER => data55_RUSER,
        I_RRESP => data55_RRESP,
        I_RLAST => data55_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data55_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data55_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data55_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data55_BRESP,
        I_BID => data55_BID,
        I_BUSER => data55_BUSER);

    moblie_net_data56_m_axi_U : component moblie_net_data56_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA56_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA56_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA56_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA56_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA56_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA56_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA56_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA56_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA56_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA56_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA56_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data56_AWVALID,
        AWREADY => m_axi_data56_AWREADY,
        AWADDR => m_axi_data56_AWADDR,
        AWID => m_axi_data56_AWID,
        AWLEN => m_axi_data56_AWLEN,
        AWSIZE => m_axi_data56_AWSIZE,
        AWBURST => m_axi_data56_AWBURST,
        AWLOCK => m_axi_data56_AWLOCK,
        AWCACHE => m_axi_data56_AWCACHE,
        AWPROT => m_axi_data56_AWPROT,
        AWQOS => m_axi_data56_AWQOS,
        AWREGION => m_axi_data56_AWREGION,
        AWUSER => m_axi_data56_AWUSER,
        WVALID => m_axi_data56_WVALID,
        WREADY => m_axi_data56_WREADY,
        WDATA => m_axi_data56_WDATA,
        WSTRB => m_axi_data56_WSTRB,
        WLAST => m_axi_data56_WLAST,
        WID => m_axi_data56_WID,
        WUSER => m_axi_data56_WUSER,
        ARVALID => m_axi_data56_ARVALID,
        ARREADY => m_axi_data56_ARREADY,
        ARADDR => m_axi_data56_ARADDR,
        ARID => m_axi_data56_ARID,
        ARLEN => m_axi_data56_ARLEN,
        ARSIZE => m_axi_data56_ARSIZE,
        ARBURST => m_axi_data56_ARBURST,
        ARLOCK => m_axi_data56_ARLOCK,
        ARCACHE => m_axi_data56_ARCACHE,
        ARPROT => m_axi_data56_ARPROT,
        ARQOS => m_axi_data56_ARQOS,
        ARREGION => m_axi_data56_ARREGION,
        ARUSER => m_axi_data56_ARUSER,
        RVALID => m_axi_data56_RVALID,
        RREADY => m_axi_data56_RREADY,
        RDATA => m_axi_data56_RDATA,
        RLAST => m_axi_data56_RLAST,
        RID => m_axi_data56_RID,
        RUSER => m_axi_data56_RUSER,
        RRESP => m_axi_data56_RRESP,
        BVALID => m_axi_data56_BVALID,
        BREADY => m_axi_data56_BREADY,
        BRESP => m_axi_data56_BRESP,
        BID => m_axi_data56_BID,
        BUSER => m_axi_data56_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => inter_layer_3_U0_m_axi_betas_ARVALID,
        I_ARREADY => data56_ARREADY,
        I_ARADDR => inter_layer_3_U0_m_axi_betas_ARADDR,
        I_ARID => inter_layer_3_U0_m_axi_betas_ARID,
        I_ARLEN => inter_layer_3_U0_m_axi_betas_ARLEN,
        I_ARSIZE => inter_layer_3_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => inter_layer_3_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => inter_layer_3_U0_m_axi_betas_ARCACHE,
        I_ARQOS => inter_layer_3_U0_m_axi_betas_ARQOS,
        I_ARPROT => inter_layer_3_U0_m_axi_betas_ARPROT,
        I_ARUSER => inter_layer_3_U0_m_axi_betas_ARUSER,
        I_ARBURST => inter_layer_3_U0_m_axi_betas_ARBURST,
        I_ARREGION => inter_layer_3_U0_m_axi_betas_ARREGION,
        I_RVALID => data56_RVALID,
        I_RREADY => inter_layer_3_U0_m_axi_betas_RREADY,
        I_RDATA => data56_RDATA,
        I_RID => data56_RID,
        I_RUSER => data56_RUSER,
        I_RRESP => data56_RRESP,
        I_RLAST => data56_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data56_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data56_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data56_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data56_BRESP,
        I_BID => data56_BID,
        I_BUSER => data56_BUSER);

    moblie_net_data28_m_axi_U : component moblie_net_data28_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA28_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA28_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA28_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA28_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA28_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA28_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA28_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA28_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA28_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA28_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA28_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data28_AWVALID,
        AWREADY => m_axi_data28_AWREADY,
        AWADDR => m_axi_data28_AWADDR,
        AWID => m_axi_data28_AWID,
        AWLEN => m_axi_data28_AWLEN,
        AWSIZE => m_axi_data28_AWSIZE,
        AWBURST => m_axi_data28_AWBURST,
        AWLOCK => m_axi_data28_AWLOCK,
        AWCACHE => m_axi_data28_AWCACHE,
        AWPROT => m_axi_data28_AWPROT,
        AWQOS => m_axi_data28_AWQOS,
        AWREGION => m_axi_data28_AWREGION,
        AWUSER => m_axi_data28_AWUSER,
        WVALID => m_axi_data28_WVALID,
        WREADY => m_axi_data28_WREADY,
        WDATA => m_axi_data28_WDATA,
        WSTRB => m_axi_data28_WSTRB,
        WLAST => m_axi_data28_WLAST,
        WID => m_axi_data28_WID,
        WUSER => m_axi_data28_WUSER,
        ARVALID => m_axi_data28_ARVALID,
        ARREADY => m_axi_data28_ARREADY,
        ARADDR => m_axi_data28_ARADDR,
        ARID => m_axi_data28_ARID,
        ARLEN => m_axi_data28_ARLEN,
        ARSIZE => m_axi_data28_ARSIZE,
        ARBURST => m_axi_data28_ARBURST,
        ARLOCK => m_axi_data28_ARLOCK,
        ARCACHE => m_axi_data28_ARCACHE,
        ARPROT => m_axi_data28_ARPROT,
        ARQOS => m_axi_data28_ARQOS,
        ARREGION => m_axi_data28_ARREGION,
        ARUSER => m_axi_data28_ARUSER,
        RVALID => m_axi_data28_RVALID,
        RREADY => m_axi_data28_RREADY,
        RDATA => m_axi_data28_RDATA,
        RLAST => m_axi_data28_RLAST,
        RID => m_axi_data28_RID,
        RUSER => m_axi_data28_RUSER,
        RRESP => m_axi_data28_RRESP,
        BVALID => m_axi_data28_BVALID,
        BREADY => m_axi_data28_BREADY,
        BRESP => m_axi_data28_BRESP,
        BID => m_axi_data28_BID,
        BUSER => m_axi_data28_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data28_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data28_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data28_RDATA,
        I_RID => data28_RID,
        I_RUSER => data28_RUSER,
        I_RRESP => data28_RRESP,
        I_RLAST => data28_RLAST,
        I_AWVALID => inter_layer_3_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data28_AWREADY,
        I_AWADDR => inter_layer_3_U0_m_axi_outputs_AWADDR,
        I_AWID => inter_layer_3_U0_m_axi_outputs_AWID,
        I_AWLEN => inter_layer_3_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => inter_layer_3_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => inter_layer_3_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => inter_layer_3_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => inter_layer_3_U0_m_axi_outputs_AWQOS,
        I_AWPROT => inter_layer_3_U0_m_axi_outputs_AWPROT,
        I_AWUSER => inter_layer_3_U0_m_axi_outputs_AWUSER,
        I_AWBURST => inter_layer_3_U0_m_axi_outputs_AWBURST,
        I_AWREGION => inter_layer_3_U0_m_axi_outputs_AWREGION,
        I_WVALID => inter_layer_3_U0_m_axi_outputs_WVALID,
        I_WREADY => data28_WREADY,
        I_WDATA => inter_layer_3_U0_m_axi_outputs_WDATA,
        I_WID => inter_layer_3_U0_m_axi_outputs_WID,
        I_WUSER => inter_layer_3_U0_m_axi_outputs_WUSER,
        I_WLAST => inter_layer_3_U0_m_axi_outputs_WLAST,
        I_WSTRB => inter_layer_3_U0_m_axi_outputs_WSTRB,
        I_BVALID => data28_BVALID,
        I_BREADY => inter_layer_3_U0_m_axi_outputs_BREADY,
        I_BRESP => data28_BRESP,
        I_BID => data28_BID,
        I_BUSER => data28_BUSER);

    moblie_net_data14_m_axi_U : component moblie_net_data14_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA14_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA14_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA14_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA14_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA14_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA14_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA14_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA14_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA14_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA14_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA14_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data14_AWVALID,
        AWREADY => m_axi_data14_AWREADY,
        AWADDR => m_axi_data14_AWADDR,
        AWID => m_axi_data14_AWID,
        AWLEN => m_axi_data14_AWLEN,
        AWSIZE => m_axi_data14_AWSIZE,
        AWBURST => m_axi_data14_AWBURST,
        AWLOCK => m_axi_data14_AWLOCK,
        AWCACHE => m_axi_data14_AWCACHE,
        AWPROT => m_axi_data14_AWPROT,
        AWQOS => m_axi_data14_AWQOS,
        AWREGION => m_axi_data14_AWREGION,
        AWUSER => m_axi_data14_AWUSER,
        WVALID => m_axi_data14_WVALID,
        WREADY => m_axi_data14_WREADY,
        WDATA => m_axi_data14_WDATA,
        WSTRB => m_axi_data14_WSTRB,
        WLAST => m_axi_data14_WLAST,
        WID => m_axi_data14_WID,
        WUSER => m_axi_data14_WUSER,
        ARVALID => m_axi_data14_ARVALID,
        ARREADY => m_axi_data14_ARREADY,
        ARADDR => m_axi_data14_ARADDR,
        ARID => m_axi_data14_ARID,
        ARLEN => m_axi_data14_ARLEN,
        ARSIZE => m_axi_data14_ARSIZE,
        ARBURST => m_axi_data14_ARBURST,
        ARLOCK => m_axi_data14_ARLOCK,
        ARCACHE => m_axi_data14_ARCACHE,
        ARPROT => m_axi_data14_ARPROT,
        ARQOS => m_axi_data14_ARQOS,
        ARREGION => m_axi_data14_ARREGION,
        ARUSER => m_axi_data14_ARUSER,
        RVALID => m_axi_data14_RVALID,
        RREADY => m_axi_data14_RREADY,
        RDATA => m_axi_data14_RDATA,
        RLAST => m_axi_data14_RLAST,
        RID => m_axi_data14_RID,
        RUSER => m_axi_data14_RUSER,
        RRESP => m_axi_data14_RRESP,
        BVALID => m_axi_data14_BVALID,
        BREADY => m_axi_data14_BREADY,
        BRESP => m_axi_data14_BRESP,
        BID => m_axi_data14_BID,
        BUSER => m_axi_data14_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => penult_layer_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data14_ARREADY,
        I_ARADDR => penult_layer_U0_m_axi_inputs_ARADDR,
        I_ARID => penult_layer_U0_m_axi_inputs_ARID,
        I_ARLEN => penult_layer_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => penult_layer_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => penult_layer_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => penult_layer_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => penult_layer_U0_m_axi_inputs_ARQOS,
        I_ARPROT => penult_layer_U0_m_axi_inputs_ARPROT,
        I_ARUSER => penult_layer_U0_m_axi_inputs_ARUSER,
        I_ARBURST => penult_layer_U0_m_axi_inputs_ARBURST,
        I_ARREGION => penult_layer_U0_m_axi_inputs_ARREGION,
        I_RVALID => data14_RVALID,
        I_RREADY => penult_layer_U0_m_axi_inputs_RREADY,
        I_RDATA => data14_RDATA,
        I_RID => data14_RID,
        I_RUSER => data14_RUSER,
        I_RRESP => data14_RRESP,
        I_RLAST => data14_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data14_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data14_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data14_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data14_BRESP,
        I_BID => data14_BID,
        I_BUSER => data14_BUSER);

    moblie_net_data29_m_axi_U : component moblie_net_data29_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA29_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA29_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA29_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA29_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA29_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA29_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA29_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA29_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA29_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA29_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA29_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data29_AWVALID,
        AWREADY => m_axi_data29_AWREADY,
        AWADDR => m_axi_data29_AWADDR,
        AWID => m_axi_data29_AWID,
        AWLEN => m_axi_data29_AWLEN,
        AWSIZE => m_axi_data29_AWSIZE,
        AWBURST => m_axi_data29_AWBURST,
        AWLOCK => m_axi_data29_AWLOCK,
        AWCACHE => m_axi_data29_AWCACHE,
        AWPROT => m_axi_data29_AWPROT,
        AWQOS => m_axi_data29_AWQOS,
        AWREGION => m_axi_data29_AWREGION,
        AWUSER => m_axi_data29_AWUSER,
        WVALID => m_axi_data29_WVALID,
        WREADY => m_axi_data29_WREADY,
        WDATA => m_axi_data29_WDATA,
        WSTRB => m_axi_data29_WSTRB,
        WLAST => m_axi_data29_WLAST,
        WID => m_axi_data29_WID,
        WUSER => m_axi_data29_WUSER,
        ARVALID => m_axi_data29_ARVALID,
        ARREADY => m_axi_data29_ARREADY,
        ARADDR => m_axi_data29_ARADDR,
        ARID => m_axi_data29_ARID,
        ARLEN => m_axi_data29_ARLEN,
        ARSIZE => m_axi_data29_ARSIZE,
        ARBURST => m_axi_data29_ARBURST,
        ARLOCK => m_axi_data29_ARLOCK,
        ARCACHE => m_axi_data29_ARCACHE,
        ARPROT => m_axi_data29_ARPROT,
        ARQOS => m_axi_data29_ARQOS,
        ARREGION => m_axi_data29_ARREGION,
        ARUSER => m_axi_data29_ARUSER,
        RVALID => m_axi_data29_RVALID,
        RREADY => m_axi_data29_RREADY,
        RDATA => m_axi_data29_RDATA,
        RLAST => m_axi_data29_RLAST,
        RID => m_axi_data29_RID,
        RUSER => m_axi_data29_RUSER,
        RRESP => m_axi_data29_RRESP,
        BVALID => m_axi_data29_BVALID,
        BREADY => m_axi_data29_BREADY,
        BRESP => m_axi_data29_BRESP,
        BID => m_axi_data29_BID,
        BUSER => m_axi_data29_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data29_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data29_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data29_RDATA,
        I_RID => data29_RID,
        I_RUSER => data29_RUSER,
        I_RRESP => data29_RRESP,
        I_RLAST => data29_RLAST,
        I_AWVALID => penult_layer_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data29_AWREADY,
        I_AWADDR => penult_layer_U0_m_axi_outputs_AWADDR,
        I_AWID => penult_layer_U0_m_axi_outputs_AWID,
        I_AWLEN => penult_layer_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => penult_layer_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => penult_layer_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => penult_layer_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => penult_layer_U0_m_axi_outputs_AWQOS,
        I_AWPROT => penult_layer_U0_m_axi_outputs_AWPROT,
        I_AWUSER => penult_layer_U0_m_axi_outputs_AWUSER,
        I_AWBURST => penult_layer_U0_m_axi_outputs_AWBURST,
        I_AWREGION => penult_layer_U0_m_axi_outputs_AWREGION,
        I_WVALID => penult_layer_U0_m_axi_outputs_WVALID,
        I_WREADY => data29_WREADY,
        I_WDATA => penult_layer_U0_m_axi_outputs_WDATA,
        I_WID => penult_layer_U0_m_axi_outputs_WID,
        I_WUSER => penult_layer_U0_m_axi_outputs_WUSER,
        I_WLAST => penult_layer_U0_m_axi_outputs_WLAST,
        I_WSTRB => penult_layer_U0_m_axi_outputs_WSTRB,
        I_BVALID => data29_BVALID,
        I_BREADY => penult_layer_U0_m_axi_outputs_BREADY,
        I_BRESP => data29_BRESP,
        I_BID => data29_BID,
        I_BUSER => data29_BUSER);

    moblie_net_data15_m_axi_U : component moblie_net_data15_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA15_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA15_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA15_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA15_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA15_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA15_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA15_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA15_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA15_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA15_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA15_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data15_AWVALID,
        AWREADY => m_axi_data15_AWREADY,
        AWADDR => m_axi_data15_AWADDR,
        AWID => m_axi_data15_AWID,
        AWLEN => m_axi_data15_AWLEN,
        AWSIZE => m_axi_data15_AWSIZE,
        AWBURST => m_axi_data15_AWBURST,
        AWLOCK => m_axi_data15_AWLOCK,
        AWCACHE => m_axi_data15_AWCACHE,
        AWPROT => m_axi_data15_AWPROT,
        AWQOS => m_axi_data15_AWQOS,
        AWREGION => m_axi_data15_AWREGION,
        AWUSER => m_axi_data15_AWUSER,
        WVALID => m_axi_data15_WVALID,
        WREADY => m_axi_data15_WREADY,
        WDATA => m_axi_data15_WDATA,
        WSTRB => m_axi_data15_WSTRB,
        WLAST => m_axi_data15_WLAST,
        WID => m_axi_data15_WID,
        WUSER => m_axi_data15_WUSER,
        ARVALID => m_axi_data15_ARVALID,
        ARREADY => m_axi_data15_ARREADY,
        ARADDR => m_axi_data15_ARADDR,
        ARID => m_axi_data15_ARID,
        ARLEN => m_axi_data15_ARLEN,
        ARSIZE => m_axi_data15_ARSIZE,
        ARBURST => m_axi_data15_ARBURST,
        ARLOCK => m_axi_data15_ARLOCK,
        ARCACHE => m_axi_data15_ARCACHE,
        ARPROT => m_axi_data15_ARPROT,
        ARQOS => m_axi_data15_ARQOS,
        ARREGION => m_axi_data15_ARREGION,
        ARUSER => m_axi_data15_ARUSER,
        RVALID => m_axi_data15_RVALID,
        RREADY => m_axi_data15_RREADY,
        RDATA => m_axi_data15_RDATA,
        RLAST => m_axi_data15_RLAST,
        RID => m_axi_data15_RID,
        RUSER => m_axi_data15_RUSER,
        RRESP => m_axi_data15_RRESP,
        BVALID => m_axi_data15_BVALID,
        BREADY => m_axi_data15_BREADY,
        BRESP => m_axi_data15_BRESP,
        BID => m_axi_data15_BID,
        BUSER => m_axi_data15_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => last_layer_U0_m_axi_inputs_ARVALID,
        I_ARREADY => data15_ARREADY,
        I_ARADDR => last_layer_U0_m_axi_inputs_ARADDR,
        I_ARID => last_layer_U0_m_axi_inputs_ARID,
        I_ARLEN => last_layer_U0_m_axi_inputs_ARLEN,
        I_ARSIZE => last_layer_U0_m_axi_inputs_ARSIZE,
        I_ARLOCK => last_layer_U0_m_axi_inputs_ARLOCK,
        I_ARCACHE => last_layer_U0_m_axi_inputs_ARCACHE,
        I_ARQOS => last_layer_U0_m_axi_inputs_ARQOS,
        I_ARPROT => last_layer_U0_m_axi_inputs_ARPROT,
        I_ARUSER => last_layer_U0_m_axi_inputs_ARUSER,
        I_ARBURST => last_layer_U0_m_axi_inputs_ARBURST,
        I_ARREGION => last_layer_U0_m_axi_inputs_ARREGION,
        I_RVALID => data15_RVALID,
        I_RREADY => last_layer_U0_m_axi_inputs_RREADY,
        I_RDATA => data15_RDATA,
        I_RID => data15_RID,
        I_RUSER => data15_RUSER,
        I_RRESP => data15_RRESP,
        I_RLAST => data15_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data15_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data15_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data15_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data15_BRESP,
        I_BID => data15_BID,
        I_BUSER => data15_BUSER);

    moblie_net_data57_m_axi_U : component moblie_net_data57_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA57_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA57_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA57_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA57_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA57_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA57_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA57_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA57_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA57_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA57_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA57_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data57_AWVALID,
        AWREADY => m_axi_data57_AWREADY,
        AWADDR => m_axi_data57_AWADDR,
        AWID => m_axi_data57_AWID,
        AWLEN => m_axi_data57_AWLEN,
        AWSIZE => m_axi_data57_AWSIZE,
        AWBURST => m_axi_data57_AWBURST,
        AWLOCK => m_axi_data57_AWLOCK,
        AWCACHE => m_axi_data57_AWCACHE,
        AWPROT => m_axi_data57_AWPROT,
        AWQOS => m_axi_data57_AWQOS,
        AWREGION => m_axi_data57_AWREGION,
        AWUSER => m_axi_data57_AWUSER,
        WVALID => m_axi_data57_WVALID,
        WREADY => m_axi_data57_WREADY,
        WDATA => m_axi_data57_WDATA,
        WSTRB => m_axi_data57_WSTRB,
        WLAST => m_axi_data57_WLAST,
        WID => m_axi_data57_WID,
        WUSER => m_axi_data57_WUSER,
        ARVALID => m_axi_data57_ARVALID,
        ARREADY => m_axi_data57_ARREADY,
        ARADDR => m_axi_data57_ARADDR,
        ARID => m_axi_data57_ARID,
        ARLEN => m_axi_data57_ARLEN,
        ARSIZE => m_axi_data57_ARSIZE,
        ARBURST => m_axi_data57_ARBURST,
        ARLOCK => m_axi_data57_ARLOCK,
        ARCACHE => m_axi_data57_ARCACHE,
        ARPROT => m_axi_data57_ARPROT,
        ARQOS => m_axi_data57_ARQOS,
        ARREGION => m_axi_data57_ARREGION,
        ARUSER => m_axi_data57_ARUSER,
        RVALID => m_axi_data57_RVALID,
        RREADY => m_axi_data57_RREADY,
        RDATA => m_axi_data57_RDATA,
        RLAST => m_axi_data57_RLAST,
        RID => m_axi_data57_RID,
        RUSER => m_axi_data57_RUSER,
        RRESP => m_axi_data57_RRESP,
        BVALID => m_axi_data57_BVALID,
        BREADY => m_axi_data57_BREADY,
        BRESP => m_axi_data57_BRESP,
        BID => m_axi_data57_BID,
        BUSER => m_axi_data57_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => last_layer_U0_m_axi_weights_ARVALID,
        I_ARREADY => data57_ARREADY,
        I_ARADDR => last_layer_U0_m_axi_weights_ARADDR,
        I_ARID => last_layer_U0_m_axi_weights_ARID,
        I_ARLEN => last_layer_U0_m_axi_weights_ARLEN,
        I_ARSIZE => last_layer_U0_m_axi_weights_ARSIZE,
        I_ARLOCK => last_layer_U0_m_axi_weights_ARLOCK,
        I_ARCACHE => last_layer_U0_m_axi_weights_ARCACHE,
        I_ARQOS => last_layer_U0_m_axi_weights_ARQOS,
        I_ARPROT => last_layer_U0_m_axi_weights_ARPROT,
        I_ARUSER => last_layer_U0_m_axi_weights_ARUSER,
        I_ARBURST => last_layer_U0_m_axi_weights_ARBURST,
        I_ARREGION => last_layer_U0_m_axi_weights_ARREGION,
        I_RVALID => data57_RVALID,
        I_RREADY => last_layer_U0_m_axi_weights_RREADY,
        I_RDATA => data57_RDATA,
        I_RID => data57_RID,
        I_RUSER => data57_RUSER,
        I_RRESP => data57_RRESP,
        I_RLAST => data57_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data57_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data57_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data57_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data57_BRESP,
        I_BID => data57_BID,
        I_BUSER => data57_BUSER);

    moblie_net_data58_m_axi_U : component moblie_net_data58_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA58_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA58_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA58_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA58_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA58_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA58_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA58_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA58_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA58_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA58_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA58_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data58_AWVALID,
        AWREADY => m_axi_data58_AWREADY,
        AWADDR => m_axi_data58_AWADDR,
        AWID => m_axi_data58_AWID,
        AWLEN => m_axi_data58_AWLEN,
        AWSIZE => m_axi_data58_AWSIZE,
        AWBURST => m_axi_data58_AWBURST,
        AWLOCK => m_axi_data58_AWLOCK,
        AWCACHE => m_axi_data58_AWCACHE,
        AWPROT => m_axi_data58_AWPROT,
        AWQOS => m_axi_data58_AWQOS,
        AWREGION => m_axi_data58_AWREGION,
        AWUSER => m_axi_data58_AWUSER,
        WVALID => m_axi_data58_WVALID,
        WREADY => m_axi_data58_WREADY,
        WDATA => m_axi_data58_WDATA,
        WSTRB => m_axi_data58_WSTRB,
        WLAST => m_axi_data58_WLAST,
        WID => m_axi_data58_WID,
        WUSER => m_axi_data58_WUSER,
        ARVALID => m_axi_data58_ARVALID,
        ARREADY => m_axi_data58_ARREADY,
        ARADDR => m_axi_data58_ARADDR,
        ARID => m_axi_data58_ARID,
        ARLEN => m_axi_data58_ARLEN,
        ARSIZE => m_axi_data58_ARSIZE,
        ARBURST => m_axi_data58_ARBURST,
        ARLOCK => m_axi_data58_ARLOCK,
        ARCACHE => m_axi_data58_ARCACHE,
        ARPROT => m_axi_data58_ARPROT,
        ARQOS => m_axi_data58_ARQOS,
        ARREGION => m_axi_data58_ARREGION,
        ARUSER => m_axi_data58_ARUSER,
        RVALID => m_axi_data58_RVALID,
        RREADY => m_axi_data58_RREADY,
        RDATA => m_axi_data58_RDATA,
        RLAST => m_axi_data58_RLAST,
        RID => m_axi_data58_RID,
        RUSER => m_axi_data58_RUSER,
        RRESP => m_axi_data58_RRESP,
        BVALID => m_axi_data58_BVALID,
        BREADY => m_axi_data58_BREADY,
        BRESP => m_axi_data58_BRESP,
        BID => m_axi_data58_BID,
        BUSER => m_axi_data58_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => last_layer_U0_m_axi_betas_ARVALID,
        I_ARREADY => data58_ARREADY,
        I_ARADDR => last_layer_U0_m_axi_betas_ARADDR,
        I_ARID => last_layer_U0_m_axi_betas_ARID,
        I_ARLEN => last_layer_U0_m_axi_betas_ARLEN,
        I_ARSIZE => last_layer_U0_m_axi_betas_ARSIZE,
        I_ARLOCK => last_layer_U0_m_axi_betas_ARLOCK,
        I_ARCACHE => last_layer_U0_m_axi_betas_ARCACHE,
        I_ARQOS => last_layer_U0_m_axi_betas_ARQOS,
        I_ARPROT => last_layer_U0_m_axi_betas_ARPROT,
        I_ARUSER => last_layer_U0_m_axi_betas_ARUSER,
        I_ARBURST => last_layer_U0_m_axi_betas_ARBURST,
        I_ARREGION => last_layer_U0_m_axi_betas_ARREGION,
        I_RVALID => data58_RVALID,
        I_RREADY => last_layer_U0_m_axi_betas_RREADY,
        I_RDATA => data58_RDATA,
        I_RID => data58_RID,
        I_RUSER => data58_RUSER,
        I_RRESP => data58_RRESP,
        I_RLAST => data58_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data58_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data58_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => data58_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => data58_BRESP,
        I_BID => data58_BID,
        I_BUSER => data58_BUSER);

    moblie_net_data30_m_axi_U : component moblie_net_data30_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA30_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA30_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA30_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA30_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA30_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA30_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA30_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA30_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA30_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA30_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA30_CACHE_VALUE)
    port map (
        AWVALID => m_axi_data30_AWVALID,
        AWREADY => m_axi_data30_AWREADY,
        AWADDR => m_axi_data30_AWADDR,
        AWID => m_axi_data30_AWID,
        AWLEN => m_axi_data30_AWLEN,
        AWSIZE => m_axi_data30_AWSIZE,
        AWBURST => m_axi_data30_AWBURST,
        AWLOCK => m_axi_data30_AWLOCK,
        AWCACHE => m_axi_data30_AWCACHE,
        AWPROT => m_axi_data30_AWPROT,
        AWQOS => m_axi_data30_AWQOS,
        AWREGION => m_axi_data30_AWREGION,
        AWUSER => m_axi_data30_AWUSER,
        WVALID => m_axi_data30_WVALID,
        WREADY => m_axi_data30_WREADY,
        WDATA => m_axi_data30_WDATA,
        WSTRB => m_axi_data30_WSTRB,
        WLAST => m_axi_data30_WLAST,
        WID => m_axi_data30_WID,
        WUSER => m_axi_data30_WUSER,
        ARVALID => m_axi_data30_ARVALID,
        ARREADY => m_axi_data30_ARREADY,
        ARADDR => m_axi_data30_ARADDR,
        ARID => m_axi_data30_ARID,
        ARLEN => m_axi_data30_ARLEN,
        ARSIZE => m_axi_data30_ARSIZE,
        ARBURST => m_axi_data30_ARBURST,
        ARLOCK => m_axi_data30_ARLOCK,
        ARCACHE => m_axi_data30_ARCACHE,
        ARPROT => m_axi_data30_ARPROT,
        ARQOS => m_axi_data30_ARQOS,
        ARREGION => m_axi_data30_ARREGION,
        ARUSER => m_axi_data30_ARUSER,
        RVALID => m_axi_data30_RVALID,
        RREADY => m_axi_data30_RREADY,
        RDATA => m_axi_data30_RDATA,
        RLAST => m_axi_data30_RLAST,
        RID => m_axi_data30_RID,
        RUSER => m_axi_data30_RUSER,
        RRESP => m_axi_data30_RRESP,
        BVALID => m_axi_data30_BVALID,
        BREADY => m_axi_data30_BREADY,
        BRESP => m_axi_data30_BRESP,
        BID => m_axi_data30_BID,
        BUSER => m_axi_data30_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data30_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => data30_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data30_RDATA,
        I_RID => data30_RID,
        I_RUSER => data30_RUSER,
        I_RRESP => data30_RRESP,
        I_RLAST => data30_RLAST,
        I_AWVALID => last_layer_U0_m_axi_outputs_AWVALID,
        I_AWREADY => data30_AWREADY,
        I_AWADDR => last_layer_U0_m_axi_outputs_AWADDR,
        I_AWID => last_layer_U0_m_axi_outputs_AWID,
        I_AWLEN => last_layer_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => last_layer_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => last_layer_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => last_layer_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => last_layer_U0_m_axi_outputs_AWQOS,
        I_AWPROT => last_layer_U0_m_axi_outputs_AWPROT,
        I_AWUSER => last_layer_U0_m_axi_outputs_AWUSER,
        I_AWBURST => last_layer_U0_m_axi_outputs_AWBURST,
        I_AWREGION => last_layer_U0_m_axi_outputs_AWREGION,
        I_WVALID => last_layer_U0_m_axi_outputs_WVALID,
        I_WREADY => data30_WREADY,
        I_WDATA => last_layer_U0_m_axi_outputs_WDATA,
        I_WID => last_layer_U0_m_axi_outputs_WID,
        I_WUSER => last_layer_U0_m_axi_outputs_WUSER,
        I_WLAST => last_layer_U0_m_axi_outputs_WLAST,
        I_WSTRB => last_layer_U0_m_axi_outputs_WSTRB,
        I_BVALID => data30_BVALID,
        I_BREADY => last_layer_U0_m_axi_outputs_BREADY,
        I_BRESP => data30_BRESP,
        I_BID => data30_BID,
        I_BUSER => data30_BUSER);

    first_layer173_U0 : component first_layer173
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => first_layer173_U0_ap_start,
        ap_done => first_layer173_U0_ap_done,
        ap_continue => first_layer173_U0_ap_continue,
        ap_idle => first_layer173_U0_ap_idle,
        ap_ready => first_layer173_U0_ap_ready,
        m_axi_inputs_AWVALID => first_layer173_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => first_layer173_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => first_layer173_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => first_layer173_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => first_layer173_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => first_layer173_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => first_layer173_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => first_layer173_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => first_layer173_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => first_layer173_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => first_layer173_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => first_layer173_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => first_layer173_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => first_layer173_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => first_layer173_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => first_layer173_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => first_layer173_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => first_layer173_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => first_layer173_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data1_ARREADY,
        m_axi_inputs_ARADDR => first_layer173_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => first_layer173_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => first_layer173_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => first_layer173_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => first_layer173_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => first_layer173_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => first_layer173_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => first_layer173_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => first_layer173_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => first_layer173_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => first_layer173_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data1_RVALID,
        m_axi_inputs_RREADY => first_layer173_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data1_RDATA,
        m_axi_inputs_RLAST => data1_RLAST,
        m_axi_inputs_RID => data1_RID,
        m_axi_inputs_RUSER => data1_RUSER,
        m_axi_inputs_RRESP => data1_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => first_layer173_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset => inputs1,
        m_axi_weights_AWVALID => first_layer173_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => first_layer173_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => first_layer173_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => first_layer173_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => first_layer173_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => first_layer173_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => first_layer173_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => first_layer173_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => first_layer173_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => first_layer173_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => first_layer173_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => first_layer173_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => first_layer173_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => first_layer173_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => first_layer173_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => first_layer173_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => first_layer173_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => first_layer173_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => first_layer173_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data31_ARREADY,
        m_axi_weights_ARADDR => first_layer173_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => first_layer173_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => first_layer173_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => first_layer173_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => first_layer173_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => first_layer173_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => first_layer173_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => first_layer173_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => first_layer173_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => first_layer173_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => first_layer173_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data31_RVALID,
        m_axi_weights_RREADY => first_layer173_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data31_RDATA,
        m_axi_weights_RLAST => data31_RLAST,
        m_axi_weights_RID => data31_RID,
        m_axi_weights_RUSER => data31_RUSER,
        m_axi_weights_RRESP => data31_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => first_layer173_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset => weights1,
        m_axi_betas_AWVALID => first_layer173_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => first_layer173_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => first_layer173_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => first_layer173_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => first_layer173_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => first_layer173_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => first_layer173_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => first_layer173_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => first_layer173_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => first_layer173_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => first_layer173_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => first_layer173_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => first_layer173_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => first_layer173_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => first_layer173_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => first_layer173_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => first_layer173_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => first_layer173_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => first_layer173_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data32_ARREADY,
        m_axi_betas_ARADDR => first_layer173_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => first_layer173_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => first_layer173_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => first_layer173_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => first_layer173_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => first_layer173_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => first_layer173_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => first_layer173_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => first_layer173_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => first_layer173_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => first_layer173_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data32_RVALID,
        m_axi_betas_RREADY => first_layer173_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data32_RDATA,
        m_axi_betas_RLAST => data32_RLAST,
        m_axi_betas_RID => data32_RID,
        m_axi_betas_RUSER => data32_RUSER,
        m_axi_betas_RRESP => data32_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => first_layer173_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset => betas1,
        m_axi_outputs_AWVALID => first_layer173_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data16_AWREADY,
        m_axi_outputs_AWADDR => first_layer173_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => first_layer173_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => first_layer173_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => first_layer173_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => first_layer173_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => first_layer173_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => first_layer173_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => first_layer173_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => first_layer173_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => first_layer173_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => first_layer173_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => first_layer173_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data16_WREADY,
        m_axi_outputs_WDATA => first_layer173_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => first_layer173_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => first_layer173_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => first_layer173_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => first_layer173_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => first_layer173_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => first_layer173_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => first_layer173_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => first_layer173_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => first_layer173_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => first_layer173_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => first_layer173_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => first_layer173_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => first_layer173_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => first_layer173_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => first_layer173_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => first_layer173_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => first_layer173_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data16_BVALID,
        m_axi_outputs_BREADY => first_layer173_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data16_BRESP,
        m_axi_outputs_BID => data16_BID,
        m_axi_outputs_BUSER => data16_BUSER,
        outputs_offset => outputs1,
        nxt_ready_V_din => first_layer173_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => first_ready_V_full_n,
        nxt_ready_V_write => first_layer173_U0_nxt_ready_V_write,
        inputs2 => inputs2,
        weights2 => weights2,
        betas2 => betas2,
        outputs2 => outputs2,
        inputs3 => inputs3,
        weights3 => weights3,
        betas3 => betas3,
        outputs3 => outputs3,
        inputs4 => inputs4,
        weights4 => weights4,
        betas4 => betas4,
        outputs4 => outputs4,
        inputs5 => inputs5,
        weights5 => weights5,
        betas5 => betas5,
        outputs5 => outputs5,
        inputs6 => inputs6,
        weights6 => weights6,
        betas6 => betas6,
        outputs6 => outputs6,
        inputs7 => inputs7,
        weights7 => weights7,
        betas7 => betas7,
        outputs7 => outputs7,
        inputs8 => inputs8,
        weights8 => weights8,
        betas8 => betas8,
        outputs8 => outputs8,
        inputs9 => inputs9,
        weights9 => weights9,
        betas9 => betas9,
        outputs9 => outputs9,
        inputs10 => inputs10,
        weights10 => weights10,
        betas10 => betas10,
        outputs10 => outputs10,
        inputs11 => inputs11,
        weights11 => weights11,
        betas11 => betas11,
        outputs11 => outputs11,
        inputs12 => inputs12,
        weights12 => weights12,
        betas12 => betas12,
        outputs12 => outputs12,
        inputs13 => inputs13,
        weights13 => weights13,
        betas13 => betas13,
        outputs13 => outputs13,
        inputs14 => inputs14,
        outputs14 => outputs14,
        inputs15 => inputs15,
        weights15 => weights15,
        betas15 => betas15,
        outputs15 => outputs15,
        inputs2_out_din => first_layer173_U0_inputs2_out_din,
        inputs2_out_full_n => inputs2_c_full_n,
        inputs2_out_write => first_layer173_U0_inputs2_out_write,
        weights2_out_din => first_layer173_U0_weights2_out_din,
        weights2_out_full_n => weights2_c_full_n,
        weights2_out_write => first_layer173_U0_weights2_out_write,
        betas2_out_din => first_layer173_U0_betas2_out_din,
        betas2_out_full_n => betas2_c_full_n,
        betas2_out_write => first_layer173_U0_betas2_out_write,
        outputs2_out_din => first_layer173_U0_outputs2_out_din,
        outputs2_out_full_n => outputs2_c_full_n,
        outputs2_out_write => first_layer173_U0_outputs2_out_write,
        inputs3_out_din => first_layer173_U0_inputs3_out_din,
        inputs3_out_full_n => inputs3_c_full_n,
        inputs3_out_write => first_layer173_U0_inputs3_out_write,
        weights3_out_din => first_layer173_U0_weights3_out_din,
        weights3_out_full_n => weights3_c_full_n,
        weights3_out_write => first_layer173_U0_weights3_out_write,
        betas3_out_din => first_layer173_U0_betas3_out_din,
        betas3_out_full_n => betas3_c_full_n,
        betas3_out_write => first_layer173_U0_betas3_out_write,
        outputs3_out_din => first_layer173_U0_outputs3_out_din,
        outputs3_out_full_n => outputs3_c_full_n,
        outputs3_out_write => first_layer173_U0_outputs3_out_write,
        inputs4_out_din => first_layer173_U0_inputs4_out_din,
        inputs4_out_full_n => inputs4_c_full_n,
        inputs4_out_write => first_layer173_U0_inputs4_out_write,
        weights4_out_din => first_layer173_U0_weights4_out_din,
        weights4_out_full_n => weights4_c_full_n,
        weights4_out_write => first_layer173_U0_weights4_out_write,
        betas4_out_din => first_layer173_U0_betas4_out_din,
        betas4_out_full_n => betas4_c_full_n,
        betas4_out_write => first_layer173_U0_betas4_out_write,
        outputs4_out_din => first_layer173_U0_outputs4_out_din,
        outputs4_out_full_n => outputs4_c_full_n,
        outputs4_out_write => first_layer173_U0_outputs4_out_write,
        inputs5_out_din => first_layer173_U0_inputs5_out_din,
        inputs5_out_full_n => inputs5_c_full_n,
        inputs5_out_write => first_layer173_U0_inputs5_out_write,
        weights5_out_din => first_layer173_U0_weights5_out_din,
        weights5_out_full_n => weights5_c_full_n,
        weights5_out_write => first_layer173_U0_weights5_out_write,
        betas5_out_din => first_layer173_U0_betas5_out_din,
        betas5_out_full_n => betas5_c_full_n,
        betas5_out_write => first_layer173_U0_betas5_out_write,
        outputs5_out_din => first_layer173_U0_outputs5_out_din,
        outputs5_out_full_n => outputs5_c_full_n,
        outputs5_out_write => first_layer173_U0_outputs5_out_write,
        inputs6_out_din => first_layer173_U0_inputs6_out_din,
        inputs6_out_full_n => inputs6_c_full_n,
        inputs6_out_write => first_layer173_U0_inputs6_out_write,
        weights6_out_din => first_layer173_U0_weights6_out_din,
        weights6_out_full_n => weights6_c_full_n,
        weights6_out_write => first_layer173_U0_weights6_out_write,
        betas6_out_din => first_layer173_U0_betas6_out_din,
        betas6_out_full_n => betas6_c_full_n,
        betas6_out_write => first_layer173_U0_betas6_out_write,
        outputs6_out_din => first_layer173_U0_outputs6_out_din,
        outputs6_out_full_n => outputs6_c_full_n,
        outputs6_out_write => first_layer173_U0_outputs6_out_write,
        inputs7_out_din => first_layer173_U0_inputs7_out_din,
        inputs7_out_full_n => inputs7_c_full_n,
        inputs7_out_write => first_layer173_U0_inputs7_out_write,
        weights7_out_din => first_layer173_U0_weights7_out_din,
        weights7_out_full_n => weights7_c_full_n,
        weights7_out_write => first_layer173_U0_weights7_out_write,
        betas7_out_din => first_layer173_U0_betas7_out_din,
        betas7_out_full_n => betas7_c_full_n,
        betas7_out_write => first_layer173_U0_betas7_out_write,
        outputs7_out_din => first_layer173_U0_outputs7_out_din,
        outputs7_out_full_n => outputs7_c_full_n,
        outputs7_out_write => first_layer173_U0_outputs7_out_write,
        inputs8_out_din => first_layer173_U0_inputs8_out_din,
        inputs8_out_full_n => inputs8_c_full_n,
        inputs8_out_write => first_layer173_U0_inputs8_out_write,
        weights8_out_din => first_layer173_U0_weights8_out_din,
        weights8_out_full_n => weights8_c_full_n,
        weights8_out_write => first_layer173_U0_weights8_out_write,
        betas8_out_din => first_layer173_U0_betas8_out_din,
        betas8_out_full_n => betas8_c_full_n,
        betas8_out_write => first_layer173_U0_betas8_out_write,
        outputs8_out_din => first_layer173_U0_outputs8_out_din,
        outputs8_out_full_n => outputs8_c_full_n,
        outputs8_out_write => first_layer173_U0_outputs8_out_write,
        inputs9_out_din => first_layer173_U0_inputs9_out_din,
        inputs9_out_full_n => inputs9_c_full_n,
        inputs9_out_write => first_layer173_U0_inputs9_out_write,
        weights9_out_din => first_layer173_U0_weights9_out_din,
        weights9_out_full_n => weights9_c_full_n,
        weights9_out_write => first_layer173_U0_weights9_out_write,
        betas9_out_din => first_layer173_U0_betas9_out_din,
        betas9_out_full_n => betas9_c_full_n,
        betas9_out_write => first_layer173_U0_betas9_out_write,
        outputs9_out_din => first_layer173_U0_outputs9_out_din,
        outputs9_out_full_n => outputs9_c_full_n,
        outputs9_out_write => first_layer173_U0_outputs9_out_write,
        inputs10_out_din => first_layer173_U0_inputs10_out_din,
        inputs10_out_full_n => inputs10_c_full_n,
        inputs10_out_write => first_layer173_U0_inputs10_out_write,
        weights10_out_din => first_layer173_U0_weights10_out_din,
        weights10_out_full_n => weights10_c_full_n,
        weights10_out_write => first_layer173_U0_weights10_out_write,
        betas10_out_din => first_layer173_U0_betas10_out_din,
        betas10_out_full_n => betas10_c_full_n,
        betas10_out_write => first_layer173_U0_betas10_out_write,
        outputs10_out_din => first_layer173_U0_outputs10_out_din,
        outputs10_out_full_n => outputs10_c_full_n,
        outputs10_out_write => first_layer173_U0_outputs10_out_write,
        inputs11_out_din => first_layer173_U0_inputs11_out_din,
        inputs11_out_full_n => inputs11_c_full_n,
        inputs11_out_write => first_layer173_U0_inputs11_out_write,
        weights11_out_din => first_layer173_U0_weights11_out_din,
        weights11_out_full_n => weights11_c_full_n,
        weights11_out_write => first_layer173_U0_weights11_out_write,
        betas11_out_din => first_layer173_U0_betas11_out_din,
        betas11_out_full_n => betas11_c_full_n,
        betas11_out_write => first_layer173_U0_betas11_out_write,
        outputs11_out_din => first_layer173_U0_outputs11_out_din,
        outputs11_out_full_n => outputs11_c_full_n,
        outputs11_out_write => first_layer173_U0_outputs11_out_write,
        inputs12_out_din => first_layer173_U0_inputs12_out_din,
        inputs12_out_full_n => inputs12_c_full_n,
        inputs12_out_write => first_layer173_U0_inputs12_out_write,
        weights12_out_din => first_layer173_U0_weights12_out_din,
        weights12_out_full_n => weights12_c_full_n,
        weights12_out_write => first_layer173_U0_weights12_out_write,
        betas12_out_din => first_layer173_U0_betas12_out_din,
        betas12_out_full_n => betas12_c_full_n,
        betas12_out_write => first_layer173_U0_betas12_out_write,
        outputs12_out_din => first_layer173_U0_outputs12_out_din,
        outputs12_out_full_n => outputs12_c_full_n,
        outputs12_out_write => first_layer173_U0_outputs12_out_write,
        inputs13_out_din => first_layer173_U0_inputs13_out_din,
        inputs13_out_full_n => inputs13_c_full_n,
        inputs13_out_write => first_layer173_U0_inputs13_out_write,
        weights13_out_din => first_layer173_U0_weights13_out_din,
        weights13_out_full_n => weights13_c_full_n,
        weights13_out_write => first_layer173_U0_weights13_out_write,
        betas13_out_din => first_layer173_U0_betas13_out_din,
        betas13_out_full_n => betas13_c_full_n,
        betas13_out_write => first_layer173_U0_betas13_out_write,
        outputs13_out_din => first_layer173_U0_outputs13_out_din,
        outputs13_out_full_n => outputs13_c_full_n,
        outputs13_out_write => first_layer173_U0_outputs13_out_write,
        inputs14_out_din => first_layer173_U0_inputs14_out_din,
        inputs14_out_full_n => inputs14_c_full_n,
        inputs14_out_write => first_layer173_U0_inputs14_out_write,
        outputs14_out_din => first_layer173_U0_outputs14_out_din,
        outputs14_out_full_n => outputs14_c_full_n,
        outputs14_out_write => first_layer173_U0_outputs14_out_write,
        inputs15_out_din => first_layer173_U0_inputs15_out_din,
        inputs15_out_full_n => inputs15_c_full_n,
        inputs15_out_write => first_layer173_U0_inputs15_out_write,
        weights15_out_din => first_layer173_U0_weights15_out_din,
        weights15_out_full_n => weights15_c_full_n,
        weights15_out_write => first_layer173_U0_weights15_out_write,
        betas15_out_din => first_layer173_U0_betas15_out_din,
        betas15_out_full_n => betas15_c_full_n,
        betas15_out_write => first_layer173_U0_betas15_out_write,
        outputs15_out_din => first_layer173_U0_outputs15_out_din,
        outputs15_out_full_n => outputs15_c_full_n,
        outputs15_out_write => first_layer173_U0_outputs15_out_write);

    inter_layer_7_U0 : component inter_layer_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_7_U0_ap_start,
        ap_done => inter_layer_7_U0_ap_done,
        ap_continue => inter_layer_7_U0_ap_continue,
        ap_idle => inter_layer_7_U0_ap_idle,
        ap_ready => inter_layer_7_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_7_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_7_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_7_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_7_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_7_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_7_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_7_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_7_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_7_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_7_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_7_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_7_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_7_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_7_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_7_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_7_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_7_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_7_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_7_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data2_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_7_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_7_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_7_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_7_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_7_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_7_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_7_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_7_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_7_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_7_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_7_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data2_RVALID,
        m_axi_inputs_RREADY => inter_layer_7_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data2_RDATA,
        m_axi_inputs_RLAST => data2_RLAST,
        m_axi_inputs_RID => data2_RID,
        m_axi_inputs_RUSER => data2_RUSER,
        m_axi_inputs_RRESP => data2_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_7_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs2_c_dout,
        inputs_offset_empty_n => inputs2_c_empty_n,
        inputs_offset_read => inter_layer_7_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_7_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_7_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_7_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_7_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_7_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_7_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_7_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_7_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_7_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_7_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_7_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_7_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_7_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_7_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_7_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_7_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_7_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_7_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_7_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data33_ARREADY,
        m_axi_weights_ARADDR => inter_layer_7_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_7_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_7_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_7_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_7_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_7_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_7_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_7_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_7_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_7_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_7_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data33_RVALID,
        m_axi_weights_RREADY => inter_layer_7_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data33_RDATA,
        m_axi_weights_RLAST => data33_RLAST,
        m_axi_weights_RID => data33_RID,
        m_axi_weights_RUSER => data33_RUSER,
        m_axi_weights_RRESP => data33_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_7_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights2_c_dout,
        weights_offset_empty_n => weights2_c_empty_n,
        weights_offset_read => inter_layer_7_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_7_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_7_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_7_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_7_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_7_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_7_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_7_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_7_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_7_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_7_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_7_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_7_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_7_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_7_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_7_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_7_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_7_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_7_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_7_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data34_ARREADY,
        m_axi_betas_ARADDR => inter_layer_7_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_7_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_7_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_7_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_7_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_7_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_7_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_7_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_7_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_7_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_7_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data34_RVALID,
        m_axi_betas_RREADY => inter_layer_7_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data34_RDATA,
        m_axi_betas_RLAST => data34_RLAST,
        m_axi_betas_RID => data34_RID,
        m_axi_betas_RUSER => data34_RUSER,
        m_axi_betas_RRESP => data34_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_7_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas2_c_dout,
        betas_offset_empty_n => betas2_c_empty_n,
        betas_offset_read => inter_layer_7_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_7_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data17_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_7_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_7_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_7_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_7_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_7_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_7_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_7_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_7_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_7_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_7_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_7_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_7_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data17_WREADY,
        m_axi_outputs_WDATA => inter_layer_7_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_7_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_7_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_7_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_7_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_7_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_7_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_7_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_7_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_7_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_7_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_7_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_7_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_7_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_7_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_7_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_7_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_7_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data17_BVALID,
        m_axi_outputs_BREADY => inter_layer_7_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data17_BRESP,
        m_axi_outputs_BID => data17_BID,
        m_axi_outputs_BUSER => data17_BUSER,
        outputs_offset_dout => outputs2_c_dout,
        outputs_offset_empty_n => outputs2_c_empty_n,
        outputs_offset_read => inter_layer_7_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_7_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => first_ready_V_empty_n,
        pre_ready_V_read => inter_layer_7_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_7_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => second_ready_V_full_n,
        nxt_ready_V_write => inter_layer_7_U0_nxt_ready_V_write);

    inter_layer_2_U0 : component inter_layer_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_2_U0_ap_start,
        ap_done => inter_layer_2_U0_ap_done,
        ap_continue => inter_layer_2_U0_ap_continue,
        ap_idle => inter_layer_2_U0_ap_idle,
        ap_ready => inter_layer_2_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_2_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_2_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_2_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_2_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_2_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_2_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_2_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_2_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_2_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_2_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_2_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_2_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_2_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_2_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_2_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_2_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_2_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_2_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_2_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data3_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_2_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_2_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_2_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_2_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_2_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_2_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_2_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_2_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_2_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_2_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_2_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data3_RVALID,
        m_axi_inputs_RREADY => inter_layer_2_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data3_RDATA,
        m_axi_inputs_RLAST => data3_RLAST,
        m_axi_inputs_RID => data3_RID,
        m_axi_inputs_RUSER => data3_RUSER,
        m_axi_inputs_RRESP => data3_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_2_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs3_c_dout,
        inputs_offset_empty_n => inputs3_c_empty_n,
        inputs_offset_read => inter_layer_2_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_2_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_2_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_2_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_2_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_2_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_2_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_2_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_2_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_2_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_2_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_2_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_2_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_2_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_2_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_2_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_2_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_2_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_2_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_2_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data35_ARREADY,
        m_axi_weights_ARADDR => inter_layer_2_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_2_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_2_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_2_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_2_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_2_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_2_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_2_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_2_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_2_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_2_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data35_RVALID,
        m_axi_weights_RREADY => inter_layer_2_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data35_RDATA,
        m_axi_weights_RLAST => data35_RLAST,
        m_axi_weights_RID => data35_RID,
        m_axi_weights_RUSER => data35_RUSER,
        m_axi_weights_RRESP => data35_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_2_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights3_c_dout,
        weights_offset_empty_n => weights3_c_empty_n,
        weights_offset_read => inter_layer_2_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_2_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_2_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_2_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_2_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_2_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_2_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_2_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_2_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_2_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_2_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_2_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_2_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_2_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_2_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_2_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_2_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_2_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_2_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_2_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data36_ARREADY,
        m_axi_betas_ARADDR => inter_layer_2_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_2_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_2_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_2_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_2_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_2_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_2_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_2_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_2_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_2_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_2_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data36_RVALID,
        m_axi_betas_RREADY => inter_layer_2_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data36_RDATA,
        m_axi_betas_RLAST => data36_RLAST,
        m_axi_betas_RID => data36_RID,
        m_axi_betas_RUSER => data36_RUSER,
        m_axi_betas_RRESP => data36_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_2_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas3_c_dout,
        betas_offset_empty_n => betas3_c_empty_n,
        betas_offset_read => inter_layer_2_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_2_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data18_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_2_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_2_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_2_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_2_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_2_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_2_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_2_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_2_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_2_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_2_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_2_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_2_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data18_WREADY,
        m_axi_outputs_WDATA => inter_layer_2_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_2_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_2_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_2_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_2_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_2_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_2_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_2_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_2_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_2_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_2_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_2_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_2_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_2_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_2_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_2_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_2_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_2_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data18_BVALID,
        m_axi_outputs_BREADY => inter_layer_2_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data18_BRESP,
        m_axi_outputs_BID => data18_BID,
        m_axi_outputs_BUSER => data18_BUSER,
        outputs_offset_dout => outputs3_c_dout,
        outputs_offset_empty_n => outputs3_c_empty_n,
        outputs_offset_read => inter_layer_2_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_2_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => second_ready_V_empty_n,
        pre_ready_V_read => inter_layer_2_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_2_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => third_ready_V_full_n,
        nxt_ready_V_write => inter_layer_2_U0_nxt_ready_V_write);

    inter_layer_5_U0 : component inter_layer_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_5_U0_ap_start,
        ap_done => inter_layer_5_U0_ap_done,
        ap_continue => inter_layer_5_U0_ap_continue,
        ap_idle => inter_layer_5_U0_ap_idle,
        ap_ready => inter_layer_5_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_5_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_5_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_5_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_5_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_5_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_5_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_5_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_5_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_5_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_5_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_5_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_5_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_5_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_5_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_5_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_5_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_5_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_5_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_5_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data4_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_5_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_5_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_5_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_5_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_5_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_5_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_5_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_5_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_5_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_5_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_5_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data4_RVALID,
        m_axi_inputs_RREADY => inter_layer_5_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data4_RDATA,
        m_axi_inputs_RLAST => data4_RLAST,
        m_axi_inputs_RID => data4_RID,
        m_axi_inputs_RUSER => data4_RUSER,
        m_axi_inputs_RRESP => data4_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_5_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs4_c_dout,
        inputs_offset_empty_n => inputs4_c_empty_n,
        inputs_offset_read => inter_layer_5_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_5_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_5_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_5_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_5_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_5_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_5_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_5_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_5_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_5_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_5_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_5_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_5_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_5_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_5_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_5_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_5_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_5_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_5_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_5_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data37_ARREADY,
        m_axi_weights_ARADDR => inter_layer_5_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_5_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_5_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_5_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_5_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_5_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_5_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_5_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_5_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_5_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_5_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data37_RVALID,
        m_axi_weights_RREADY => inter_layer_5_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data37_RDATA,
        m_axi_weights_RLAST => data37_RLAST,
        m_axi_weights_RID => data37_RID,
        m_axi_weights_RUSER => data37_RUSER,
        m_axi_weights_RRESP => data37_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_5_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights4_c_dout,
        weights_offset_empty_n => weights4_c_empty_n,
        weights_offset_read => inter_layer_5_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_5_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_5_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_5_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_5_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_5_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_5_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_5_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_5_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_5_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_5_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_5_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_5_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_5_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_5_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_5_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_5_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_5_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_5_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_5_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data38_ARREADY,
        m_axi_betas_ARADDR => inter_layer_5_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_5_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_5_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_5_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_5_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_5_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_5_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_5_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_5_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_5_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_5_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data38_RVALID,
        m_axi_betas_RREADY => inter_layer_5_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data38_RDATA,
        m_axi_betas_RLAST => data38_RLAST,
        m_axi_betas_RID => data38_RID,
        m_axi_betas_RUSER => data38_RUSER,
        m_axi_betas_RRESP => data38_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_5_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas4_c_dout,
        betas_offset_empty_n => betas4_c_empty_n,
        betas_offset_read => inter_layer_5_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_5_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data19_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_5_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_5_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_5_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_5_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_5_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_5_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_5_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_5_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_5_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_5_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_5_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_5_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data19_WREADY,
        m_axi_outputs_WDATA => inter_layer_5_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_5_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_5_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_5_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_5_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_5_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_5_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_5_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_5_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_5_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_5_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_5_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_5_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_5_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_5_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_5_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_5_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_5_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data19_BVALID,
        m_axi_outputs_BREADY => inter_layer_5_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data19_BRESP,
        m_axi_outputs_BID => data19_BID,
        m_axi_outputs_BUSER => data19_BUSER,
        outputs_offset_dout => outputs4_c_dout,
        outputs_offset_empty_n => outputs4_c_empty_n,
        outputs_offset_read => inter_layer_5_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_5_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => third_ready_V_empty_n,
        pre_ready_V_read => inter_layer_5_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_5_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => fourth_ready_V_full_n,
        nxt_ready_V_write => inter_layer_5_U0_nxt_ready_V_write);

    inter_layer_U0 : component inter_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_U0_ap_start,
        ap_done => inter_layer_U0_ap_done,
        ap_continue => inter_layer_U0_ap_continue,
        ap_idle => inter_layer_U0_ap_idle,
        ap_ready => inter_layer_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data5_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data5_RVALID,
        m_axi_inputs_RREADY => inter_layer_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data5_RDATA,
        m_axi_inputs_RLAST => data5_RLAST,
        m_axi_inputs_RID => data5_RID,
        m_axi_inputs_RUSER => data5_RUSER,
        m_axi_inputs_RRESP => data5_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs5_c_dout,
        inputs_offset_empty_n => inputs5_c_empty_n,
        inputs_offset_read => inter_layer_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data39_ARREADY,
        m_axi_weights_ARADDR => inter_layer_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data39_RVALID,
        m_axi_weights_RREADY => inter_layer_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data39_RDATA,
        m_axi_weights_RLAST => data39_RLAST,
        m_axi_weights_RID => data39_RID,
        m_axi_weights_RUSER => data39_RUSER,
        m_axi_weights_RRESP => data39_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights5_c_dout,
        weights_offset_empty_n => weights5_c_empty_n,
        weights_offset_read => inter_layer_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data40_ARREADY,
        m_axi_betas_ARADDR => inter_layer_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data40_RVALID,
        m_axi_betas_RREADY => inter_layer_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data40_RDATA,
        m_axi_betas_RLAST => data40_RLAST,
        m_axi_betas_RID => data40_RID,
        m_axi_betas_RUSER => data40_RUSER,
        m_axi_betas_RRESP => data40_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas5_c_dout,
        betas_offset_empty_n => betas5_c_empty_n,
        betas_offset_read => inter_layer_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data20_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data20_WREADY,
        m_axi_outputs_WDATA => inter_layer_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data20_BVALID,
        m_axi_outputs_BREADY => inter_layer_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data20_BRESP,
        m_axi_outputs_BID => data20_BID,
        m_axi_outputs_BUSER => data20_BUSER,
        outputs_offset_dout => outputs5_c_dout,
        outputs_offset_empty_n => outputs5_c_empty_n,
        outputs_offset_read => inter_layer_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => fourth_ready_V_empty_n,
        pre_ready_V_read => inter_layer_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => fifth_ready_V_full_n,
        nxt_ready_V_write => inter_layer_U0_nxt_ready_V_write);

    inter_layer_10_U0 : component inter_layer_10
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_10_U0_ap_start,
        ap_done => inter_layer_10_U0_ap_done,
        ap_continue => inter_layer_10_U0_ap_continue,
        ap_idle => inter_layer_10_U0_ap_idle,
        ap_ready => inter_layer_10_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_10_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_10_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_10_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_10_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_10_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_10_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_10_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_10_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_10_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_10_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_10_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_10_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_10_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_10_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_10_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_10_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_10_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_10_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_10_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data6_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_10_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_10_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_10_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_10_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_10_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_10_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_10_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_10_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_10_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_10_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_10_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data6_RVALID,
        m_axi_inputs_RREADY => inter_layer_10_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data6_RDATA,
        m_axi_inputs_RLAST => data6_RLAST,
        m_axi_inputs_RID => data6_RID,
        m_axi_inputs_RUSER => data6_RUSER,
        m_axi_inputs_RRESP => data6_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_10_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs6_c_dout,
        inputs_offset_empty_n => inputs6_c_empty_n,
        inputs_offset_read => inter_layer_10_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_10_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_10_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_10_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_10_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_10_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_10_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_10_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_10_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_10_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_10_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_10_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_10_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_10_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_10_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_10_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_10_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_10_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_10_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_10_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data41_ARREADY,
        m_axi_weights_ARADDR => inter_layer_10_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_10_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_10_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_10_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_10_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_10_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_10_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_10_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_10_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_10_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_10_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data41_RVALID,
        m_axi_weights_RREADY => inter_layer_10_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data41_RDATA,
        m_axi_weights_RLAST => data41_RLAST,
        m_axi_weights_RID => data41_RID,
        m_axi_weights_RUSER => data41_RUSER,
        m_axi_weights_RRESP => data41_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_10_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights6_c_dout,
        weights_offset_empty_n => weights6_c_empty_n,
        weights_offset_read => inter_layer_10_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_10_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_10_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_10_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_10_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_10_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_10_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_10_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_10_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_10_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_10_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_10_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_10_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_10_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_10_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_10_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_10_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_10_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_10_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_10_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data42_ARREADY,
        m_axi_betas_ARADDR => inter_layer_10_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_10_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_10_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_10_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_10_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_10_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_10_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_10_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_10_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_10_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_10_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data42_RVALID,
        m_axi_betas_RREADY => inter_layer_10_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data42_RDATA,
        m_axi_betas_RLAST => data42_RLAST,
        m_axi_betas_RID => data42_RID,
        m_axi_betas_RUSER => data42_RUSER,
        m_axi_betas_RRESP => data42_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_10_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas6_c_dout,
        betas_offset_empty_n => betas6_c_empty_n,
        betas_offset_read => inter_layer_10_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_10_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data21_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_10_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_10_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_10_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_10_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_10_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_10_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_10_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_10_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_10_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_10_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_10_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_10_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data21_WREADY,
        m_axi_outputs_WDATA => inter_layer_10_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_10_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_10_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_10_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_10_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_10_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_10_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_10_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_10_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_10_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_10_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_10_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_10_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_10_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_10_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_10_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_10_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_10_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data21_BVALID,
        m_axi_outputs_BREADY => inter_layer_10_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data21_BRESP,
        m_axi_outputs_BID => data21_BID,
        m_axi_outputs_BUSER => data21_BUSER,
        outputs_offset_dout => outputs6_c_dout,
        outputs_offset_empty_n => outputs6_c_empty_n,
        outputs_offset_read => inter_layer_10_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_10_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => fifth_ready_V_empty_n,
        pre_ready_V_read => inter_layer_10_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_10_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => sixth_ready_V_full_n,
        nxt_ready_V_write => inter_layer_10_U0_nxt_ready_V_write);

    inter_layer_4_U0 : component inter_layer_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_4_U0_ap_start,
        ap_done => inter_layer_4_U0_ap_done,
        ap_continue => inter_layer_4_U0_ap_continue,
        ap_idle => inter_layer_4_U0_ap_idle,
        ap_ready => inter_layer_4_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_4_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_4_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_4_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_4_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_4_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_4_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_4_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_4_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_4_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_4_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_4_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_4_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_4_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_4_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_4_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_4_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_4_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_4_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_4_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data7_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_4_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_4_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_4_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_4_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_4_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_4_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_4_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_4_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_4_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_4_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_4_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data7_RVALID,
        m_axi_inputs_RREADY => inter_layer_4_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data7_RDATA,
        m_axi_inputs_RLAST => data7_RLAST,
        m_axi_inputs_RID => data7_RID,
        m_axi_inputs_RUSER => data7_RUSER,
        m_axi_inputs_RRESP => data7_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_4_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs7_c_dout,
        inputs_offset_empty_n => inputs7_c_empty_n,
        inputs_offset_read => inter_layer_4_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_4_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_4_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_4_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_4_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_4_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_4_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_4_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_4_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_4_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_4_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_4_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_4_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_4_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_4_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_4_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_4_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_4_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_4_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_4_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data43_ARREADY,
        m_axi_weights_ARADDR => inter_layer_4_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_4_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_4_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_4_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_4_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_4_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_4_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_4_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_4_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_4_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_4_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data43_RVALID,
        m_axi_weights_RREADY => inter_layer_4_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data43_RDATA,
        m_axi_weights_RLAST => data43_RLAST,
        m_axi_weights_RID => data43_RID,
        m_axi_weights_RUSER => data43_RUSER,
        m_axi_weights_RRESP => data43_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_4_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights7_c_dout,
        weights_offset_empty_n => weights7_c_empty_n,
        weights_offset_read => inter_layer_4_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_4_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_4_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_4_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_4_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_4_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_4_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_4_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_4_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_4_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_4_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_4_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_4_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_4_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_4_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_4_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_4_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_4_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_4_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_4_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data44_ARREADY,
        m_axi_betas_ARADDR => inter_layer_4_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_4_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_4_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_4_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_4_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_4_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_4_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_4_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_4_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_4_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_4_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data44_RVALID,
        m_axi_betas_RREADY => inter_layer_4_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data44_RDATA,
        m_axi_betas_RLAST => data44_RLAST,
        m_axi_betas_RID => data44_RID,
        m_axi_betas_RUSER => data44_RUSER,
        m_axi_betas_RRESP => data44_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_4_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas7_c_dout,
        betas_offset_empty_n => betas7_c_empty_n,
        betas_offset_read => inter_layer_4_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_4_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data22_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_4_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_4_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_4_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_4_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_4_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_4_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_4_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_4_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_4_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_4_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_4_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_4_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data22_WREADY,
        m_axi_outputs_WDATA => inter_layer_4_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_4_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_4_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_4_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_4_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_4_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_4_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_4_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_4_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_4_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_4_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_4_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_4_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_4_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_4_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_4_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_4_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_4_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data22_BVALID,
        m_axi_outputs_BREADY => inter_layer_4_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data22_BRESP,
        m_axi_outputs_BID => data22_BID,
        m_axi_outputs_BUSER => data22_BUSER,
        outputs_offset_dout => outputs7_c_dout,
        outputs_offset_empty_n => outputs7_c_empty_n,
        outputs_offset_read => inter_layer_4_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_4_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => sixth_ready_V_empty_n,
        pre_ready_V_read => inter_layer_4_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_4_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => seventh_ready_V_full_n,
        nxt_ready_V_write => inter_layer_4_U0_nxt_ready_V_write);

    inter_layer_8_U0 : component inter_layer_8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_8_U0_ap_start,
        ap_done => inter_layer_8_U0_ap_done,
        ap_continue => inter_layer_8_U0_ap_continue,
        ap_idle => inter_layer_8_U0_ap_idle,
        ap_ready => inter_layer_8_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_8_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_8_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_8_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_8_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_8_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_8_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_8_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_8_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_8_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_8_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_8_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_8_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_8_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_8_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_8_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_8_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_8_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_8_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_8_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data8_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_8_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_8_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_8_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_8_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_8_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_8_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_8_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_8_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_8_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_8_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_8_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data8_RVALID,
        m_axi_inputs_RREADY => inter_layer_8_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data8_RDATA,
        m_axi_inputs_RLAST => data8_RLAST,
        m_axi_inputs_RID => data8_RID,
        m_axi_inputs_RUSER => data8_RUSER,
        m_axi_inputs_RRESP => data8_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_8_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs8_c_dout,
        inputs_offset_empty_n => inputs8_c_empty_n,
        inputs_offset_read => inter_layer_8_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_8_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_8_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_8_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_8_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_8_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_8_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_8_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_8_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_8_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_8_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_8_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_8_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_8_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_8_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_8_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_8_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_8_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_8_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_8_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data45_ARREADY,
        m_axi_weights_ARADDR => inter_layer_8_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_8_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_8_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_8_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_8_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_8_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_8_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_8_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_8_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_8_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_8_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data45_RVALID,
        m_axi_weights_RREADY => inter_layer_8_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data45_RDATA,
        m_axi_weights_RLAST => data45_RLAST,
        m_axi_weights_RID => data45_RID,
        m_axi_weights_RUSER => data45_RUSER,
        m_axi_weights_RRESP => data45_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_8_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights8_c_dout,
        weights_offset_empty_n => weights8_c_empty_n,
        weights_offset_read => inter_layer_8_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_8_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_8_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_8_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_8_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_8_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_8_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_8_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_8_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_8_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_8_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_8_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_8_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_8_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_8_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_8_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_8_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_8_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_8_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_8_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data46_ARREADY,
        m_axi_betas_ARADDR => inter_layer_8_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_8_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_8_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_8_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_8_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_8_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_8_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_8_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_8_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_8_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_8_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data46_RVALID,
        m_axi_betas_RREADY => inter_layer_8_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data46_RDATA,
        m_axi_betas_RLAST => data46_RLAST,
        m_axi_betas_RID => data46_RID,
        m_axi_betas_RUSER => data46_RUSER,
        m_axi_betas_RRESP => data46_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_8_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas8_c_dout,
        betas_offset_empty_n => betas8_c_empty_n,
        betas_offset_read => inter_layer_8_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_8_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data23_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_8_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_8_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_8_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_8_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_8_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_8_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_8_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_8_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_8_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_8_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_8_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_8_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data23_WREADY,
        m_axi_outputs_WDATA => inter_layer_8_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_8_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_8_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_8_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_8_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_8_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_8_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_8_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_8_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_8_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_8_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_8_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_8_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_8_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_8_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_8_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_8_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_8_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data23_BVALID,
        m_axi_outputs_BREADY => inter_layer_8_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data23_BRESP,
        m_axi_outputs_BID => data23_BID,
        m_axi_outputs_BUSER => data23_BUSER,
        outputs_offset_dout => outputs8_c_dout,
        outputs_offset_empty_n => outputs8_c_empty_n,
        outputs_offset_read => inter_layer_8_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_8_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => seventh_ready_V_empty_n,
        pre_ready_V_read => inter_layer_8_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_8_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => eighth_ready_V_full_n,
        nxt_ready_V_write => inter_layer_8_U0_nxt_ready_V_write);

    inter_layer265_U0 : component inter_layer265
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer265_U0_ap_start,
        ap_done => inter_layer265_U0_ap_done,
        ap_continue => inter_layer265_U0_ap_continue,
        ap_idle => inter_layer265_U0_ap_idle,
        ap_ready => inter_layer265_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer265_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer265_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer265_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer265_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer265_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer265_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer265_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer265_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer265_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer265_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer265_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer265_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer265_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer265_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer265_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer265_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer265_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer265_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer265_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data9_ARREADY,
        m_axi_inputs_ARADDR => inter_layer265_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer265_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer265_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer265_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer265_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer265_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer265_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer265_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer265_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer265_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer265_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data9_RVALID,
        m_axi_inputs_RREADY => inter_layer265_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data9_RDATA,
        m_axi_inputs_RLAST => data9_RLAST,
        m_axi_inputs_RID => data9_RID,
        m_axi_inputs_RUSER => data9_RUSER,
        m_axi_inputs_RRESP => data9_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer265_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs9_c_dout,
        inputs_offset_empty_n => inputs9_c_empty_n,
        inputs_offset_read => inter_layer265_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer265_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer265_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer265_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer265_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer265_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer265_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer265_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer265_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer265_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer265_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer265_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer265_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer265_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer265_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer265_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer265_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer265_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer265_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer265_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data47_ARREADY,
        m_axi_weights_ARADDR => inter_layer265_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer265_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer265_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer265_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer265_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer265_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer265_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer265_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer265_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer265_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer265_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data47_RVALID,
        m_axi_weights_RREADY => inter_layer265_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data47_RDATA,
        m_axi_weights_RLAST => data47_RLAST,
        m_axi_weights_RID => data47_RID,
        m_axi_weights_RUSER => data47_RUSER,
        m_axi_weights_RRESP => data47_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer265_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights9_c_dout,
        weights_offset_empty_n => weights9_c_empty_n,
        weights_offset_read => inter_layer265_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer265_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer265_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer265_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer265_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer265_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer265_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer265_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer265_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer265_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer265_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer265_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer265_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer265_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer265_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer265_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer265_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer265_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer265_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer265_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data48_ARREADY,
        m_axi_betas_ARADDR => inter_layer265_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer265_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer265_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer265_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer265_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer265_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer265_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer265_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer265_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer265_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer265_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data48_RVALID,
        m_axi_betas_RREADY => inter_layer265_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data48_RDATA,
        m_axi_betas_RLAST => data48_RLAST,
        m_axi_betas_RID => data48_RID,
        m_axi_betas_RUSER => data48_RUSER,
        m_axi_betas_RRESP => data48_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer265_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas9_c_dout,
        betas_offset_empty_n => betas9_c_empty_n,
        betas_offset_read => inter_layer265_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer265_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data24_AWREADY,
        m_axi_outputs_AWADDR => inter_layer265_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer265_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer265_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer265_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer265_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer265_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer265_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer265_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer265_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer265_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer265_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer265_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data24_WREADY,
        m_axi_outputs_WDATA => inter_layer265_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer265_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer265_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer265_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer265_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer265_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer265_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer265_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer265_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer265_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer265_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer265_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer265_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer265_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer265_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer265_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer265_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer265_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data24_BVALID,
        m_axi_outputs_BREADY => inter_layer265_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data24_BRESP,
        m_axi_outputs_BID => data24_BID,
        m_axi_outputs_BUSER => data24_BUSER,
        outputs_offset_dout => outputs9_c_dout,
        outputs_offset_empty_n => outputs9_c_empty_n,
        outputs_offset_read => inter_layer265_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer265_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => eighth_ready_V_empty_n,
        pre_ready_V_read => inter_layer265_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer265_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => ninth_ready_V_full_n,
        nxt_ready_V_write => inter_layer265_U0_nxt_ready_V_write);

    inter_layer_6_U0 : component inter_layer_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_6_U0_ap_start,
        ap_done => inter_layer_6_U0_ap_done,
        ap_continue => inter_layer_6_U0_ap_continue,
        ap_idle => inter_layer_6_U0_ap_idle,
        ap_ready => inter_layer_6_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_6_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_6_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_6_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_6_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_6_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_6_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_6_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_6_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_6_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_6_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_6_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_6_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_6_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_6_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_6_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_6_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_6_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_6_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_6_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data10_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_6_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_6_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_6_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_6_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_6_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_6_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_6_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_6_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_6_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_6_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_6_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data10_RVALID,
        m_axi_inputs_RREADY => inter_layer_6_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data10_RDATA,
        m_axi_inputs_RLAST => data10_RLAST,
        m_axi_inputs_RID => data10_RID,
        m_axi_inputs_RUSER => data10_RUSER,
        m_axi_inputs_RRESP => data10_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_6_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs10_c_dout,
        inputs_offset_empty_n => inputs10_c_empty_n,
        inputs_offset_read => inter_layer_6_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_6_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_6_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_6_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_6_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_6_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_6_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_6_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_6_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_6_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_6_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_6_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_6_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_6_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_6_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_6_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_6_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_6_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_6_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_6_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data49_ARREADY,
        m_axi_weights_ARADDR => inter_layer_6_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_6_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_6_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_6_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_6_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_6_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_6_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_6_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_6_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_6_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_6_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data49_RVALID,
        m_axi_weights_RREADY => inter_layer_6_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data49_RDATA,
        m_axi_weights_RLAST => data49_RLAST,
        m_axi_weights_RID => data49_RID,
        m_axi_weights_RUSER => data49_RUSER,
        m_axi_weights_RRESP => data49_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_6_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights10_c_dout,
        weights_offset_empty_n => weights10_c_empty_n,
        weights_offset_read => inter_layer_6_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_6_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_6_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_6_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_6_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_6_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_6_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_6_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_6_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_6_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_6_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_6_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_6_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_6_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_6_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_6_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_6_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_6_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_6_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_6_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data50_ARREADY,
        m_axi_betas_ARADDR => inter_layer_6_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_6_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_6_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_6_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_6_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_6_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_6_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_6_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_6_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_6_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_6_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data50_RVALID,
        m_axi_betas_RREADY => inter_layer_6_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data50_RDATA,
        m_axi_betas_RLAST => data50_RLAST,
        m_axi_betas_RID => data50_RID,
        m_axi_betas_RUSER => data50_RUSER,
        m_axi_betas_RRESP => data50_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_6_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas10_c_dout,
        betas_offset_empty_n => betas10_c_empty_n,
        betas_offset_read => inter_layer_6_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_6_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data25_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_6_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_6_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_6_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_6_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_6_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_6_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_6_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_6_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_6_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_6_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_6_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_6_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data25_WREADY,
        m_axi_outputs_WDATA => inter_layer_6_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_6_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_6_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_6_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_6_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_6_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_6_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_6_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_6_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_6_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_6_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_6_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_6_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_6_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_6_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_6_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_6_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_6_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data25_BVALID,
        m_axi_outputs_BREADY => inter_layer_6_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data25_BRESP,
        m_axi_outputs_BID => data25_BID,
        m_axi_outputs_BUSER => data25_BUSER,
        outputs_offset_dout => outputs10_c_dout,
        outputs_offset_empty_n => outputs10_c_empty_n,
        outputs_offset_read => inter_layer_6_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_6_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => ninth_ready_V_empty_n,
        pre_ready_V_read => inter_layer_6_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_6_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => tenth_ready_V_full_n,
        nxt_ready_V_write => inter_layer_6_U0_nxt_ready_V_write);

    inter_layer_1_U0 : component inter_layer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_1_U0_ap_start,
        ap_done => inter_layer_1_U0_ap_done,
        ap_continue => inter_layer_1_U0_ap_continue,
        ap_idle => inter_layer_1_U0_ap_idle,
        ap_ready => inter_layer_1_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_1_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_1_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_1_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_1_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_1_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_1_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_1_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_1_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_1_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_1_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_1_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_1_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_1_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_1_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_1_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_1_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_1_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_1_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_1_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data11_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_1_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_1_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_1_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_1_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_1_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_1_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_1_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_1_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_1_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_1_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_1_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data11_RVALID,
        m_axi_inputs_RREADY => inter_layer_1_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data11_RDATA,
        m_axi_inputs_RLAST => data11_RLAST,
        m_axi_inputs_RID => data11_RID,
        m_axi_inputs_RUSER => data11_RUSER,
        m_axi_inputs_RRESP => data11_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_1_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs11_c_dout,
        inputs_offset_empty_n => inputs11_c_empty_n,
        inputs_offset_read => inter_layer_1_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_1_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_1_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_1_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_1_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_1_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_1_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_1_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_1_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_1_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_1_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_1_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_1_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_1_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_1_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_1_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_1_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_1_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_1_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_1_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data51_ARREADY,
        m_axi_weights_ARADDR => inter_layer_1_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_1_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_1_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_1_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_1_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_1_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_1_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_1_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_1_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_1_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_1_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data51_RVALID,
        m_axi_weights_RREADY => inter_layer_1_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data51_RDATA,
        m_axi_weights_RLAST => data51_RLAST,
        m_axi_weights_RID => data51_RID,
        m_axi_weights_RUSER => data51_RUSER,
        m_axi_weights_RRESP => data51_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_1_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights11_c_dout,
        weights_offset_empty_n => weights11_c_empty_n,
        weights_offset_read => inter_layer_1_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_1_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_1_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_1_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_1_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_1_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_1_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_1_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_1_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_1_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_1_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_1_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_1_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_1_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_1_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_1_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_1_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_1_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_1_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_1_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data52_ARREADY,
        m_axi_betas_ARADDR => inter_layer_1_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_1_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_1_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_1_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_1_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_1_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_1_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_1_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_1_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_1_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_1_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data52_RVALID,
        m_axi_betas_RREADY => inter_layer_1_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data52_RDATA,
        m_axi_betas_RLAST => data52_RLAST,
        m_axi_betas_RID => data52_RID,
        m_axi_betas_RUSER => data52_RUSER,
        m_axi_betas_RRESP => data52_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_1_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas11_c_dout,
        betas_offset_empty_n => betas11_c_empty_n,
        betas_offset_read => inter_layer_1_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_1_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data26_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_1_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_1_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_1_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_1_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_1_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_1_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_1_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_1_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_1_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_1_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_1_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_1_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data26_WREADY,
        m_axi_outputs_WDATA => inter_layer_1_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_1_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_1_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_1_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_1_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_1_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_1_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_1_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_1_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_1_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_1_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_1_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_1_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_1_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_1_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_1_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_1_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_1_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data26_BVALID,
        m_axi_outputs_BREADY => inter_layer_1_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data26_BRESP,
        m_axi_outputs_BID => data26_BID,
        m_axi_outputs_BUSER => data26_BUSER,
        outputs_offset_dout => outputs11_c_dout,
        outputs_offset_empty_n => outputs11_c_empty_n,
        outputs_offset_read => inter_layer_1_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_1_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => tenth_ready_V_empty_n,
        pre_ready_V_read => inter_layer_1_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_1_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => eleventh_ready_V_full_n,
        nxt_ready_V_write => inter_layer_1_U0_nxt_ready_V_write);

    inter_layer_9_U0 : component inter_layer_9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_9_U0_ap_start,
        ap_done => inter_layer_9_U0_ap_done,
        ap_continue => inter_layer_9_U0_ap_continue,
        ap_idle => inter_layer_9_U0_ap_idle,
        ap_ready => inter_layer_9_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_9_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_9_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_9_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_9_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_9_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_9_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_9_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_9_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_9_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_9_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_9_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_9_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_9_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_9_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_9_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_9_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_9_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_9_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_9_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data12_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_9_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_9_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_9_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_9_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_9_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_9_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_9_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_9_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_9_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_9_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_9_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data12_RVALID,
        m_axi_inputs_RREADY => inter_layer_9_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data12_RDATA,
        m_axi_inputs_RLAST => data12_RLAST,
        m_axi_inputs_RID => data12_RID,
        m_axi_inputs_RUSER => data12_RUSER,
        m_axi_inputs_RRESP => data12_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_9_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs12_c_dout,
        inputs_offset_empty_n => inputs12_c_empty_n,
        inputs_offset_read => inter_layer_9_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_9_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_9_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_9_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_9_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_9_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_9_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_9_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_9_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_9_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_9_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_9_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_9_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_9_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_9_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_9_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_9_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_9_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_9_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_9_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data53_ARREADY,
        m_axi_weights_ARADDR => inter_layer_9_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_9_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_9_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_9_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_9_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_9_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_9_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_9_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_9_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_9_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_9_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data53_RVALID,
        m_axi_weights_RREADY => inter_layer_9_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data53_RDATA,
        m_axi_weights_RLAST => data53_RLAST,
        m_axi_weights_RID => data53_RID,
        m_axi_weights_RUSER => data53_RUSER,
        m_axi_weights_RRESP => data53_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_9_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights12_c_dout,
        weights_offset_empty_n => weights12_c_empty_n,
        weights_offset_read => inter_layer_9_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_9_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_9_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_9_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_9_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_9_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_9_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_9_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_9_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_9_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_9_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_9_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_9_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_9_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_9_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_9_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_9_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_9_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_9_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_9_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data54_ARREADY,
        m_axi_betas_ARADDR => inter_layer_9_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_9_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_9_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_9_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_9_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_9_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_9_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_9_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_9_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_9_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_9_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data54_RVALID,
        m_axi_betas_RREADY => inter_layer_9_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data54_RDATA,
        m_axi_betas_RLAST => data54_RLAST,
        m_axi_betas_RID => data54_RID,
        m_axi_betas_RUSER => data54_RUSER,
        m_axi_betas_RRESP => data54_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_9_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas12_c_dout,
        betas_offset_empty_n => betas12_c_empty_n,
        betas_offset_read => inter_layer_9_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_9_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data27_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_9_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_9_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_9_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_9_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_9_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_9_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_9_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_9_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_9_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_9_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_9_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_9_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data27_WREADY,
        m_axi_outputs_WDATA => inter_layer_9_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_9_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_9_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_9_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_9_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_9_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_9_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_9_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_9_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_9_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_9_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_9_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_9_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_9_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_9_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_9_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_9_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_9_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data27_BVALID,
        m_axi_outputs_BREADY => inter_layer_9_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data27_BRESP,
        m_axi_outputs_BID => data27_BID,
        m_axi_outputs_BUSER => data27_BUSER,
        outputs_offset_dout => outputs12_c_dout,
        outputs_offset_empty_n => outputs12_c_empty_n,
        outputs_offset_read => inter_layer_9_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_9_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => eleventh_ready_V_empty_n,
        pre_ready_V_read => inter_layer_9_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_9_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => twelfth_ready_V_full_n,
        nxt_ready_V_write => inter_layer_9_U0_nxt_ready_V_write);

    inter_layer_3_U0 : component inter_layer_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => inter_layer_3_U0_ap_start,
        ap_done => inter_layer_3_U0_ap_done,
        ap_continue => inter_layer_3_U0_ap_continue,
        ap_idle => inter_layer_3_U0_ap_idle,
        ap_ready => inter_layer_3_U0_ap_ready,
        m_axi_inputs_AWVALID => inter_layer_3_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => inter_layer_3_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => inter_layer_3_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => inter_layer_3_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => inter_layer_3_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => inter_layer_3_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => inter_layer_3_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => inter_layer_3_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => inter_layer_3_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => inter_layer_3_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => inter_layer_3_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => inter_layer_3_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => inter_layer_3_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => inter_layer_3_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => inter_layer_3_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => inter_layer_3_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => inter_layer_3_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => inter_layer_3_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => inter_layer_3_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data13_ARREADY,
        m_axi_inputs_ARADDR => inter_layer_3_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => inter_layer_3_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => inter_layer_3_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => inter_layer_3_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => inter_layer_3_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => inter_layer_3_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => inter_layer_3_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => inter_layer_3_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => inter_layer_3_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => inter_layer_3_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => inter_layer_3_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data13_RVALID,
        m_axi_inputs_RREADY => inter_layer_3_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data13_RDATA,
        m_axi_inputs_RLAST => data13_RLAST,
        m_axi_inputs_RID => data13_RID,
        m_axi_inputs_RUSER => data13_RUSER,
        m_axi_inputs_RRESP => data13_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => inter_layer_3_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs13_c_dout,
        inputs_offset_empty_n => inputs13_c_empty_n,
        inputs_offset_read => inter_layer_3_U0_inputs_offset_read,
        m_axi_weights_AWVALID => inter_layer_3_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => inter_layer_3_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => inter_layer_3_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => inter_layer_3_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => inter_layer_3_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => inter_layer_3_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => inter_layer_3_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => inter_layer_3_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => inter_layer_3_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => inter_layer_3_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => inter_layer_3_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => inter_layer_3_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => inter_layer_3_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => inter_layer_3_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => inter_layer_3_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => inter_layer_3_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => inter_layer_3_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => inter_layer_3_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => inter_layer_3_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data55_ARREADY,
        m_axi_weights_ARADDR => inter_layer_3_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => inter_layer_3_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => inter_layer_3_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => inter_layer_3_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => inter_layer_3_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => inter_layer_3_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => inter_layer_3_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => inter_layer_3_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => inter_layer_3_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => inter_layer_3_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => inter_layer_3_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data55_RVALID,
        m_axi_weights_RREADY => inter_layer_3_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data55_RDATA,
        m_axi_weights_RLAST => data55_RLAST,
        m_axi_weights_RID => data55_RID,
        m_axi_weights_RUSER => data55_RUSER,
        m_axi_weights_RRESP => data55_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => inter_layer_3_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights13_c_dout,
        weights_offset_empty_n => weights13_c_empty_n,
        weights_offset_read => inter_layer_3_U0_weights_offset_read,
        m_axi_betas_AWVALID => inter_layer_3_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => inter_layer_3_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => inter_layer_3_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => inter_layer_3_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => inter_layer_3_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => inter_layer_3_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => inter_layer_3_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => inter_layer_3_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => inter_layer_3_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => inter_layer_3_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => inter_layer_3_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => inter_layer_3_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => inter_layer_3_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => inter_layer_3_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => inter_layer_3_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => inter_layer_3_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => inter_layer_3_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => inter_layer_3_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => inter_layer_3_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data56_ARREADY,
        m_axi_betas_ARADDR => inter_layer_3_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => inter_layer_3_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => inter_layer_3_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => inter_layer_3_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => inter_layer_3_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => inter_layer_3_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => inter_layer_3_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => inter_layer_3_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => inter_layer_3_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => inter_layer_3_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => inter_layer_3_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data56_RVALID,
        m_axi_betas_RREADY => inter_layer_3_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data56_RDATA,
        m_axi_betas_RLAST => data56_RLAST,
        m_axi_betas_RID => data56_RID,
        m_axi_betas_RUSER => data56_RUSER,
        m_axi_betas_RRESP => data56_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => inter_layer_3_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas13_c_dout,
        betas_offset_empty_n => betas13_c_empty_n,
        betas_offset_read => inter_layer_3_U0_betas_offset_read,
        m_axi_outputs_AWVALID => inter_layer_3_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data28_AWREADY,
        m_axi_outputs_AWADDR => inter_layer_3_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => inter_layer_3_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => inter_layer_3_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => inter_layer_3_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => inter_layer_3_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => inter_layer_3_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => inter_layer_3_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => inter_layer_3_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => inter_layer_3_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => inter_layer_3_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => inter_layer_3_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => inter_layer_3_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data28_WREADY,
        m_axi_outputs_WDATA => inter_layer_3_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => inter_layer_3_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => inter_layer_3_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => inter_layer_3_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => inter_layer_3_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => inter_layer_3_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => inter_layer_3_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => inter_layer_3_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => inter_layer_3_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => inter_layer_3_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => inter_layer_3_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => inter_layer_3_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => inter_layer_3_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => inter_layer_3_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => inter_layer_3_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => inter_layer_3_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => inter_layer_3_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => inter_layer_3_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data28_BVALID,
        m_axi_outputs_BREADY => inter_layer_3_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data28_BRESP,
        m_axi_outputs_BID => data28_BID,
        m_axi_outputs_BUSER => data28_BUSER,
        outputs_offset_dout => outputs13_c_dout,
        outputs_offset_empty_n => outputs13_c_empty_n,
        outputs_offset_read => inter_layer_3_U0_outputs_offset_read,
        pre_ready_V_dout => inter_layer_3_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => twelfth_ready_V_empty_n,
        pre_ready_V_read => inter_layer_3_U0_pre_ready_V_read,
        nxt_ready_V_din => inter_layer_3_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => thirteenth_ready_V_full_n,
        nxt_ready_V_write => inter_layer_3_U0_nxt_ready_V_write);

    penult_layer_U0 : component penult_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => penult_layer_U0_ap_start,
        ap_done => penult_layer_U0_ap_done,
        ap_continue => penult_layer_U0_ap_continue,
        ap_idle => penult_layer_U0_ap_idle,
        ap_ready => penult_layer_U0_ap_ready,
        m_axi_inputs_AWVALID => penult_layer_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => penult_layer_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => penult_layer_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => penult_layer_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => penult_layer_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => penult_layer_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => penult_layer_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => penult_layer_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => penult_layer_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => penult_layer_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => penult_layer_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => penult_layer_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => penult_layer_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => penult_layer_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => penult_layer_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => penult_layer_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => penult_layer_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => penult_layer_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => penult_layer_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data14_ARREADY,
        m_axi_inputs_ARADDR => penult_layer_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => penult_layer_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => penult_layer_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => penult_layer_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => penult_layer_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => penult_layer_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => penult_layer_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => penult_layer_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => penult_layer_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => penult_layer_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => penult_layer_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data14_RVALID,
        m_axi_inputs_RREADY => penult_layer_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data14_RDATA,
        m_axi_inputs_RLAST => data14_RLAST,
        m_axi_inputs_RID => data14_RID,
        m_axi_inputs_RUSER => data14_RUSER,
        m_axi_inputs_RRESP => data14_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => penult_layer_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs14_c_dout,
        inputs_offset_empty_n => inputs14_c_empty_n,
        inputs_offset_read => penult_layer_U0_inputs_offset_read,
        m_axi_outputs_AWVALID => penult_layer_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data29_AWREADY,
        m_axi_outputs_AWADDR => penult_layer_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => penult_layer_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => penult_layer_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => penult_layer_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => penult_layer_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => penult_layer_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => penult_layer_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => penult_layer_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => penult_layer_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => penult_layer_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => penult_layer_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => penult_layer_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data29_WREADY,
        m_axi_outputs_WDATA => penult_layer_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => penult_layer_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => penult_layer_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => penult_layer_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => penult_layer_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => penult_layer_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => penult_layer_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => penult_layer_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => penult_layer_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => penult_layer_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => penult_layer_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => penult_layer_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => penult_layer_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => penult_layer_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => penult_layer_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => penult_layer_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => penult_layer_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => penult_layer_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data29_BVALID,
        m_axi_outputs_BREADY => penult_layer_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data29_BRESP,
        m_axi_outputs_BID => data29_BID,
        m_axi_outputs_BUSER => data29_BUSER,
        outputs_offset_dout => outputs14_c_dout,
        outputs_offset_empty_n => outputs14_c_empty_n,
        outputs_offset_read => penult_layer_U0_outputs_offset_read,
        pre_ready_V_dout => penult_layer_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => thirteenth_ready_V_empty_n,
        pre_ready_V_read => penult_layer_U0_pre_ready_V_read,
        nxt_ready_V_din => penult_layer_U0_nxt_ready_V_din,
        nxt_ready_V_full_n => fourteenth_ready_V_full_n,
        nxt_ready_V_write => penult_layer_U0_nxt_ready_V_write);

    last_layer_U0 : component last_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => last_layer_U0_ap_start,
        ap_done => last_layer_U0_ap_done,
        ap_continue => last_layer_U0_ap_continue,
        ap_idle => last_layer_U0_ap_idle,
        ap_ready => last_layer_U0_ap_ready,
        m_axi_inputs_AWVALID => last_layer_U0_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => last_layer_U0_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => last_layer_U0_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => last_layer_U0_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => last_layer_U0_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => last_layer_U0_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => last_layer_U0_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => last_layer_U0_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => last_layer_U0_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => last_layer_U0_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => last_layer_U0_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => last_layer_U0_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => last_layer_U0_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => last_layer_U0_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => last_layer_U0_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => last_layer_U0_m_axi_inputs_WLAST,
        m_axi_inputs_WID => last_layer_U0_m_axi_inputs_WID,
        m_axi_inputs_WUSER => last_layer_U0_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => last_layer_U0_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => data15_ARREADY,
        m_axi_inputs_ARADDR => last_layer_U0_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => last_layer_U0_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => last_layer_U0_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => last_layer_U0_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => last_layer_U0_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => last_layer_U0_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => last_layer_U0_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => last_layer_U0_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => last_layer_U0_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => last_layer_U0_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => last_layer_U0_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => data15_RVALID,
        m_axi_inputs_RREADY => last_layer_U0_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => data15_RDATA,
        m_axi_inputs_RLAST => data15_RLAST,
        m_axi_inputs_RID => data15_RID,
        m_axi_inputs_RUSER => data15_RUSER,
        m_axi_inputs_RRESP => data15_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => last_layer_U0_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset_dout => inputs15_c_dout,
        inputs_offset_empty_n => inputs15_c_empty_n,
        inputs_offset_read => last_layer_U0_inputs_offset_read,
        m_axi_weights_AWVALID => last_layer_U0_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => last_layer_U0_m_axi_weights_AWADDR,
        m_axi_weights_AWID => last_layer_U0_m_axi_weights_AWID,
        m_axi_weights_AWLEN => last_layer_U0_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => last_layer_U0_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => last_layer_U0_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => last_layer_U0_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => last_layer_U0_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => last_layer_U0_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => last_layer_U0_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => last_layer_U0_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => last_layer_U0_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => last_layer_U0_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => last_layer_U0_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => last_layer_U0_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => last_layer_U0_m_axi_weights_WLAST,
        m_axi_weights_WID => last_layer_U0_m_axi_weights_WID,
        m_axi_weights_WUSER => last_layer_U0_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => last_layer_U0_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => data57_ARREADY,
        m_axi_weights_ARADDR => last_layer_U0_m_axi_weights_ARADDR,
        m_axi_weights_ARID => last_layer_U0_m_axi_weights_ARID,
        m_axi_weights_ARLEN => last_layer_U0_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => last_layer_U0_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => last_layer_U0_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => last_layer_U0_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => last_layer_U0_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => last_layer_U0_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => last_layer_U0_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => last_layer_U0_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => last_layer_U0_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => data57_RVALID,
        m_axi_weights_RREADY => last_layer_U0_m_axi_weights_RREADY,
        m_axi_weights_RDATA => data57_RDATA,
        m_axi_weights_RLAST => data57_RLAST,
        m_axi_weights_RID => data57_RID,
        m_axi_weights_RUSER => data57_RUSER,
        m_axi_weights_RRESP => data57_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => last_layer_U0_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset_dout => weights15_c_dout,
        weights_offset_empty_n => weights15_c_empty_n,
        weights_offset_read => last_layer_U0_weights_offset_read,
        m_axi_betas_AWVALID => last_layer_U0_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => last_layer_U0_m_axi_betas_AWADDR,
        m_axi_betas_AWID => last_layer_U0_m_axi_betas_AWID,
        m_axi_betas_AWLEN => last_layer_U0_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => last_layer_U0_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => last_layer_U0_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => last_layer_U0_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => last_layer_U0_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => last_layer_U0_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => last_layer_U0_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => last_layer_U0_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => last_layer_U0_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => last_layer_U0_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => last_layer_U0_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => last_layer_U0_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => last_layer_U0_m_axi_betas_WLAST,
        m_axi_betas_WID => last_layer_U0_m_axi_betas_WID,
        m_axi_betas_WUSER => last_layer_U0_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => last_layer_U0_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => data58_ARREADY,
        m_axi_betas_ARADDR => last_layer_U0_m_axi_betas_ARADDR,
        m_axi_betas_ARID => last_layer_U0_m_axi_betas_ARID,
        m_axi_betas_ARLEN => last_layer_U0_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => last_layer_U0_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => last_layer_U0_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => last_layer_U0_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => last_layer_U0_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => last_layer_U0_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => last_layer_U0_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => last_layer_U0_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => last_layer_U0_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => data58_RVALID,
        m_axi_betas_RREADY => last_layer_U0_m_axi_betas_RREADY,
        m_axi_betas_RDATA => data58_RDATA,
        m_axi_betas_RLAST => data58_RLAST,
        m_axi_betas_RID => data58_RID,
        m_axi_betas_RUSER => data58_RUSER,
        m_axi_betas_RRESP => data58_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => last_layer_U0_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset_dout => betas15_c_dout,
        betas_offset_empty_n => betas15_c_empty_n,
        betas_offset_read => last_layer_U0_betas_offset_read,
        m_axi_outputs_AWVALID => last_layer_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => data30_AWREADY,
        m_axi_outputs_AWADDR => last_layer_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => last_layer_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => last_layer_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => last_layer_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => last_layer_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => last_layer_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => last_layer_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => last_layer_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => last_layer_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => last_layer_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => last_layer_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => last_layer_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => data30_WREADY,
        m_axi_outputs_WDATA => last_layer_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => last_layer_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => last_layer_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => last_layer_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => last_layer_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => last_layer_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => last_layer_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => last_layer_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => last_layer_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => last_layer_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => last_layer_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => last_layer_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => last_layer_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => last_layer_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => last_layer_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => last_layer_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => last_layer_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => last_layer_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => data30_BVALID,
        m_axi_outputs_BREADY => last_layer_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => data30_BRESP,
        m_axi_outputs_BID => data30_BID,
        m_axi_outputs_BUSER => data30_BUSER,
        outputs_offset_dout => outputs15_c_dout,
        outputs_offset_empty_n => outputs15_c_empty_n,
        outputs_offset_read => last_layer_U0_outputs_offset_read,
        pre_ready_V_dout => last_layer_U0_pre_ready_V_dout,
        pre_ready_V_empty_n => fourteenth_ready_V_empty_n,
        pre_ready_V_read => last_layer_U0_pre_ready_V_read);

    first_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_ready_V_din,
        if_full_n => first_ready_V_full_n,
        if_write => first_layer173_U0_nxt_ready_V_write,
        if_dout => first_ready_V_dout,
        if_empty_n => first_ready_V_empty_n,
        if_read => inter_layer_7_U0_pre_ready_V_read);

    inputs2_c_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs2_out_din,
        if_full_n => inputs2_c_full_n,
        if_write => first_layer173_U0_inputs2_out_write,
        if_dout => inputs2_c_dout,
        if_empty_n => inputs2_c_empty_n,
        if_read => inter_layer_7_U0_inputs_offset_read);

    weights2_c_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights2_out_din,
        if_full_n => weights2_c_full_n,
        if_write => first_layer173_U0_weights2_out_write,
        if_dout => weights2_c_dout,
        if_empty_n => weights2_c_empty_n,
        if_read => inter_layer_7_U0_weights_offset_read);

    betas2_c_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas2_out_din,
        if_full_n => betas2_c_full_n,
        if_write => first_layer173_U0_betas2_out_write,
        if_dout => betas2_c_dout,
        if_empty_n => betas2_c_empty_n,
        if_read => inter_layer_7_U0_betas_offset_read);

    outputs2_c_U : component fifo_w32_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs2_out_din,
        if_full_n => outputs2_c_full_n,
        if_write => first_layer173_U0_outputs2_out_write,
        if_dout => outputs2_c_dout,
        if_empty_n => outputs2_c_empty_n,
        if_read => inter_layer_7_U0_outputs_offset_read);

    inputs3_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs3_out_din,
        if_full_n => inputs3_c_full_n,
        if_write => first_layer173_U0_inputs3_out_write,
        if_dout => inputs3_c_dout,
        if_empty_n => inputs3_c_empty_n,
        if_read => inter_layer_2_U0_inputs_offset_read);

    weights3_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights3_out_din,
        if_full_n => weights3_c_full_n,
        if_write => first_layer173_U0_weights3_out_write,
        if_dout => weights3_c_dout,
        if_empty_n => weights3_c_empty_n,
        if_read => inter_layer_2_U0_weights_offset_read);

    betas3_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas3_out_din,
        if_full_n => betas3_c_full_n,
        if_write => first_layer173_U0_betas3_out_write,
        if_dout => betas3_c_dout,
        if_empty_n => betas3_c_empty_n,
        if_read => inter_layer_2_U0_betas_offset_read);

    outputs3_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs3_out_din,
        if_full_n => outputs3_c_full_n,
        if_write => first_layer173_U0_outputs3_out_write,
        if_dout => outputs3_c_dout,
        if_empty_n => outputs3_c_empty_n,
        if_read => inter_layer_2_U0_outputs_offset_read);

    inputs4_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs4_out_din,
        if_full_n => inputs4_c_full_n,
        if_write => first_layer173_U0_inputs4_out_write,
        if_dout => inputs4_c_dout,
        if_empty_n => inputs4_c_empty_n,
        if_read => inter_layer_5_U0_inputs_offset_read);

    weights4_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights4_out_din,
        if_full_n => weights4_c_full_n,
        if_write => first_layer173_U0_weights4_out_write,
        if_dout => weights4_c_dout,
        if_empty_n => weights4_c_empty_n,
        if_read => inter_layer_5_U0_weights_offset_read);

    betas4_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas4_out_din,
        if_full_n => betas4_c_full_n,
        if_write => first_layer173_U0_betas4_out_write,
        if_dout => betas4_c_dout,
        if_empty_n => betas4_c_empty_n,
        if_read => inter_layer_5_U0_betas_offset_read);

    outputs4_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs4_out_din,
        if_full_n => outputs4_c_full_n,
        if_write => first_layer173_U0_outputs4_out_write,
        if_dout => outputs4_c_dout,
        if_empty_n => outputs4_c_empty_n,
        if_read => inter_layer_5_U0_outputs_offset_read);

    inputs5_c_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs5_out_din,
        if_full_n => inputs5_c_full_n,
        if_write => first_layer173_U0_inputs5_out_write,
        if_dout => inputs5_c_dout,
        if_empty_n => inputs5_c_empty_n,
        if_read => inter_layer_U0_inputs_offset_read);

    weights5_c_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights5_out_din,
        if_full_n => weights5_c_full_n,
        if_write => first_layer173_U0_weights5_out_write,
        if_dout => weights5_c_dout,
        if_empty_n => weights5_c_empty_n,
        if_read => inter_layer_U0_weights_offset_read);

    betas5_c_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas5_out_din,
        if_full_n => betas5_c_full_n,
        if_write => first_layer173_U0_betas5_out_write,
        if_dout => betas5_c_dout,
        if_empty_n => betas5_c_empty_n,
        if_read => inter_layer_U0_betas_offset_read);

    outputs5_c_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs5_out_din,
        if_full_n => outputs5_c_full_n,
        if_write => first_layer173_U0_outputs5_out_write,
        if_dout => outputs5_c_dout,
        if_empty_n => outputs5_c_empty_n,
        if_read => inter_layer_U0_outputs_offset_read);

    inputs6_c_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs6_out_din,
        if_full_n => inputs6_c_full_n,
        if_write => first_layer173_U0_inputs6_out_write,
        if_dout => inputs6_c_dout,
        if_empty_n => inputs6_c_empty_n,
        if_read => inter_layer_10_U0_inputs_offset_read);

    weights6_c_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights6_out_din,
        if_full_n => weights6_c_full_n,
        if_write => first_layer173_U0_weights6_out_write,
        if_dout => weights6_c_dout,
        if_empty_n => weights6_c_empty_n,
        if_read => inter_layer_10_U0_weights_offset_read);

    betas6_c_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas6_out_din,
        if_full_n => betas6_c_full_n,
        if_write => first_layer173_U0_betas6_out_write,
        if_dout => betas6_c_dout,
        if_empty_n => betas6_c_empty_n,
        if_read => inter_layer_10_U0_betas_offset_read);

    outputs6_c_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs6_out_din,
        if_full_n => outputs6_c_full_n,
        if_write => first_layer173_U0_outputs6_out_write,
        if_dout => outputs6_c_dout,
        if_empty_n => outputs6_c_empty_n,
        if_read => inter_layer_10_U0_outputs_offset_read);

    inputs7_c_U : component fifo_w32_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs7_out_din,
        if_full_n => inputs7_c_full_n,
        if_write => first_layer173_U0_inputs7_out_write,
        if_dout => inputs7_c_dout,
        if_empty_n => inputs7_c_empty_n,
        if_read => inter_layer_4_U0_inputs_offset_read);

    weights7_c_U : component fifo_w32_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights7_out_din,
        if_full_n => weights7_c_full_n,
        if_write => first_layer173_U0_weights7_out_write,
        if_dout => weights7_c_dout,
        if_empty_n => weights7_c_empty_n,
        if_read => inter_layer_4_U0_weights_offset_read);

    betas7_c_U : component fifo_w32_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas7_out_din,
        if_full_n => betas7_c_full_n,
        if_write => first_layer173_U0_betas7_out_write,
        if_dout => betas7_c_dout,
        if_empty_n => betas7_c_empty_n,
        if_read => inter_layer_4_U0_betas_offset_read);

    outputs7_c_U : component fifo_w32_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs7_out_din,
        if_full_n => outputs7_c_full_n,
        if_write => first_layer173_U0_outputs7_out_write,
        if_dout => outputs7_c_dout,
        if_empty_n => outputs7_c_empty_n,
        if_read => inter_layer_4_U0_outputs_offset_read);

    inputs8_c_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs8_out_din,
        if_full_n => inputs8_c_full_n,
        if_write => first_layer173_U0_inputs8_out_write,
        if_dout => inputs8_c_dout,
        if_empty_n => inputs8_c_empty_n,
        if_read => inter_layer_8_U0_inputs_offset_read);

    weights8_c_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights8_out_din,
        if_full_n => weights8_c_full_n,
        if_write => first_layer173_U0_weights8_out_write,
        if_dout => weights8_c_dout,
        if_empty_n => weights8_c_empty_n,
        if_read => inter_layer_8_U0_weights_offset_read);

    betas8_c_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas8_out_din,
        if_full_n => betas8_c_full_n,
        if_write => first_layer173_U0_betas8_out_write,
        if_dout => betas8_c_dout,
        if_empty_n => betas8_c_empty_n,
        if_read => inter_layer_8_U0_betas_offset_read);

    outputs8_c_U : component fifo_w32_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs8_out_din,
        if_full_n => outputs8_c_full_n,
        if_write => first_layer173_U0_outputs8_out_write,
        if_dout => outputs8_c_dout,
        if_empty_n => outputs8_c_empty_n,
        if_read => inter_layer_8_U0_outputs_offset_read);

    inputs9_c_U : component fifo_w32_d9_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs9_out_din,
        if_full_n => inputs9_c_full_n,
        if_write => first_layer173_U0_inputs9_out_write,
        if_dout => inputs9_c_dout,
        if_empty_n => inputs9_c_empty_n,
        if_read => inter_layer265_U0_inputs_offset_read);

    weights9_c_U : component fifo_w32_d9_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights9_out_din,
        if_full_n => weights9_c_full_n,
        if_write => first_layer173_U0_weights9_out_write,
        if_dout => weights9_c_dout,
        if_empty_n => weights9_c_empty_n,
        if_read => inter_layer265_U0_weights_offset_read);

    betas9_c_U : component fifo_w32_d9_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas9_out_din,
        if_full_n => betas9_c_full_n,
        if_write => first_layer173_U0_betas9_out_write,
        if_dout => betas9_c_dout,
        if_empty_n => betas9_c_empty_n,
        if_read => inter_layer265_U0_betas_offset_read);

    outputs9_c_U : component fifo_w32_d9_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs9_out_din,
        if_full_n => outputs9_c_full_n,
        if_write => first_layer173_U0_outputs9_out_write,
        if_dout => outputs9_c_dout,
        if_empty_n => outputs9_c_empty_n,
        if_read => inter_layer265_U0_outputs_offset_read);

    inputs10_c_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs10_out_din,
        if_full_n => inputs10_c_full_n,
        if_write => first_layer173_U0_inputs10_out_write,
        if_dout => inputs10_c_dout,
        if_empty_n => inputs10_c_empty_n,
        if_read => inter_layer_6_U0_inputs_offset_read);

    weights10_c_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights10_out_din,
        if_full_n => weights10_c_full_n,
        if_write => first_layer173_U0_weights10_out_write,
        if_dout => weights10_c_dout,
        if_empty_n => weights10_c_empty_n,
        if_read => inter_layer_6_U0_weights_offset_read);

    betas10_c_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas10_out_din,
        if_full_n => betas10_c_full_n,
        if_write => first_layer173_U0_betas10_out_write,
        if_dout => betas10_c_dout,
        if_empty_n => betas10_c_empty_n,
        if_read => inter_layer_6_U0_betas_offset_read);

    outputs10_c_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs10_out_din,
        if_full_n => outputs10_c_full_n,
        if_write => first_layer173_U0_outputs10_out_write,
        if_dout => outputs10_c_dout,
        if_empty_n => outputs10_c_empty_n,
        if_read => inter_layer_6_U0_outputs_offset_read);

    inputs11_c_U : component fifo_w32_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs11_out_din,
        if_full_n => inputs11_c_full_n,
        if_write => first_layer173_U0_inputs11_out_write,
        if_dout => inputs11_c_dout,
        if_empty_n => inputs11_c_empty_n,
        if_read => inter_layer_1_U0_inputs_offset_read);

    weights11_c_U : component fifo_w32_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights11_out_din,
        if_full_n => weights11_c_full_n,
        if_write => first_layer173_U0_weights11_out_write,
        if_dout => weights11_c_dout,
        if_empty_n => weights11_c_empty_n,
        if_read => inter_layer_1_U0_weights_offset_read);

    betas11_c_U : component fifo_w32_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas11_out_din,
        if_full_n => betas11_c_full_n,
        if_write => first_layer173_U0_betas11_out_write,
        if_dout => betas11_c_dout,
        if_empty_n => betas11_c_empty_n,
        if_read => inter_layer_1_U0_betas_offset_read);

    outputs11_c_U : component fifo_w32_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs11_out_din,
        if_full_n => outputs11_c_full_n,
        if_write => first_layer173_U0_outputs11_out_write,
        if_dout => outputs11_c_dout,
        if_empty_n => outputs11_c_empty_n,
        if_read => inter_layer_1_U0_outputs_offset_read);

    inputs12_c_U : component fifo_w32_d12_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs12_out_din,
        if_full_n => inputs12_c_full_n,
        if_write => first_layer173_U0_inputs12_out_write,
        if_dout => inputs12_c_dout,
        if_empty_n => inputs12_c_empty_n,
        if_read => inter_layer_9_U0_inputs_offset_read);

    weights12_c_U : component fifo_w32_d12_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights12_out_din,
        if_full_n => weights12_c_full_n,
        if_write => first_layer173_U0_weights12_out_write,
        if_dout => weights12_c_dout,
        if_empty_n => weights12_c_empty_n,
        if_read => inter_layer_9_U0_weights_offset_read);

    betas12_c_U : component fifo_w32_d12_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas12_out_din,
        if_full_n => betas12_c_full_n,
        if_write => first_layer173_U0_betas12_out_write,
        if_dout => betas12_c_dout,
        if_empty_n => betas12_c_empty_n,
        if_read => inter_layer_9_U0_betas_offset_read);

    outputs12_c_U : component fifo_w32_d12_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs12_out_din,
        if_full_n => outputs12_c_full_n,
        if_write => first_layer173_U0_outputs12_out_write,
        if_dout => outputs12_c_dout,
        if_empty_n => outputs12_c_empty_n,
        if_read => inter_layer_9_U0_outputs_offset_read);

    inputs13_c_U : component fifo_w32_d13_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs13_out_din,
        if_full_n => inputs13_c_full_n,
        if_write => first_layer173_U0_inputs13_out_write,
        if_dout => inputs13_c_dout,
        if_empty_n => inputs13_c_empty_n,
        if_read => inter_layer_3_U0_inputs_offset_read);

    weights13_c_U : component fifo_w32_d13_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights13_out_din,
        if_full_n => weights13_c_full_n,
        if_write => first_layer173_U0_weights13_out_write,
        if_dout => weights13_c_dout,
        if_empty_n => weights13_c_empty_n,
        if_read => inter_layer_3_U0_weights_offset_read);

    betas13_c_U : component fifo_w32_d13_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas13_out_din,
        if_full_n => betas13_c_full_n,
        if_write => first_layer173_U0_betas13_out_write,
        if_dout => betas13_c_dout,
        if_empty_n => betas13_c_empty_n,
        if_read => inter_layer_3_U0_betas_offset_read);

    outputs13_c_U : component fifo_w32_d13_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs13_out_din,
        if_full_n => outputs13_c_full_n,
        if_write => first_layer173_U0_outputs13_out_write,
        if_dout => outputs13_c_dout,
        if_empty_n => outputs13_c_empty_n,
        if_read => inter_layer_3_U0_outputs_offset_read);

    inputs14_c_U : component fifo_w32_d14_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs14_out_din,
        if_full_n => inputs14_c_full_n,
        if_write => first_layer173_U0_inputs14_out_write,
        if_dout => inputs14_c_dout,
        if_empty_n => inputs14_c_empty_n,
        if_read => penult_layer_U0_inputs_offset_read);

    outputs14_c_U : component fifo_w32_d14_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs14_out_din,
        if_full_n => outputs14_c_full_n,
        if_write => first_layer173_U0_outputs14_out_write,
        if_dout => outputs14_c_dout,
        if_empty_n => outputs14_c_empty_n,
        if_read => penult_layer_U0_outputs_offset_read);

    inputs15_c_U : component fifo_w32_d15_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_inputs15_out_din,
        if_full_n => inputs15_c_full_n,
        if_write => first_layer173_U0_inputs15_out_write,
        if_dout => inputs15_c_dout,
        if_empty_n => inputs15_c_empty_n,
        if_read => last_layer_U0_inputs_offset_read);

    weights15_c_U : component fifo_w32_d15_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_weights15_out_din,
        if_full_n => weights15_c_full_n,
        if_write => first_layer173_U0_weights15_out_write,
        if_dout => weights15_c_dout,
        if_empty_n => weights15_c_empty_n,
        if_read => last_layer_U0_weights_offset_read);

    betas15_c_U : component fifo_w32_d15_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_betas15_out_din,
        if_full_n => betas15_c_full_n,
        if_write => first_layer173_U0_betas15_out_write,
        if_dout => betas15_c_dout,
        if_empty_n => betas15_c_empty_n,
        if_read => last_layer_U0_betas_offset_read);

    outputs15_c_U : component fifo_w32_d15_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => first_layer173_U0_outputs15_out_din,
        if_full_n => outputs15_c_full_n,
        if_write => first_layer173_U0_outputs15_out_write,
        if_dout => outputs15_c_dout,
        if_empty_n => outputs15_c_empty_n,
        if_read => last_layer_U0_outputs_offset_read);

    second_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => second_ready_V_din,
        if_full_n => second_ready_V_full_n,
        if_write => inter_layer_7_U0_nxt_ready_V_write,
        if_dout => second_ready_V_dout,
        if_empty_n => second_ready_V_empty_n,
        if_read => inter_layer_2_U0_pre_ready_V_read);

    third_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => third_ready_V_din,
        if_full_n => third_ready_V_full_n,
        if_write => inter_layer_2_U0_nxt_ready_V_write,
        if_dout => third_ready_V_dout,
        if_empty_n => third_ready_V_empty_n,
        if_read => inter_layer_5_U0_pre_ready_V_read);

    fourth_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fourth_ready_V_din,
        if_full_n => fourth_ready_V_full_n,
        if_write => inter_layer_5_U0_nxt_ready_V_write,
        if_dout => fourth_ready_V_dout,
        if_empty_n => fourth_ready_V_empty_n,
        if_read => inter_layer_U0_pre_ready_V_read);

    fifth_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fifth_ready_V_din,
        if_full_n => fifth_ready_V_full_n,
        if_write => inter_layer_U0_nxt_ready_V_write,
        if_dout => fifth_ready_V_dout,
        if_empty_n => fifth_ready_V_empty_n,
        if_read => inter_layer_10_U0_pre_ready_V_read);

    sixth_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sixth_ready_V_din,
        if_full_n => sixth_ready_V_full_n,
        if_write => inter_layer_10_U0_nxt_ready_V_write,
        if_dout => sixth_ready_V_dout,
        if_empty_n => sixth_ready_V_empty_n,
        if_read => inter_layer_4_U0_pre_ready_V_read);

    seventh_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => seventh_ready_V_din,
        if_full_n => seventh_ready_V_full_n,
        if_write => inter_layer_4_U0_nxt_ready_V_write,
        if_dout => seventh_ready_V_dout,
        if_empty_n => seventh_ready_V_empty_n,
        if_read => inter_layer_8_U0_pre_ready_V_read);

    eighth_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => eighth_ready_V_din,
        if_full_n => eighth_ready_V_full_n,
        if_write => inter_layer_8_U0_nxt_ready_V_write,
        if_dout => eighth_ready_V_dout,
        if_empty_n => eighth_ready_V_empty_n,
        if_read => inter_layer265_U0_pre_ready_V_read);

    ninth_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ninth_ready_V_din,
        if_full_n => ninth_ready_V_full_n,
        if_write => inter_layer265_U0_nxt_ready_V_write,
        if_dout => ninth_ready_V_dout,
        if_empty_n => ninth_ready_V_empty_n,
        if_read => inter_layer_6_U0_pre_ready_V_read);

    tenth_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tenth_ready_V_din,
        if_full_n => tenth_ready_V_full_n,
        if_write => inter_layer_6_U0_nxt_ready_V_write,
        if_dout => tenth_ready_V_dout,
        if_empty_n => tenth_ready_V_empty_n,
        if_read => inter_layer_1_U0_pre_ready_V_read);

    eleventh_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => eleventh_ready_V_din,
        if_full_n => eleventh_ready_V_full_n,
        if_write => inter_layer_1_U0_nxt_ready_V_write,
        if_dout => eleventh_ready_V_dout,
        if_empty_n => eleventh_ready_V_empty_n,
        if_read => inter_layer_9_U0_pre_ready_V_read);

    twelfth_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => twelfth_ready_V_din,
        if_full_n => twelfth_ready_V_full_n,
        if_write => inter_layer_9_U0_nxt_ready_V_write,
        if_dout => twelfth_ready_V_dout,
        if_empty_n => twelfth_ready_V_empty_n,
        if_read => inter_layer_3_U0_pre_ready_V_read);

    thirteenth_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => thirteenth_ready_V_din,
        if_full_n => thirteenth_ready_V_full_n,
        if_write => inter_layer_3_U0_nxt_ready_V_write,
        if_dout => thirteenth_ready_V_dout,
        if_empty_n => thirteenth_ready_V_empty_n,
        if_read => penult_layer_U0_pre_ready_V_read);

    fourteenth_ready_V_U : component fifo_w1_d2_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fourteenth_ready_V_din,
        if_full_n => fourteenth_ready_V_full_n,
        if_write => penult_layer_U0_nxt_ready_V_write,
        if_dout => fourteenth_ready_V_dout,
        if_empty_n => fourteenth_ready_V_empty_n,
        if_read => last_layer_U0_pre_ready_V_read);





    ap_sync_reg_first_layer173_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_first_layer173_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_first_layer173_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_first_layer173_U0_ap_ready <= ap_sync_first_layer173_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer265_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer265_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer265_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer265_U0_ap_ready <= ap_sync_inter_layer265_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_10_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_10_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_10_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_10_U0_ap_ready <= ap_sync_inter_layer_10_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_1_U0_ap_ready <= ap_sync_inter_layer_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_2_U0_ap_ready <= ap_sync_inter_layer_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_3_U0_ap_ready <= ap_sync_inter_layer_3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_4_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_4_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_4_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_4_U0_ap_ready <= ap_sync_inter_layer_4_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_5_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_5_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_5_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_5_U0_ap_ready <= ap_sync_inter_layer_5_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_6_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_6_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_6_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_6_U0_ap_ready <= ap_sync_inter_layer_6_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_7_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_7_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_7_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_7_U0_ap_ready <= ap_sync_inter_layer_7_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_8_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_8_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_8_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_8_U0_ap_ready <= ap_sync_inter_layer_8_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_9_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_9_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_9_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_9_U0_ap_ready <= ap_sync_inter_layer_9_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_inter_layer_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_inter_layer_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_inter_layer_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_inter_layer_U0_ap_ready <= ap_sync_inter_layer_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_last_layer_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_last_layer_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_last_layer_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_last_layer_U0_ap_ready <= ap_sync_last_layer_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_penult_layer_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_penult_layer_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_penult_layer_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_penult_layer_U0_ap_ready <= ap_sync_penult_layer_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    first_layer173_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((first_layer173_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                first_layer173_U0_ap_ready_count <= std_logic_vector(unsigned(first_layer173_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (first_layer173_U0_ap_ready = ap_const_logic_1))) then 
                first_layer173_U0_ap_ready_count <= std_logic_vector(unsigned(first_layer173_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer265_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer265_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer265_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer265_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer265_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer265_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer265_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_10_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_10_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_10_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_10_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_10_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_10_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_10_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_1_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_1_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_1_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_1_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_2_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_2_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_2_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_2_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_2_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_2_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_2_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_3_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_3_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_3_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_3_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_3_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_3_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_3_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_4_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_4_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_4_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_4_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_4_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_4_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_4_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_5_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_5_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_5_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_5_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_5_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_5_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_5_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_6_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_6_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_6_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_6_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_6_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_6_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_6_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_7_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_7_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_7_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_7_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_7_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_7_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_7_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_8_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_8_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_8_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_8_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_8_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_8_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_8_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_9_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_9_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_9_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_9_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_9_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_9_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_9_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    inter_layer_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inter_layer_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                inter_layer_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (inter_layer_U0_ap_ready = ap_const_logic_1))) then 
                inter_layer_U0_ap_ready_count <= std_logic_vector(unsigned(inter_layer_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    last_layer_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((last_layer_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                last_layer_U0_ap_ready_count <= std_logic_vector(unsigned(last_layer_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (last_layer_U0_ap_ready = ap_const_logic_1))) then 
                last_layer_U0_ap_ready_count <= std_logic_vector(unsigned(last_layer_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    penult_layer_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((penult_layer_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                penult_layer_U0_ap_ready_count <= std_logic_vector(unsigned(penult_layer_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (penult_layer_U0_ap_ready = ap_const_logic_1))) then 
                penult_layer_U0_ap_ready_count <= std_logic_vector(unsigned(penult_layer_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= ap_sync_done;
    ap_idle <= (penult_layer_U0_ap_idle and last_layer_U0_ap_idle and inter_layer_U0_ap_idle and inter_layer_9_U0_ap_idle and inter_layer_8_U0_ap_idle and inter_layer_7_U0_ap_idle and inter_layer_6_U0_ap_idle and inter_layer_5_U0_ap_idle and inter_layer_4_U0_ap_idle and inter_layer_3_U0_ap_idle and inter_layer_2_U0_ap_idle and inter_layer_1_U0_ap_idle and inter_layer_10_U0_ap_idle and inter_layer265_U0_ap_idle and first_layer173_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (penult_layer_U0_ap_done and last_layer_U0_ap_done and inter_layer_U0_ap_done and inter_layer_9_U0_ap_done and inter_layer_8_U0_ap_done and inter_layer_7_U0_ap_done and inter_layer_6_U0_ap_done and inter_layer_5_U0_ap_done and inter_layer_4_U0_ap_done and inter_layer_3_U0_ap_done and inter_layer_2_U0_ap_done and inter_layer_1_U0_ap_done and inter_layer_10_U0_ap_done and inter_layer265_U0_ap_done and first_layer173_U0_ap_done);
    ap_sync_first_layer173_U0_ap_ready <= (first_layer173_U0_ap_ready or ap_sync_reg_first_layer173_U0_ap_ready);
    ap_sync_inter_layer265_U0_ap_ready <= (inter_layer265_U0_ap_ready or ap_sync_reg_inter_layer265_U0_ap_ready);
    ap_sync_inter_layer_10_U0_ap_ready <= (inter_layer_10_U0_ap_ready or ap_sync_reg_inter_layer_10_U0_ap_ready);
    ap_sync_inter_layer_1_U0_ap_ready <= (inter_layer_1_U0_ap_ready or ap_sync_reg_inter_layer_1_U0_ap_ready);
    ap_sync_inter_layer_2_U0_ap_ready <= (inter_layer_2_U0_ap_ready or ap_sync_reg_inter_layer_2_U0_ap_ready);
    ap_sync_inter_layer_3_U0_ap_ready <= (inter_layer_3_U0_ap_ready or ap_sync_reg_inter_layer_3_U0_ap_ready);
    ap_sync_inter_layer_4_U0_ap_ready <= (inter_layer_4_U0_ap_ready or ap_sync_reg_inter_layer_4_U0_ap_ready);
    ap_sync_inter_layer_5_U0_ap_ready <= (inter_layer_5_U0_ap_ready or ap_sync_reg_inter_layer_5_U0_ap_ready);
    ap_sync_inter_layer_6_U0_ap_ready <= (inter_layer_6_U0_ap_ready or ap_sync_reg_inter_layer_6_U0_ap_ready);
    ap_sync_inter_layer_7_U0_ap_ready <= (inter_layer_7_U0_ap_ready or ap_sync_reg_inter_layer_7_U0_ap_ready);
    ap_sync_inter_layer_8_U0_ap_ready <= (inter_layer_8_U0_ap_ready or ap_sync_reg_inter_layer_8_U0_ap_ready);
    ap_sync_inter_layer_9_U0_ap_ready <= (inter_layer_9_U0_ap_ready or ap_sync_reg_inter_layer_9_U0_ap_ready);
    ap_sync_inter_layer_U0_ap_ready <= (inter_layer_U0_ap_ready or ap_sync_reg_inter_layer_U0_ap_ready);
    ap_sync_last_layer_U0_ap_ready <= (last_layer_U0_ap_ready or ap_sync_reg_last_layer_U0_ap_ready);
    ap_sync_penult_layer_U0_ap_ready <= (penult_layer_U0_ap_ready or ap_sync_reg_penult_layer_U0_ap_ready);
    ap_sync_ready <= (ap_sync_penult_layer_U0_ap_ready and ap_sync_last_layer_U0_ap_ready and ap_sync_inter_layer_U0_ap_ready and ap_sync_inter_layer_9_U0_ap_ready and ap_sync_inter_layer_8_U0_ap_ready and ap_sync_inter_layer_7_U0_ap_ready and ap_sync_inter_layer_6_U0_ap_ready and ap_sync_inter_layer_5_U0_ap_ready and ap_sync_inter_layer_4_U0_ap_ready and ap_sync_inter_layer_3_U0_ap_ready and ap_sync_inter_layer_2_U0_ap_ready and ap_sync_inter_layer_1_U0_ap_ready and ap_sync_inter_layer_10_U0_ap_ready and ap_sync_inter_layer265_U0_ap_ready and ap_sync_first_layer173_U0_ap_ready);
    eighth_ready_V_din <= (0=>inter_layer_8_U0_nxt_ready_V_din, others=>'-');
    eleventh_ready_V_din <= (0=>inter_layer_1_U0_nxt_ready_V_din, others=>'-');
    fifth_ready_V_din <= (0=>inter_layer_U0_nxt_ready_V_din, others=>'-');
    first_layer173_U0_ap_continue <= ap_sync_done;
    first_layer173_U0_ap_start <= ((ap_sync_reg_first_layer173_U0_ap_ready xor ap_const_logic_1) and ap_start);
    first_layer173_U0_start_full_n <= ap_const_logic_1;
    first_layer173_U0_start_write <= ap_const_logic_0;
    first_ready_V_din <= (0=>first_layer173_U0_nxt_ready_V_din, others=>'-');
    fourteenth_ready_V_din <= (0=>penult_layer_U0_nxt_ready_V_din, others=>'-');
    fourth_ready_V_din <= (0=>inter_layer_5_U0_nxt_ready_V_din, others=>'-');
    inter_layer265_U0_ap_continue <= ap_sync_done;
    inter_layer265_U0_ap_start <= ((ap_sync_reg_inter_layer265_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer265_U0_pre_ready_V_dout <= eighth_ready_V_dout(0);
    inter_layer265_U0_start_full_n <= ap_const_logic_1;
    inter_layer265_U0_start_write <= ap_const_logic_0;
    inter_layer_10_U0_ap_continue <= ap_sync_done;
    inter_layer_10_U0_ap_start <= ((ap_sync_reg_inter_layer_10_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_10_U0_pre_ready_V_dout <= fifth_ready_V_dout(0);
    inter_layer_10_U0_start_full_n <= ap_const_logic_1;
    inter_layer_10_U0_start_write <= ap_const_logic_0;
    inter_layer_1_U0_ap_continue <= ap_sync_done;
    inter_layer_1_U0_ap_start <= ((ap_sync_reg_inter_layer_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_1_U0_pre_ready_V_dout <= tenth_ready_V_dout(0);
    inter_layer_1_U0_start_full_n <= ap_const_logic_1;
    inter_layer_1_U0_start_write <= ap_const_logic_0;
    inter_layer_2_U0_ap_continue <= ap_sync_done;
    inter_layer_2_U0_ap_start <= ((ap_sync_reg_inter_layer_2_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_2_U0_pre_ready_V_dout <= second_ready_V_dout(0);
    inter_layer_2_U0_start_full_n <= ap_const_logic_1;
    inter_layer_2_U0_start_write <= ap_const_logic_0;
    inter_layer_3_U0_ap_continue <= ap_sync_done;
    inter_layer_3_U0_ap_start <= ((ap_sync_reg_inter_layer_3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_3_U0_pre_ready_V_dout <= twelfth_ready_V_dout(0);
    inter_layer_3_U0_start_full_n <= ap_const_logic_1;
    inter_layer_3_U0_start_write <= ap_const_logic_0;
    inter_layer_4_U0_ap_continue <= ap_sync_done;
    inter_layer_4_U0_ap_start <= ((ap_sync_reg_inter_layer_4_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_4_U0_pre_ready_V_dout <= sixth_ready_V_dout(0);
    inter_layer_4_U0_start_full_n <= ap_const_logic_1;
    inter_layer_4_U0_start_write <= ap_const_logic_0;
    inter_layer_5_U0_ap_continue <= ap_sync_done;
    inter_layer_5_U0_ap_start <= ((ap_sync_reg_inter_layer_5_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_5_U0_pre_ready_V_dout <= third_ready_V_dout(0);
    inter_layer_5_U0_start_full_n <= ap_const_logic_1;
    inter_layer_5_U0_start_write <= ap_const_logic_0;
    inter_layer_6_U0_ap_continue <= ap_sync_done;
    inter_layer_6_U0_ap_start <= ((ap_sync_reg_inter_layer_6_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_6_U0_pre_ready_V_dout <= ninth_ready_V_dout(0);
    inter_layer_6_U0_start_full_n <= ap_const_logic_1;
    inter_layer_6_U0_start_write <= ap_const_logic_0;
    inter_layer_7_U0_ap_continue <= ap_sync_done;
    inter_layer_7_U0_ap_start <= ((ap_sync_reg_inter_layer_7_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_7_U0_pre_ready_V_dout <= first_ready_V_dout(0);
    inter_layer_7_U0_start_full_n <= ap_const_logic_1;
    inter_layer_7_U0_start_write <= ap_const_logic_0;
    inter_layer_8_U0_ap_continue <= ap_sync_done;
    inter_layer_8_U0_ap_start <= ((ap_sync_reg_inter_layer_8_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_8_U0_pre_ready_V_dout <= seventh_ready_V_dout(0);
    inter_layer_8_U0_start_full_n <= ap_const_logic_1;
    inter_layer_8_U0_start_write <= ap_const_logic_0;
    inter_layer_9_U0_ap_continue <= ap_sync_done;
    inter_layer_9_U0_ap_start <= ((ap_sync_reg_inter_layer_9_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_9_U0_pre_ready_V_dout <= eleventh_ready_V_dout(0);
    inter_layer_9_U0_start_full_n <= ap_const_logic_1;
    inter_layer_9_U0_start_write <= ap_const_logic_0;
    inter_layer_U0_ap_continue <= ap_sync_done;
    inter_layer_U0_ap_start <= ((ap_sync_reg_inter_layer_U0_ap_ready xor ap_const_logic_1) and ap_start);
    inter_layer_U0_pre_ready_V_dout <= fourth_ready_V_dout(0);
    inter_layer_U0_start_full_n <= ap_const_logic_1;
    inter_layer_U0_start_write <= ap_const_logic_0;
    last_layer_U0_ap_continue <= ap_sync_done;
    last_layer_U0_ap_start <= ((ap_sync_reg_last_layer_U0_ap_ready xor ap_const_logic_1) and ap_start);
    last_layer_U0_pre_ready_V_dout <= fourteenth_ready_V_dout(0);
    last_layer_U0_start_full_n <= ap_const_logic_1;
    last_layer_U0_start_write <= ap_const_logic_0;
    ninth_ready_V_din <= (0=>inter_layer265_U0_nxt_ready_V_din, others=>'-');
    penult_layer_U0_ap_continue <= ap_sync_done;
    penult_layer_U0_ap_start <= ((ap_sync_reg_penult_layer_U0_ap_ready xor ap_const_logic_1) and ap_start);
    penult_layer_U0_pre_ready_V_dout <= thirteenth_ready_V_dout(0);
    penult_layer_U0_start_full_n <= ap_const_logic_1;
    penult_layer_U0_start_write <= ap_const_logic_0;
    second_ready_V_din <= (0=>inter_layer_7_U0_nxt_ready_V_din, others=>'-');
    seventh_ready_V_din <= (0=>inter_layer_4_U0_nxt_ready_V_din, others=>'-');
    sixth_ready_V_din <= (0=>inter_layer_10_U0_nxt_ready_V_din, others=>'-');
    tenth_ready_V_din <= (0=>inter_layer_6_U0_nxt_ready_V_din, others=>'-');
    third_ready_V_din <= (0=>inter_layer_2_U0_nxt_ready_V_din, others=>'-');
    thirteenth_ready_V_din <= (0=>inter_layer_3_U0_nxt_ready_V_din, others=>'-');
    twelfth_ready_V_din <= (0=>inter_layer_9_U0_nxt_ready_V_din, others=>'-');
end behav;
