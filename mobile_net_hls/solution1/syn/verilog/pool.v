// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY,
        m_axi_inputs_AWADDR,
        m_axi_inputs_AWID,
        m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID,
        m_axi_inputs_WREADY,
        m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST,
        m_axi_inputs_WID,
        m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY,
        m_axi_inputs_ARADDR,
        m_axi_inputs_ARID,
        m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID,
        m_axi_inputs_RREADY,
        m_axi_inputs_RDATA,
        m_axi_inputs_RLAST,
        m_axi_inputs_RID,
        m_axi_inputs_RUSER,
        m_axi_inputs_RRESP,
        m_axi_inputs_BVALID,
        m_axi_inputs_BREADY,
        m_axi_inputs_BRESP,
        m_axi_inputs_BID,
        m_axi_inputs_BUSER,
        inputs_offset,
        inputs_offset1,
        m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY,
        m_axi_outputs_AWADDR,
        m_axi_outputs_AWID,
        m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID,
        m_axi_outputs_WREADY,
        m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST,
        m_axi_outputs_WID,
        m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY,
        m_axi_outputs_ARADDR,
        m_axi_outputs_ARID,
        m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID,
        m_axi_outputs_RREADY,
        m_axi_outputs_RDATA,
        m_axi_outputs_RLAST,
        m_axi_outputs_RID,
        m_axi_outputs_RUSER,
        m_axi_outputs_RRESP,
        m_axi_outputs_BVALID,
        m_axi_outputs_BREADY,
        m_axi_outputs_BRESP,
        m_axi_outputs_BID,
        m_axi_outputs_BUSER,
        outputs_offset,
        outputs_offset2,
        cntl_V_din,
        cntl_V_full_n,
        cntl_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_inputs_AWVALID;
input   m_axi_inputs_AWREADY;
output  [31:0] m_axi_inputs_AWADDR;
output  [0:0] m_axi_inputs_AWID;
output  [31:0] m_axi_inputs_AWLEN;
output  [2:0] m_axi_inputs_AWSIZE;
output  [1:0] m_axi_inputs_AWBURST;
output  [1:0] m_axi_inputs_AWLOCK;
output  [3:0] m_axi_inputs_AWCACHE;
output  [2:0] m_axi_inputs_AWPROT;
output  [3:0] m_axi_inputs_AWQOS;
output  [3:0] m_axi_inputs_AWREGION;
output  [0:0] m_axi_inputs_AWUSER;
output   m_axi_inputs_WVALID;
input   m_axi_inputs_WREADY;
output  [15:0] m_axi_inputs_WDATA;
output  [1:0] m_axi_inputs_WSTRB;
output   m_axi_inputs_WLAST;
output  [0:0] m_axi_inputs_WID;
output  [0:0] m_axi_inputs_WUSER;
output   m_axi_inputs_ARVALID;
input   m_axi_inputs_ARREADY;
output  [31:0] m_axi_inputs_ARADDR;
output  [0:0] m_axi_inputs_ARID;
output  [31:0] m_axi_inputs_ARLEN;
output  [2:0] m_axi_inputs_ARSIZE;
output  [1:0] m_axi_inputs_ARBURST;
output  [1:0] m_axi_inputs_ARLOCK;
output  [3:0] m_axi_inputs_ARCACHE;
output  [2:0] m_axi_inputs_ARPROT;
output  [3:0] m_axi_inputs_ARQOS;
output  [3:0] m_axi_inputs_ARREGION;
output  [0:0] m_axi_inputs_ARUSER;
input   m_axi_inputs_RVALID;
output   m_axi_inputs_RREADY;
input  [15:0] m_axi_inputs_RDATA;
input   m_axi_inputs_RLAST;
input  [0:0] m_axi_inputs_RID;
input  [0:0] m_axi_inputs_RUSER;
input  [1:0] m_axi_inputs_RRESP;
input   m_axi_inputs_BVALID;
output   m_axi_inputs_BREADY;
input  [1:0] m_axi_inputs_BRESP;
input  [0:0] m_axi_inputs_BID;
input  [0:0] m_axi_inputs_BUSER;
input  [30:0] inputs_offset;
input  [17:0] inputs_offset1;
output   m_axi_outputs_AWVALID;
input   m_axi_outputs_AWREADY;
output  [31:0] m_axi_outputs_AWADDR;
output  [0:0] m_axi_outputs_AWID;
output  [31:0] m_axi_outputs_AWLEN;
output  [2:0] m_axi_outputs_AWSIZE;
output  [1:0] m_axi_outputs_AWBURST;
output  [1:0] m_axi_outputs_AWLOCK;
output  [3:0] m_axi_outputs_AWCACHE;
output  [2:0] m_axi_outputs_AWPROT;
output  [3:0] m_axi_outputs_AWQOS;
output  [3:0] m_axi_outputs_AWREGION;
output  [0:0] m_axi_outputs_AWUSER;
output   m_axi_outputs_WVALID;
input   m_axi_outputs_WREADY;
output  [15:0] m_axi_outputs_WDATA;
output  [1:0] m_axi_outputs_WSTRB;
output   m_axi_outputs_WLAST;
output  [0:0] m_axi_outputs_WID;
output  [0:0] m_axi_outputs_WUSER;
output   m_axi_outputs_ARVALID;
input   m_axi_outputs_ARREADY;
output  [31:0] m_axi_outputs_ARADDR;
output  [0:0] m_axi_outputs_ARID;
output  [31:0] m_axi_outputs_ARLEN;
output  [2:0] m_axi_outputs_ARSIZE;
output  [1:0] m_axi_outputs_ARBURST;
output  [1:0] m_axi_outputs_ARLOCK;
output  [3:0] m_axi_outputs_ARCACHE;
output  [2:0] m_axi_outputs_ARPROT;
output  [3:0] m_axi_outputs_ARQOS;
output  [3:0] m_axi_outputs_ARREGION;
output  [0:0] m_axi_outputs_ARUSER;
input   m_axi_outputs_RVALID;
output   m_axi_outputs_RREADY;
input  [15:0] m_axi_outputs_RDATA;
input   m_axi_outputs_RLAST;
input  [0:0] m_axi_outputs_RID;
input  [0:0] m_axi_outputs_RUSER;
input  [1:0] m_axi_outputs_RRESP;
input   m_axi_outputs_BVALID;
output   m_axi_outputs_BREADY;
input  [1:0] m_axi_outputs_BRESP;
input  [0:0] m_axi_outputs_BID;
input  [0:0] m_axi_outputs_BUSER;
input  [30:0] outputs_offset;
input  [9:0] outputs_offset2;
output   cntl_V_din;
input   cntl_V_full_n;
output   cntl_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_inputs_ARVALID;
reg m_axi_inputs_RREADY;
reg m_axi_outputs_AWVALID;
reg m_axi_outputs_WVALID;
reg m_axi_outputs_BREADY;
reg cntl_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_apply_fu_72_m_axi_inputs_AWVALID;
wire   [31:0] grp_apply_fu_72_m_axi_inputs_AWADDR;
wire   [0:0] grp_apply_fu_72_m_axi_inputs_AWID;
wire   [31:0] grp_apply_fu_72_m_axi_inputs_AWLEN;
wire   [2:0] grp_apply_fu_72_m_axi_inputs_AWSIZE;
wire   [1:0] grp_apply_fu_72_m_axi_inputs_AWBURST;
wire   [1:0] grp_apply_fu_72_m_axi_inputs_AWLOCK;
wire   [3:0] grp_apply_fu_72_m_axi_inputs_AWCACHE;
wire   [2:0] grp_apply_fu_72_m_axi_inputs_AWPROT;
wire   [3:0] grp_apply_fu_72_m_axi_inputs_AWQOS;
wire   [3:0] grp_apply_fu_72_m_axi_inputs_AWREGION;
wire   [0:0] grp_apply_fu_72_m_axi_inputs_AWUSER;
wire    grp_apply_fu_72_m_axi_inputs_WVALID;
wire   [15:0] grp_apply_fu_72_m_axi_inputs_WDATA;
wire   [1:0] grp_apply_fu_72_m_axi_inputs_WSTRB;
wire    grp_apply_fu_72_m_axi_inputs_WLAST;
wire   [0:0] grp_apply_fu_72_m_axi_inputs_WID;
wire   [0:0] grp_apply_fu_72_m_axi_inputs_WUSER;
wire    grp_apply_fu_72_m_axi_inputs_ARVALID;
wire   [31:0] grp_apply_fu_72_m_axi_inputs_ARADDR;
wire   [0:0] grp_apply_fu_72_m_axi_inputs_ARID;
wire   [31:0] grp_apply_fu_72_m_axi_inputs_ARLEN;
wire   [2:0] grp_apply_fu_72_m_axi_inputs_ARSIZE;
wire   [1:0] grp_apply_fu_72_m_axi_inputs_ARBURST;
wire   [1:0] grp_apply_fu_72_m_axi_inputs_ARLOCK;
wire   [3:0] grp_apply_fu_72_m_axi_inputs_ARCACHE;
wire   [2:0] grp_apply_fu_72_m_axi_inputs_ARPROT;
wire   [3:0] grp_apply_fu_72_m_axi_inputs_ARQOS;
wire   [3:0] grp_apply_fu_72_m_axi_inputs_ARREGION;
wire   [0:0] grp_apply_fu_72_m_axi_inputs_ARUSER;
wire    grp_apply_fu_72_m_axi_inputs_RREADY;
wire    grp_apply_fu_72_m_axi_inputs_BREADY;
wire    grp_apply_fu_72_m_axi_outputs_AWVALID;
wire   [31:0] grp_apply_fu_72_m_axi_outputs_AWADDR;
wire   [0:0] grp_apply_fu_72_m_axi_outputs_AWID;
wire   [31:0] grp_apply_fu_72_m_axi_outputs_AWLEN;
wire   [2:0] grp_apply_fu_72_m_axi_outputs_AWSIZE;
wire   [1:0] grp_apply_fu_72_m_axi_outputs_AWBURST;
wire   [1:0] grp_apply_fu_72_m_axi_outputs_AWLOCK;
wire   [3:0] grp_apply_fu_72_m_axi_outputs_AWCACHE;
wire   [2:0] grp_apply_fu_72_m_axi_outputs_AWPROT;
wire   [3:0] grp_apply_fu_72_m_axi_outputs_AWQOS;
wire   [3:0] grp_apply_fu_72_m_axi_outputs_AWREGION;
wire   [0:0] grp_apply_fu_72_m_axi_outputs_AWUSER;
wire    grp_apply_fu_72_m_axi_outputs_WVALID;
wire   [15:0] grp_apply_fu_72_m_axi_outputs_WDATA;
wire   [1:0] grp_apply_fu_72_m_axi_outputs_WSTRB;
wire    grp_apply_fu_72_m_axi_outputs_WLAST;
wire   [0:0] grp_apply_fu_72_m_axi_outputs_WID;
wire   [0:0] grp_apply_fu_72_m_axi_outputs_WUSER;
wire    grp_apply_fu_72_m_axi_outputs_ARVALID;
wire   [31:0] grp_apply_fu_72_m_axi_outputs_ARADDR;
wire   [0:0] grp_apply_fu_72_m_axi_outputs_ARID;
wire   [31:0] grp_apply_fu_72_m_axi_outputs_ARLEN;
wire   [2:0] grp_apply_fu_72_m_axi_outputs_ARSIZE;
wire   [1:0] grp_apply_fu_72_m_axi_outputs_ARBURST;
wire   [1:0] grp_apply_fu_72_m_axi_outputs_ARLOCK;
wire   [3:0] grp_apply_fu_72_m_axi_outputs_ARCACHE;
wire   [2:0] grp_apply_fu_72_m_axi_outputs_ARPROT;
wire   [3:0] grp_apply_fu_72_m_axi_outputs_ARQOS;
wire   [3:0] grp_apply_fu_72_m_axi_outputs_ARREGION;
wire   [0:0] grp_apply_fu_72_m_axi_outputs_ARUSER;
wire    grp_apply_fu_72_m_axi_outputs_RREADY;
wire    grp_apply_fu_72_m_axi_outputs_BREADY;
wire    grp_apply_fu_72_cntl_V_din;
wire    grp_apply_fu_72_cntl_V_write;
wire    grp_apply_fu_72_ap_start;
wire    grp_apply_fu_72_ap_done;
wire    grp_apply_fu_72_ap_ready;
wire    grp_apply_fu_72_ap_idle;
reg    grp_apply_fu_72_ap_continue;
reg    grp_apply_fu_72_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_apply_fu_72_ap_ready;
wire    ap_sync_grp_apply_fu_72_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_apply_fu_72_ap_ready;
reg    ap_sync_reg_grp_apply_fu_72_ap_done;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_apply_fu_72_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_apply_fu_72_ap_ready = 1'b0;
#0 ap_sync_reg_grp_apply_fu_72_ap_done = 1'b0;
end

apply grp_apply_fu_72(
    .m_axi_inputs_AWVALID(grp_apply_fu_72_m_axi_inputs_AWVALID),
    .m_axi_inputs_AWREADY(1'b0),
    .m_axi_inputs_AWADDR(grp_apply_fu_72_m_axi_inputs_AWADDR),
    .m_axi_inputs_AWID(grp_apply_fu_72_m_axi_inputs_AWID),
    .m_axi_inputs_AWLEN(grp_apply_fu_72_m_axi_inputs_AWLEN),
    .m_axi_inputs_AWSIZE(grp_apply_fu_72_m_axi_inputs_AWSIZE),
    .m_axi_inputs_AWBURST(grp_apply_fu_72_m_axi_inputs_AWBURST),
    .m_axi_inputs_AWLOCK(grp_apply_fu_72_m_axi_inputs_AWLOCK),
    .m_axi_inputs_AWCACHE(grp_apply_fu_72_m_axi_inputs_AWCACHE),
    .m_axi_inputs_AWPROT(grp_apply_fu_72_m_axi_inputs_AWPROT),
    .m_axi_inputs_AWQOS(grp_apply_fu_72_m_axi_inputs_AWQOS),
    .m_axi_inputs_AWREGION(grp_apply_fu_72_m_axi_inputs_AWREGION),
    .m_axi_inputs_AWUSER(grp_apply_fu_72_m_axi_inputs_AWUSER),
    .m_axi_inputs_WVALID(grp_apply_fu_72_m_axi_inputs_WVALID),
    .m_axi_inputs_WREADY(1'b0),
    .m_axi_inputs_WDATA(grp_apply_fu_72_m_axi_inputs_WDATA),
    .m_axi_inputs_WSTRB(grp_apply_fu_72_m_axi_inputs_WSTRB),
    .m_axi_inputs_WLAST(grp_apply_fu_72_m_axi_inputs_WLAST),
    .m_axi_inputs_WID(grp_apply_fu_72_m_axi_inputs_WID),
    .m_axi_inputs_WUSER(grp_apply_fu_72_m_axi_inputs_WUSER),
    .m_axi_inputs_ARVALID(grp_apply_fu_72_m_axi_inputs_ARVALID),
    .m_axi_inputs_ARREADY(m_axi_inputs_ARREADY),
    .m_axi_inputs_ARADDR(grp_apply_fu_72_m_axi_inputs_ARADDR),
    .m_axi_inputs_ARID(grp_apply_fu_72_m_axi_inputs_ARID),
    .m_axi_inputs_ARLEN(grp_apply_fu_72_m_axi_inputs_ARLEN),
    .m_axi_inputs_ARSIZE(grp_apply_fu_72_m_axi_inputs_ARSIZE),
    .m_axi_inputs_ARBURST(grp_apply_fu_72_m_axi_inputs_ARBURST),
    .m_axi_inputs_ARLOCK(grp_apply_fu_72_m_axi_inputs_ARLOCK),
    .m_axi_inputs_ARCACHE(grp_apply_fu_72_m_axi_inputs_ARCACHE),
    .m_axi_inputs_ARPROT(grp_apply_fu_72_m_axi_inputs_ARPROT),
    .m_axi_inputs_ARQOS(grp_apply_fu_72_m_axi_inputs_ARQOS),
    .m_axi_inputs_ARREGION(grp_apply_fu_72_m_axi_inputs_ARREGION),
    .m_axi_inputs_ARUSER(grp_apply_fu_72_m_axi_inputs_ARUSER),
    .m_axi_inputs_RVALID(m_axi_inputs_RVALID),
    .m_axi_inputs_RREADY(grp_apply_fu_72_m_axi_inputs_RREADY),
    .m_axi_inputs_RDATA(m_axi_inputs_RDATA),
    .m_axi_inputs_RLAST(m_axi_inputs_RLAST),
    .m_axi_inputs_RID(m_axi_inputs_RID),
    .m_axi_inputs_RUSER(m_axi_inputs_RUSER),
    .m_axi_inputs_RRESP(m_axi_inputs_RRESP),
    .m_axi_inputs_BVALID(1'b0),
    .m_axi_inputs_BREADY(grp_apply_fu_72_m_axi_inputs_BREADY),
    .m_axi_inputs_BRESP(2'd0),
    .m_axi_inputs_BID(1'd0),
    .m_axi_inputs_BUSER(1'd0),
    .inputs_offset(inputs_offset),
    .inputs_offset1(inputs_offset1),
    .m_axi_outputs_AWVALID(grp_apply_fu_72_m_axi_outputs_AWVALID),
    .m_axi_outputs_AWREADY(m_axi_outputs_AWREADY),
    .m_axi_outputs_AWADDR(grp_apply_fu_72_m_axi_outputs_AWADDR),
    .m_axi_outputs_AWID(grp_apply_fu_72_m_axi_outputs_AWID),
    .m_axi_outputs_AWLEN(grp_apply_fu_72_m_axi_outputs_AWLEN),
    .m_axi_outputs_AWSIZE(grp_apply_fu_72_m_axi_outputs_AWSIZE),
    .m_axi_outputs_AWBURST(grp_apply_fu_72_m_axi_outputs_AWBURST),
    .m_axi_outputs_AWLOCK(grp_apply_fu_72_m_axi_outputs_AWLOCK),
    .m_axi_outputs_AWCACHE(grp_apply_fu_72_m_axi_outputs_AWCACHE),
    .m_axi_outputs_AWPROT(grp_apply_fu_72_m_axi_outputs_AWPROT),
    .m_axi_outputs_AWQOS(grp_apply_fu_72_m_axi_outputs_AWQOS),
    .m_axi_outputs_AWREGION(grp_apply_fu_72_m_axi_outputs_AWREGION),
    .m_axi_outputs_AWUSER(grp_apply_fu_72_m_axi_outputs_AWUSER),
    .m_axi_outputs_WVALID(grp_apply_fu_72_m_axi_outputs_WVALID),
    .m_axi_outputs_WREADY(m_axi_outputs_WREADY),
    .m_axi_outputs_WDATA(grp_apply_fu_72_m_axi_outputs_WDATA),
    .m_axi_outputs_WSTRB(grp_apply_fu_72_m_axi_outputs_WSTRB),
    .m_axi_outputs_WLAST(grp_apply_fu_72_m_axi_outputs_WLAST),
    .m_axi_outputs_WID(grp_apply_fu_72_m_axi_outputs_WID),
    .m_axi_outputs_WUSER(grp_apply_fu_72_m_axi_outputs_WUSER),
    .m_axi_outputs_ARVALID(grp_apply_fu_72_m_axi_outputs_ARVALID),
    .m_axi_outputs_ARREADY(1'b0),
    .m_axi_outputs_ARADDR(grp_apply_fu_72_m_axi_outputs_ARADDR),
    .m_axi_outputs_ARID(grp_apply_fu_72_m_axi_outputs_ARID),
    .m_axi_outputs_ARLEN(grp_apply_fu_72_m_axi_outputs_ARLEN),
    .m_axi_outputs_ARSIZE(grp_apply_fu_72_m_axi_outputs_ARSIZE),
    .m_axi_outputs_ARBURST(grp_apply_fu_72_m_axi_outputs_ARBURST),
    .m_axi_outputs_ARLOCK(grp_apply_fu_72_m_axi_outputs_ARLOCK),
    .m_axi_outputs_ARCACHE(grp_apply_fu_72_m_axi_outputs_ARCACHE),
    .m_axi_outputs_ARPROT(grp_apply_fu_72_m_axi_outputs_ARPROT),
    .m_axi_outputs_ARQOS(grp_apply_fu_72_m_axi_outputs_ARQOS),
    .m_axi_outputs_ARREGION(grp_apply_fu_72_m_axi_outputs_ARREGION),
    .m_axi_outputs_ARUSER(grp_apply_fu_72_m_axi_outputs_ARUSER),
    .m_axi_outputs_RVALID(1'b0),
    .m_axi_outputs_RREADY(grp_apply_fu_72_m_axi_outputs_RREADY),
    .m_axi_outputs_RDATA(16'd0),
    .m_axi_outputs_RLAST(1'b0),
    .m_axi_outputs_RID(1'd0),
    .m_axi_outputs_RUSER(1'd0),
    .m_axi_outputs_RRESP(2'd0),
    .m_axi_outputs_BVALID(m_axi_outputs_BVALID),
    .m_axi_outputs_BREADY(grp_apply_fu_72_m_axi_outputs_BREADY),
    .m_axi_outputs_BRESP(m_axi_outputs_BRESP),
    .m_axi_outputs_BID(m_axi_outputs_BID),
    .m_axi_outputs_BUSER(m_axi_outputs_BUSER),
    .outputs_offset(outputs_offset),
    .outputs_offset2(outputs_offset2),
    .cntl_V_din(grp_apply_fu_72_cntl_V_din),
    .cntl_V_full_n(cntl_V_full_n),
    .cntl_V_write(grp_apply_fu_72_cntl_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .inputs_offset_ap_vld(1'b1),
    .inputs_offset1_ap_vld(1'b1),
    .outputs_offset2_ap_vld(1'b1),
    .outputs_offset_ap_vld(1'b1),
    .ap_start(grp_apply_fu_72_ap_start),
    .ap_done(grp_apply_fu_72_ap_done),
    .ap_ready(grp_apply_fu_72_ap_ready),
    .ap_idle(grp_apply_fu_72_ap_idle),
    .ap_continue(grp_apply_fu_72_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_apply_fu_72_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_apply_fu_72_ap_done <= 1'b0;
        end else if ((grp_apply_fu_72_ap_done == 1'b1)) begin
            ap_sync_reg_grp_apply_fu_72_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_apply_fu_72_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_apply_fu_72_ap_ready <= 1'b0;
        end else if ((grp_apply_fu_72_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_apply_fu_72_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_apply_fu_72_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_apply_fu_72_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_apply_fu_72_ap_start_reg <= 1'b1;
        end else if ((grp_apply_fu_72_ap_ready == 1'b1)) begin
            grp_apply_fu_72_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cntl_V_write = grp_apply_fu_72_cntl_V_write;
    end else begin
        cntl_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_apply_fu_72_ap_continue = 1'b1;
    end else begin
        grp_apply_fu_72_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_inputs_ARVALID = grp_apply_fu_72_m_axi_inputs_ARVALID;
    end else begin
        m_axi_inputs_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_inputs_RREADY = grp_apply_fu_72_m_axi_inputs_RREADY;
    end else begin
        m_axi_inputs_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_outputs_AWVALID = grp_apply_fu_72_m_axi_outputs_AWVALID;
    end else begin
        m_axi_outputs_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_outputs_BREADY = grp_apply_fu_72_m_axi_outputs_BREADY;
    end else begin
        m_axi_outputs_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_outputs_WVALID = grp_apply_fu_72_m_axi_outputs_WVALID;
    end else begin
        m_axi_outputs_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_apply_fu_72_ap_ready & ap_sync_grp_apply_fu_72_ap_done) == 1'b0);
end

assign ap_sync_grp_apply_fu_72_ap_done = (grp_apply_fu_72_ap_done | ap_sync_reg_grp_apply_fu_72_ap_done);

assign ap_sync_grp_apply_fu_72_ap_ready = (grp_apply_fu_72_ap_ready | ap_sync_reg_grp_apply_fu_72_ap_ready);

assign cntl_V_din = grp_apply_fu_72_cntl_V_din;

assign grp_apply_fu_72_ap_start = grp_apply_fu_72_ap_start_reg;

assign m_axi_inputs_ARADDR = grp_apply_fu_72_m_axi_inputs_ARADDR;

assign m_axi_inputs_ARBURST = grp_apply_fu_72_m_axi_inputs_ARBURST;

assign m_axi_inputs_ARCACHE = grp_apply_fu_72_m_axi_inputs_ARCACHE;

assign m_axi_inputs_ARID = grp_apply_fu_72_m_axi_inputs_ARID;

assign m_axi_inputs_ARLEN = grp_apply_fu_72_m_axi_inputs_ARLEN;

assign m_axi_inputs_ARLOCK = grp_apply_fu_72_m_axi_inputs_ARLOCK;

assign m_axi_inputs_ARPROT = grp_apply_fu_72_m_axi_inputs_ARPROT;

assign m_axi_inputs_ARQOS = grp_apply_fu_72_m_axi_inputs_ARQOS;

assign m_axi_inputs_ARREGION = grp_apply_fu_72_m_axi_inputs_ARREGION;

assign m_axi_inputs_ARSIZE = grp_apply_fu_72_m_axi_inputs_ARSIZE;

assign m_axi_inputs_ARUSER = grp_apply_fu_72_m_axi_inputs_ARUSER;

assign m_axi_inputs_AWADDR = 32'd0;

assign m_axi_inputs_AWBURST = 2'd0;

assign m_axi_inputs_AWCACHE = 4'd0;

assign m_axi_inputs_AWID = 1'd0;

assign m_axi_inputs_AWLEN = 32'd0;

assign m_axi_inputs_AWLOCK = 2'd0;

assign m_axi_inputs_AWPROT = 3'd0;

assign m_axi_inputs_AWQOS = 4'd0;

assign m_axi_inputs_AWREGION = 4'd0;

assign m_axi_inputs_AWSIZE = 3'd0;

assign m_axi_inputs_AWUSER = 1'd0;

assign m_axi_inputs_AWVALID = 1'b0;

assign m_axi_inputs_BREADY = 1'b0;

assign m_axi_inputs_WDATA = 16'd0;

assign m_axi_inputs_WID = 1'd0;

assign m_axi_inputs_WLAST = 1'b0;

assign m_axi_inputs_WSTRB = 2'd0;

assign m_axi_inputs_WUSER = 1'd0;

assign m_axi_inputs_WVALID = 1'b0;

assign m_axi_outputs_ARADDR = 32'd0;

assign m_axi_outputs_ARBURST = 2'd0;

assign m_axi_outputs_ARCACHE = 4'd0;

assign m_axi_outputs_ARID = 1'd0;

assign m_axi_outputs_ARLEN = 32'd0;

assign m_axi_outputs_ARLOCK = 2'd0;

assign m_axi_outputs_ARPROT = 3'd0;

assign m_axi_outputs_ARQOS = 4'd0;

assign m_axi_outputs_ARREGION = 4'd0;

assign m_axi_outputs_ARSIZE = 3'd0;

assign m_axi_outputs_ARUSER = 1'd0;

assign m_axi_outputs_ARVALID = 1'b0;

assign m_axi_outputs_AWADDR = grp_apply_fu_72_m_axi_outputs_AWADDR;

assign m_axi_outputs_AWBURST = grp_apply_fu_72_m_axi_outputs_AWBURST;

assign m_axi_outputs_AWCACHE = grp_apply_fu_72_m_axi_outputs_AWCACHE;

assign m_axi_outputs_AWID = grp_apply_fu_72_m_axi_outputs_AWID;

assign m_axi_outputs_AWLEN = grp_apply_fu_72_m_axi_outputs_AWLEN;

assign m_axi_outputs_AWLOCK = grp_apply_fu_72_m_axi_outputs_AWLOCK;

assign m_axi_outputs_AWPROT = grp_apply_fu_72_m_axi_outputs_AWPROT;

assign m_axi_outputs_AWQOS = grp_apply_fu_72_m_axi_outputs_AWQOS;

assign m_axi_outputs_AWREGION = grp_apply_fu_72_m_axi_outputs_AWREGION;

assign m_axi_outputs_AWSIZE = grp_apply_fu_72_m_axi_outputs_AWSIZE;

assign m_axi_outputs_AWUSER = grp_apply_fu_72_m_axi_outputs_AWUSER;

assign m_axi_outputs_RREADY = 1'b0;

assign m_axi_outputs_WDATA = grp_apply_fu_72_m_axi_outputs_WDATA;

assign m_axi_outputs_WID = grp_apply_fu_72_m_axi_outputs_WID;

assign m_axi_outputs_WLAST = grp_apply_fu_72_m_axi_outputs_WLAST;

assign m_axi_outputs_WSTRB = grp_apply_fu_72_m_axi_outputs_WSTRB;

assign m_axi_outputs_WUSER = grp_apply_fu_72_m_axi_outputs_WUSER;

endmodule //pool
