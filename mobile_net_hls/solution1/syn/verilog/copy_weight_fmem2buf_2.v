// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module copy_weight_fmem2buf_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        weights_offset,
        weight_buffer_0_V_din,
        weight_buffer_0_V_full_n,
        weight_buffer_0_V_write,
        weight_buffer_1_V_din,
        weight_buffer_1_V_full_n,
        weight_buffer_1_V_write,
        weight_buffer_2_V_din,
        weight_buffer_2_V_full_n,
        weight_buffer_2_V_write,
        weight_buffer_3_V_din,
        weight_buffer_3_V_full_n,
        weight_buffer_3_V_write,
        weight_buffer_4_V_din,
        weight_buffer_4_V_full_n,
        weight_buffer_4_V_write,
        weight_buffer_5_V_din,
        weight_buffer_5_V_full_n,
        weight_buffer_5_V_write,
        weight_buffer_6_V_din,
        weight_buffer_6_V_full_n,
        weight_buffer_6_V_write,
        weight_buffer_7_V_din,
        weight_buffer_7_V_full_n,
        weight_buffer_7_V_write,
        weight_buffer_8_V_din,
        weight_buffer_8_V_full_n,
        weight_buffer_8_V_write,
        weight_buffer_9_V_din,
        weight_buffer_9_V_full_n,
        weight_buffer_9_V_write,
        weight_buffer_10_V_din,
        weight_buffer_10_V_full_n,
        weight_buffer_10_V_write,
        weight_buffer_11_V_din,
        weight_buffer_11_V_full_n,
        weight_buffer_11_V_write,
        weight_buffer_12_V_din,
        weight_buffer_12_V_full_n,
        weight_buffer_12_V_write,
        weight_buffer_13_V_din,
        weight_buffer_13_V_full_n,
        weight_buffer_13_V_write,
        weight_buffer_14_V_din,
        weight_buffer_14_V_full_n,
        weight_buffer_14_V_write,
        weight_buffer_15_V_din,
        weight_buffer_15_V_full_n,
        weight_buffer_15_V_write,
        n,
        m,
        nLoops,
        mLoops,
        weight_cntl_V_din,
        weight_cntl_V_full_n,
        weight_cntl_V_write
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [31:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [15:0] m_axi_weights_WDATA;
output  [1:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [31:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [15:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [30:0] weights_offset;
output  [15:0] weight_buffer_0_V_din;
input   weight_buffer_0_V_full_n;
output   weight_buffer_0_V_write;
output  [15:0] weight_buffer_1_V_din;
input   weight_buffer_1_V_full_n;
output   weight_buffer_1_V_write;
output  [15:0] weight_buffer_2_V_din;
input   weight_buffer_2_V_full_n;
output   weight_buffer_2_V_write;
output  [15:0] weight_buffer_3_V_din;
input   weight_buffer_3_V_full_n;
output   weight_buffer_3_V_write;
output  [15:0] weight_buffer_4_V_din;
input   weight_buffer_4_V_full_n;
output   weight_buffer_4_V_write;
output  [15:0] weight_buffer_5_V_din;
input   weight_buffer_5_V_full_n;
output   weight_buffer_5_V_write;
output  [15:0] weight_buffer_6_V_din;
input   weight_buffer_6_V_full_n;
output   weight_buffer_6_V_write;
output  [15:0] weight_buffer_7_V_din;
input   weight_buffer_7_V_full_n;
output   weight_buffer_7_V_write;
output  [15:0] weight_buffer_8_V_din;
input   weight_buffer_8_V_full_n;
output   weight_buffer_8_V_write;
output  [15:0] weight_buffer_9_V_din;
input   weight_buffer_9_V_full_n;
output   weight_buffer_9_V_write;
output  [15:0] weight_buffer_10_V_din;
input   weight_buffer_10_V_full_n;
output   weight_buffer_10_V_write;
output  [15:0] weight_buffer_11_V_din;
input   weight_buffer_11_V_full_n;
output   weight_buffer_11_V_write;
output  [15:0] weight_buffer_12_V_din;
input   weight_buffer_12_V_full_n;
output   weight_buffer_12_V_write;
output  [15:0] weight_buffer_13_V_din;
input   weight_buffer_13_V_full_n;
output   weight_buffer_13_V_write;
output  [15:0] weight_buffer_14_V_din;
input   weight_buffer_14_V_full_n;
output   weight_buffer_14_V_write;
output  [15:0] weight_buffer_15_V_din;
input   weight_buffer_15_V_full_n;
output   weight_buffer_15_V_write;
input  [8:0] n;
input  [9:0] m;
input  [1:0] nLoops;
input  [9:0] mLoops;
output   weight_cntl_V_din;
input   weight_cntl_V_full_n;
output   weight_cntl_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weights_ARVALID;
reg m_axi_weights_RREADY;
reg weight_buffer_0_V_write;
reg weight_buffer_1_V_write;
reg weight_buffer_2_V_write;
reg weight_buffer_3_V_write;
reg weight_buffer_4_V_write;
reg weight_buffer_5_V_write;
reg weight_buffer_6_V_write;
reg weight_buffer_7_V_write;
reg weight_buffer_8_V_write;
reg weight_buffer_9_V_write;
reg weight_buffer_10_V_write;
reg weight_buffer_11_V_write;
reg weight_buffer_12_V_write;
reg weight_buffer_13_V_write;
reg weight_buffer_14_V_write;
reg weight_buffer_15_V_write;
reg weight_cntl_V_write;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    weights_blk_n_R;
wire    ap_CS_fsm_state11;
wire   [31:0] weights_offset_cast_fu_357_p1;
reg   [31:0] weights_offset_cast_reg_457;
wire   [17:0] base_addr_fu_381_p2;
wire   [5:0] tmp_556_fu_387_p1;
reg   [5:0] tmp_556_reg_467;
wire   [1:0] tn_4_fu_396_p2;
reg   [1:0] tn_4_reg_475;
wire    ap_CS_fsm_state2;
wire   [4:0] tm_4_fu_411_p2;
reg   [4:0] tm_4_reg_483;
wire    ap_CS_fsm_state3;
wire   [3:0] tmp_557_fu_421_p1;
reg   [3:0] tmp_557_reg_488;
wire   [0:0] tmp_13_fu_406_p2;
reg   [31:0] weights_addr_reg_492;
wire   [17:0] base_addr_d1_9_fu_440_p2;
reg   [15:0] tmp_558_reg_503;
wire   [17:0] base_addr_d2_8_fu_446_p2;
wire    ap_CS_fsm_state12;
reg   [17:0] base_addr_d2_reg_314;
reg   [1:0] tn_reg_324;
reg   [17:0] base_addr_d_reg_335;
wire   [0:0] exitcond_fu_391_p2;
reg   [4:0] tm_reg_346;
wire   [63:0] sum_cast_fu_430_p1;
reg    ap_reg_ioackin_m_axi_weights_ARREADY;
reg    ap_sig_ioackin_m_axi_weights_ARREADY;
wire   [7:0] tmp_555_fu_361_p1;
wire   [16:0] tmp_fu_365_p3;
wire   [17:0] m_cast_fu_377_p1;
wire   [17:0] tmp_cast3_fu_373_p1;
wire   [5:0] tm_cast_cast_fu_402_p1;
wire   [31:0] tmp_125_cast_fu_417_p1;
wire   [31:0] sum_fu_425_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_reg_ioackin_m_axi_weights_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_sig_ioackin_m_axi_weights_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
            end else if ((m_axi_weights_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        base_addr_d2_reg_314 <= base_addr_d1_9_fu_440_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        base_addr_d2_reg_314 <= base_addr_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        base_addr_d_reg_335 <= base_addr_d2_8_fu_446_p2;
    end else if (((exitcond_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        base_addr_d_reg_335 <= base_addr_d2_reg_314;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tm_reg_346 <= tm_4_reg_483;
    end else if (((exitcond_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tm_reg_346 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tn_reg_324 <= tn_4_reg_475;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tn_reg_324 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tm_4_reg_483 <= tm_4_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_556_reg_467 <= tmp_556_fu_387_p1;
        weights_offset_cast_reg_457[30 : 0] <= weights_offset_cast_fu_357_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_13_fu_406_p2 == 1'd1))) begin
        tmp_557_reg_488 <= tmp_557_fu_421_p1;
        weights_addr_reg_492 <= sum_cast_fu_430_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_558_reg_503 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tn_4_reg_475 <= tn_4_fu_396_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_weights_ARREADY = m_axi_weights_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weights_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_weights_ARVALID = 1'b1;
    end else begin
        m_axi_weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_weights_RREADY = 1'b1;
    end else begin
        m_axi_weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_557_reg_488 == 4'd0) & (weight_buffer_0_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        weight_buffer_0_V_write = 1'b1;
    end else begin
        weight_buffer_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_10_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd10))) begin
        weight_buffer_10_V_write = 1'b1;
    end else begin
        weight_buffer_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_11_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd11))) begin
        weight_buffer_11_V_write = 1'b1;
    end else begin
        weight_buffer_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_12_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd12))) begin
        weight_buffer_12_V_write = 1'b1;
    end else begin
        weight_buffer_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_13_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd13))) begin
        weight_buffer_13_V_write = 1'b1;
    end else begin
        weight_buffer_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_14_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd14))) begin
        weight_buffer_14_V_write = 1'b1;
    end else begin
        weight_buffer_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_15_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd15))) begin
        weight_buffer_15_V_write = 1'b1;
    end else begin
        weight_buffer_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((weight_buffer_1_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (tmp_557_reg_488 == 4'd1))) begin
        weight_buffer_1_V_write = 1'b1;
    end else begin
        weight_buffer_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((weight_buffer_2_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state12) & (tmp_557_reg_488 == 4'd2))) begin
        weight_buffer_2_V_write = 1'b1;
    end else begin
        weight_buffer_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_3_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd3))) begin
        weight_buffer_3_V_write = 1'b1;
    end else begin
        weight_buffer_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_4_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd4))) begin
        weight_buffer_4_V_write = 1'b1;
    end else begin
        weight_buffer_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_5_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd5))) begin
        weight_buffer_5_V_write = 1'b1;
    end else begin
        weight_buffer_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_6_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd6))) begin
        weight_buffer_6_V_write = 1'b1;
    end else begin
        weight_buffer_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_7_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd7))) begin
        weight_buffer_7_V_write = 1'b1;
    end else begin
        weight_buffer_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_8_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd8))) begin
        weight_buffer_8_V_write = 1'b1;
    end else begin
        weight_buffer_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (weight_buffer_9_V_full_n == 1'b1) & (tmp_557_reg_488 == 4'd9))) begin
        weight_buffer_9_V_write = 1'b1;
    end else begin
        weight_buffer_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (weight_cntl_V_full_n == 1'b1))) begin
        weight_cntl_V_write = 1'b1;
    end else begin
        weight_cntl_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_blk_n_AR = m_axi_weights_ARREADY;
    end else begin
        weights_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weights_blk_n_R = m_axi_weights_RVALID;
    end else begin
        weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_13_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_m_axi_weights_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign base_addr_d1_9_fu_440_p2 = (base_addr_d2_reg_314 + 18'd512);

assign base_addr_d2_8_fu_446_p2 = (base_addr_d_reg_335 + 18'd1);

assign base_addr_fu_381_p2 = (m_cast_fu_377_p1 + tmp_cast3_fu_373_p1);

assign exitcond_fu_391_p2 = ((tn_reg_324 == nLoops) ? 1'b1 : 1'b0);

assign m_axi_weights_ARADDR = weights_addr_reg_492;

assign m_axi_weights_ARBURST = 2'd0;

assign m_axi_weights_ARCACHE = 4'd0;

assign m_axi_weights_ARID = 1'd0;

assign m_axi_weights_ARLEN = 32'd1;

assign m_axi_weights_ARLOCK = 2'd0;

assign m_axi_weights_ARPROT = 3'd0;

assign m_axi_weights_ARQOS = 4'd0;

assign m_axi_weights_ARREGION = 4'd0;

assign m_axi_weights_ARSIZE = 3'd0;

assign m_axi_weights_ARUSER = 1'd0;

assign m_axi_weights_AWADDR = 32'd0;

assign m_axi_weights_AWBURST = 2'd0;

assign m_axi_weights_AWCACHE = 4'd0;

assign m_axi_weights_AWID = 1'd0;

assign m_axi_weights_AWLEN = 32'd0;

assign m_axi_weights_AWLOCK = 2'd0;

assign m_axi_weights_AWPROT = 3'd0;

assign m_axi_weights_AWQOS = 4'd0;

assign m_axi_weights_AWREGION = 4'd0;

assign m_axi_weights_AWSIZE = 3'd0;

assign m_axi_weights_AWUSER = 1'd0;

assign m_axi_weights_AWVALID = 1'b0;

assign m_axi_weights_BREADY = 1'b0;

assign m_axi_weights_WDATA = 16'd0;

assign m_axi_weights_WID = 1'd0;

assign m_axi_weights_WLAST = 1'b0;

assign m_axi_weights_WSTRB = 2'd0;

assign m_axi_weights_WUSER = 1'd0;

assign m_axi_weights_WVALID = 1'b0;

assign m_cast_fu_377_p1 = m;

assign sum_cast_fu_430_p1 = sum_fu_425_p2;

assign sum_fu_425_p2 = (weights_offset_cast_reg_457 + tmp_125_cast_fu_417_p1);

assign tm_4_fu_411_p2 = (tm_reg_346 + 5'd1);

assign tm_cast_cast_fu_402_p1 = tm_reg_346;

assign tmp_125_cast_fu_417_p1 = base_addr_d_reg_335;

assign tmp_13_fu_406_p2 = (($signed(tm_cast_cast_fu_402_p1) < $signed(tmp_556_reg_467)) ? 1'b1 : 1'b0);

assign tmp_555_fu_361_p1 = n[7:0];

assign tmp_556_fu_387_p1 = mLoops[5:0];

assign tmp_557_fu_421_p1 = tm_reg_346[3:0];

assign tmp_cast3_fu_373_p1 = tmp_fu_365_p3;

assign tmp_fu_365_p3 = {{tmp_555_fu_361_p1}, {9'd0}};

assign tn_4_fu_396_p2 = (tn_reg_324 + 2'd1);

assign weight_buffer_0_V_din = tmp_558_reg_503;

assign weight_buffer_10_V_din = tmp_558_reg_503;

assign weight_buffer_11_V_din = tmp_558_reg_503;

assign weight_buffer_12_V_din = tmp_558_reg_503;

assign weight_buffer_13_V_din = tmp_558_reg_503;

assign weight_buffer_14_V_din = tmp_558_reg_503;

assign weight_buffer_15_V_din = tmp_558_reg_503;

assign weight_buffer_1_V_din = tmp_558_reg_503;

assign weight_buffer_2_V_din = tmp_558_reg_503;

assign weight_buffer_3_V_din = tmp_558_reg_503;

assign weight_buffer_4_V_din = tmp_558_reg_503;

assign weight_buffer_5_V_din = tmp_558_reg_503;

assign weight_buffer_6_V_din = tmp_558_reg_503;

assign weight_buffer_7_V_din = tmp_558_reg_503;

assign weight_buffer_8_V_din = tmp_558_reg_503;

assign weight_buffer_9_V_din = tmp_558_reg_503;

assign weight_cntl_V_din = 1'd0;

assign weights_offset_cast_fu_357_p1 = weights_offset;

always @ (posedge ap_clk) begin
    weights_offset_cast_reg_457[31] <= 1'b0;
end

endmodule //copy_weight_fmem2buf_2
