// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module output_result_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY,
        m_axi_outputs_AWADDR,
        m_axi_outputs_AWID,
        m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID,
        m_axi_outputs_WREADY,
        m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST,
        m_axi_outputs_WID,
        m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY,
        m_axi_outputs_ARADDR,
        m_axi_outputs_ARID,
        m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID,
        m_axi_outputs_RREADY,
        m_axi_outputs_RDATA,
        m_axi_outputs_RLAST,
        m_axi_outputs_RID,
        m_axi_outputs_RUSER,
        m_axi_outputs_RRESP,
        m_axi_outputs_BVALID,
        m_axi_outputs_BREADY,
        m_axi_outputs_BRESP,
        m_axi_outputs_BID,
        m_axi_outputs_BUSER,
        outputs_offset_dout,
        outputs_offset_empty_n,
        outputs_offset_read,
        output_buffer_0_dout,
        output_buffer_0_empty_n,
        output_buffer_0_read,
        output_buffer_1_dout,
        output_buffer_1_empty_n,
        output_buffer_1_read,
        output_buffer_2_dout,
        output_buffer_2_empty_n,
        output_buffer_2_read,
        output_buffer_3_dout,
        output_buffer_3_empty_n,
        output_buffer_3_read,
        output_buffer_4_dout,
        output_buffer_4_empty_n,
        output_buffer_4_read,
        output_buffer_5_dout,
        output_buffer_5_empty_n,
        output_buffer_5_read,
        output_buffer_6_dout,
        output_buffer_6_empty_n,
        output_buffer_6_read,
        output_buffer_7_dout,
        output_buffer_7_empty_n,
        output_buffer_7_read,
        output_buffer_8_dout,
        output_buffer_8_empty_n,
        output_buffer_8_read,
        output_buffer_9_dout,
        output_buffer_9_empty_n,
        output_buffer_9_read,
        output_buffer_10_dout,
        output_buffer_10_empty_n,
        output_buffer_10_read,
        output_buffer_11_dout,
        output_buffer_11_empty_n,
        output_buffer_11_read,
        output_buffer_12_dout,
        output_buffer_12_empty_n,
        output_buffer_12_read,
        output_buffer_13_dout,
        output_buffer_13_empty_n,
        output_buffer_13_read,
        output_buffer_14_dout,
        output_buffer_14_empty_n,
        output_buffer_14_read,
        output_buffer_15_dout,
        output_buffer_15_empty_n,
        output_buffer_15_read,
        result_buffer_V_dout,
        result_buffer_V_empty_n,
        result_buffer_V_read,
        result_c_V_dout,
        result_c_V_empty_n,
        result_c_V_read,
        result_r_V_dout,
        result_r_V_empty_n,
        result_r_V_read,
        result_m_V_dout,
        result_m_V_empty_n,
        result_m_V_read,
        result_n_V_dout,
        result_n_V_empty_n,
        result_n_V_read,
        cntl_V_din,
        cntl_V_full_n,
        cntl_V_write
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_pp0_stage0 = 13'd128;
parameter    ap_ST_fsm_state10 = 13'd256;
parameter    ap_ST_fsm_state11 = 13'd512;
parameter    ap_ST_fsm_state12 = 13'd1024;
parameter    ap_ST_fsm_state13 = 13'd2048;
parameter    ap_ST_fsm_state14 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_outputs_AWVALID;
input   m_axi_outputs_AWREADY;
output  [31:0] m_axi_outputs_AWADDR;
output  [0:0] m_axi_outputs_AWID;
output  [31:0] m_axi_outputs_AWLEN;
output  [2:0] m_axi_outputs_AWSIZE;
output  [1:0] m_axi_outputs_AWBURST;
output  [1:0] m_axi_outputs_AWLOCK;
output  [3:0] m_axi_outputs_AWCACHE;
output  [2:0] m_axi_outputs_AWPROT;
output  [3:0] m_axi_outputs_AWQOS;
output  [3:0] m_axi_outputs_AWREGION;
output  [0:0] m_axi_outputs_AWUSER;
output   m_axi_outputs_WVALID;
input   m_axi_outputs_WREADY;
output  [15:0] m_axi_outputs_WDATA;
output  [1:0] m_axi_outputs_WSTRB;
output   m_axi_outputs_WLAST;
output  [0:0] m_axi_outputs_WID;
output  [0:0] m_axi_outputs_WUSER;
output   m_axi_outputs_ARVALID;
input   m_axi_outputs_ARREADY;
output  [31:0] m_axi_outputs_ARADDR;
output  [0:0] m_axi_outputs_ARID;
output  [31:0] m_axi_outputs_ARLEN;
output  [2:0] m_axi_outputs_ARSIZE;
output  [1:0] m_axi_outputs_ARBURST;
output  [1:0] m_axi_outputs_ARLOCK;
output  [3:0] m_axi_outputs_ARCACHE;
output  [2:0] m_axi_outputs_ARPROT;
output  [3:0] m_axi_outputs_ARQOS;
output  [3:0] m_axi_outputs_ARREGION;
output  [0:0] m_axi_outputs_ARUSER;
input   m_axi_outputs_RVALID;
output   m_axi_outputs_RREADY;
input  [15:0] m_axi_outputs_RDATA;
input   m_axi_outputs_RLAST;
input  [0:0] m_axi_outputs_RID;
input  [0:0] m_axi_outputs_RUSER;
input  [1:0] m_axi_outputs_RRESP;
input   m_axi_outputs_BVALID;
output   m_axi_outputs_BREADY;
input  [1:0] m_axi_outputs_BRESP;
input  [0:0] m_axi_outputs_BID;
input  [0:0] m_axi_outputs_BUSER;
input  [30:0] outputs_offset_dout;
input   outputs_offset_empty_n;
output   outputs_offset_read;
input  [15:0] output_buffer_0_dout;
input   output_buffer_0_empty_n;
output   output_buffer_0_read;
input  [15:0] output_buffer_1_dout;
input   output_buffer_1_empty_n;
output   output_buffer_1_read;
input  [15:0] output_buffer_2_dout;
input   output_buffer_2_empty_n;
output   output_buffer_2_read;
input  [15:0] output_buffer_3_dout;
input   output_buffer_3_empty_n;
output   output_buffer_3_read;
input  [15:0] output_buffer_4_dout;
input   output_buffer_4_empty_n;
output   output_buffer_4_read;
input  [15:0] output_buffer_5_dout;
input   output_buffer_5_empty_n;
output   output_buffer_5_read;
input  [15:0] output_buffer_6_dout;
input   output_buffer_6_empty_n;
output   output_buffer_6_read;
input  [15:0] output_buffer_7_dout;
input   output_buffer_7_empty_n;
output   output_buffer_7_read;
input  [15:0] output_buffer_8_dout;
input   output_buffer_8_empty_n;
output   output_buffer_8_read;
input  [15:0] output_buffer_9_dout;
input   output_buffer_9_empty_n;
output   output_buffer_9_read;
input  [15:0] output_buffer_10_dout;
input   output_buffer_10_empty_n;
output   output_buffer_10_read;
input  [15:0] output_buffer_11_dout;
input   output_buffer_11_empty_n;
output   output_buffer_11_read;
input  [15:0] output_buffer_12_dout;
input   output_buffer_12_empty_n;
output   output_buffer_12_read;
input  [15:0] output_buffer_13_dout;
input   output_buffer_13_empty_n;
output   output_buffer_13_read;
input  [15:0] output_buffer_14_dout;
input   output_buffer_14_empty_n;
output   output_buffer_14_read;
input  [15:0] output_buffer_15_dout;
input   output_buffer_15_empty_n;
output   output_buffer_15_read;
input   result_buffer_V_dout;
input   result_buffer_V_empty_n;
output   result_buffer_V_read;
input  [31:0] result_c_V_dout;
input   result_c_V_empty_n;
output   result_c_V_read;
input  [31:0] result_r_V_dout;
input   result_r_V_empty_n;
output   result_r_V_read;
input  [31:0] result_m_V_dout;
input   result_m_V_empty_n;
output   result_m_V_read;
input  [31:0] result_n_V_dout;
input   result_n_V_empty_n;
output   result_n_V_read;
output   cntl_V_din;
input   cntl_V_full_n;
output   cntl_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_outputs_AWVALID;
reg m_axi_outputs_WVALID;
reg m_axi_outputs_BREADY;
reg outputs_offset_read;
reg output_buffer_0_read;
reg output_buffer_1_read;
reg output_buffer_2_read;
reg output_buffer_3_read;
reg output_buffer_4_read;
reg output_buffer_5_read;
reg output_buffer_6_read;
reg output_buffer_7_read;
reg output_buffer_8_read;
reg output_buffer_9_read;
reg output_buffer_10_read;
reg output_buffer_11_read;
reg output_buffer_12_read;
reg output_buffer_13_read;
reg output_buffer_14_read;
reg output_buffer_15_read;
reg result_buffer_V_read;
reg result_c_V_read;
reg result_r_V_read;
reg result_m_V_read;
reg result_n_V_read;
reg cntl_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    outputs_blk_n_AW;
wire    ap_CS_fsm_state7;
reg    outputs_blk_n_W;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_25_i_i_reg_998;
reg    outputs_blk_n_B;
wire    ap_CS_fsm_state14;
reg    outputs_offset_blk_n;
reg    cntl_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_20_i_i_fu_749_p2;
wire   [0:0] tmp_122_fu_764_p1;
reg   [30:0] i_0_i_i_i_reg_388;
wire   [32:0] sext_cast_i_i_fu_437_p1;
reg   [32:0] sext_cast_i_i_reg_893;
reg    ap_block_state1;
reg   [31:0] tmp_119_reg_901;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_nbreadreq_fu_188_p3;
reg   [31:0] tmp_120_reg_906;
reg   [31:0] tmp_121_reg_912;
reg   [0:0] tmp_97_reg_918;
reg   [23:0] tmp_75_i_i_reg_923;
reg   [0:0] tmp_98_reg_928;
reg   [30:0] p_lshr2_i_i_reg_933;
reg   [30:0] p_lshr_f2_i_i_reg_938;
wire   [31:0] mLoops_fu_538_p3;
reg   [31:0] mLoops_reg_943;
wire    ap_CS_fsm_state4;
wire   [31:0] base_addr_fu_611_p2;
wire   [31:0] tmp_18_i_i_fu_673_p3;
reg   [31:0] tmp_18_i_i_reg_953;
wire   [31:0] tmp_19_i_i_fu_737_p3;
reg   [31:0] tmp_19_i_i_reg_958;
wire   [4:0] tm_fu_754_p2;
reg   [4:0] tm_reg_967;
reg    ap_predicate_op133_write_state5;
reg    ap_block_state5;
wire   [3:0] tmp_101_fu_760_p1;
reg   [3:0] tmp_101_reg_972;
wire   [30:0] tr_divS_fu_777_p2;
reg   [30:0] tr_divS_reg_982;
wire    ap_CS_fsm_state6;
reg   [31:0] outputs_addr_reg_987;
wire   [0:0] tmp_22_i_i_fu_772_p2;
wire   [31:0] base_addr_d1_5_fu_802_p2;
wire   [0:0] tmp_25_i_i_fu_812_p2;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
reg    ap_sig_ioackin_m_axi_outputs_WREADY;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_fu_817_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] base_addr_d2_5_fu_887_p2;
reg   [31:0] base_addr_d2_5_reg_1087;
wire    ap_CS_fsm_state10;
reg    ap_sig_ioackin_m_axi_outputs_AWREADY;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg   [31:0] base_addr_d2_reg_345;
reg   [4:0] tm_0_i_i_i_reg_355;
reg  signed [31:0] base_addr_d2_0_i_i_i_reg_366;
reg   [30:0] tr_divS_0_i_i_i_reg_377;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_85_load_i_i_reg_399;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399;
wire  signed [63:0] sum1_cast_i_i_fu_792_p1;
reg    ap_reg_ioackin_m_axi_outputs_AWREADY;
reg    ap_reg_ioackin_m_axi_outputs_WREADY;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] p_neg2_i_i_fu_479_p2;
wire   [31:0] tmp_i_i_fu_505_p2;
wire   [31:0] tmp_9_i_i_fu_516_p2;
wire   [31:0] tmp_11_i_i_fu_527_p2;
wire   [0:0] tmp_12_i_i_fu_532_p2;
wire   [31:0] p_neg1_i_i_fu_551_p2;
wire   [23:0] tmp_14_i_i_fu_556_p4;
wire   [23:0] tmp_15_i_i_fu_566_p2;
wire   [23:0] tmp_76_i_i_fu_572_p3;
wire   [31:0] tmp_77_i_i_fu_586_p1;
wire   [31:0] p_neg_t1_i_i_fu_589_p2;
wire   [31:0] tmp_78_i_i_fu_595_p1;
wire   [31:0] tmp_96_fu_546_p2;
wire   [31:0] tmp_17_i_i_fu_598_p3;
wire   [31:0] tmp1_i_i_fu_605_p2;
wire   [31:0] tmp_16_i_i_fu_578_p3;
wire   [31:0] p_neg4_i_i_fu_625_p2;
wire   [30:0] p_lshr5_i_i_fu_631_p4;
wire   [31:0] tmp_79_i_i_fu_641_p1;
wire   [30:0] p_lshr_f7_i_i_fu_651_p4;
wire   [0:0] tmp_99_fu_617_p3;
wire   [31:0] p_neg_t6_i_i_fu_645_p2;
wire   [31:0] tmp_80_i_i_fu_661_p1;
wire   [0:0] tmp_10_i_i_fu_521_p2;
wire   [31:0] p_op_i_i_fu_665_p3;
wire   [31:0] p_neg_i_i_fu_689_p2;
wire   [30:0] p_lshr_i_i_fu_695_p4;
wire   [31:0] tmp_81_i_i_fu_705_p1;
wire   [30:0] p_lshr_f_i_i_fu_715_p4;
wire   [0:0] tmp_100_fu_681_p3;
wire   [31:0] p_neg_t_i_i_fu_709_p2;
wire   [31:0] tmp_82_i_i_fu_725_p1;
wire   [0:0] tmp_8_i_i_fu_510_p2;
wire   [31:0] p_op2_i_i_fu_729_p3;
wire   [31:0] tm_0_i_cast_i_i_fu_745_p1;
wire   [31:0] tr_divS_0_i_cast_i_i_fu_768_p1;
wire  signed [32:0] tmp_24_cast_i_i_fu_783_p1;
wire   [32:0] sum1_i_i_fu_787_p2;
wire   [31:0] i_0_i_cast_i_i_fu_808_p1;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_324;
reg    ap_condition_956;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_outputs_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_outputs_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_122_fu_764_p1 == 1'd0) & (tmp_20_i_i_fu_749_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_outputs_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_outputs_AWREADY <= 1'b0;
            end else if ((m_axi_outputs_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_outputs_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_outputs_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_956)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_outputs_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_outputs_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_outputs_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_324)) begin
        if (((tmp_101_reg_972 == 4'd0) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_0_dout;
        end else if (((tmp_101_reg_972 == 4'd1) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_1_dout;
        end else if (((tmp_101_reg_972 == 4'd2) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_2_dout;
        end else if (((tmp_101_reg_972 == 4'd3) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_3_dout;
        end else if (((tmp_101_reg_972 == 4'd4) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_4_dout;
        end else if (((tmp_101_reg_972 == 4'd5) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_5_dout;
        end else if (((tmp_101_reg_972 == 4'd6) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_6_dout;
        end else if (((tmp_101_reg_972 == 4'd7) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_7_dout;
        end else if (((tmp_101_reg_972 == 4'd8) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_8_dout;
        end else if (((tmp_101_reg_972 == 4'd9) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_9_dout;
        end else if (((tmp_101_reg_972 == 4'd10) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_10_dout;
        end else if (((tmp_101_reg_972 == 4'd11) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_11_dout;
        end else if (((tmp_101_reg_972 == 4'd12) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_12_dout;
        end else if (((tmp_101_reg_972 == 4'd13) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_13_dout;
        end else if (((tmp_101_reg_972 == 4'd14) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_14_dout;
        end else if (((tmp_101_reg_972 == 4'd15) & (tmp_25_i_i_fu_812_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= output_buffer_15_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399 <= ap_phi_reg_pp0_iter0_tmp_85_load_i_i_reg_399;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_outputs_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        base_addr_d2_0_i_i_i_reg_366 <= base_addr_d2_5_reg_1087;
    end else if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_20_i_i_fu_749_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        base_addr_d2_0_i_i_i_reg_366 <= base_addr_d2_reg_345;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_22_i_i_fu_772_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        base_addr_d2_reg_345 <= base_addr_d1_5_fu_802_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        base_addr_d2_reg_345 <= base_addr_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_i_i_reg_388 <= i_fu_817_p2;
    end else if (((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_i_i_i_reg_388 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_22_i_i_fu_772_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tm_0_i_i_i_reg_355 <= tm_reg_967;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tm_0_i_i_i_reg_355 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_outputs_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        tr_divS_0_i_i_i_reg_377 <= tr_divS_reg_982;
    end else if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_20_i_i_fu_749_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tr_divS_0_i_i_i_reg_377 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        base_addr_d2_5_reg_1087 <= base_addr_d2_5_fu_887_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mLoops_reg_943 <= mLoops_fu_538_p3;
        tmp_18_i_i_reg_953 <= tmp_18_i_i_fu_673_p3;
        tmp_19_i_i_reg_958 <= tmp_19_i_i_fu_737_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_22_i_i_fu_772_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        outputs_addr_reg_987 <= sum1_cast_i_i_fu_792_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_188_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_lshr2_i_i_reg_933 <= {{p_neg2_i_i_fu_479_p2[31:1]}};
        p_lshr_f2_i_i_reg_938 <= {{result_c_V_dout[31:1]}};
        tmp_119_reg_901 <= result_c_V_dout;
        tmp_120_reg_906 <= result_r_V_dout;
        tmp_121_reg_912 <= result_m_V_dout;
        tmp_75_i_i_reg_923 <= {{result_r_V_dout[24:1]}};
        tmp_97_reg_918 <= result_r_V_dout[32'd31];
        tmp_98_reg_928 <= result_c_V_dout[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if ((~((outputs_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_cast_i_i_reg_893[30 : 0] <= sext_cast_i_i_fu_437_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        tm_reg_967 <= tm_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_20_i_i_fu_749_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_101_reg_972 <= tmp_101_fu_760_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_25_i_i_reg_998 <= tmp_25_i_i_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tr_divS_reg_982 <= tr_divS_fu_777_p2;
    end
end

always @ (*) begin
    if ((tmp_25_i_i_fu_812_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_122_fu_764_p1 == 1'd0) & (tmp_20_i_i_fu_749_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_122_fu_764_p1 == 1'd0) & (tmp_20_i_i_fu_749_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_outputs_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_outputs_AWREADY = m_axi_outputs_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_outputs_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_outputs_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_outputs_WREADY = m_axi_outputs_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_outputs_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_122_fu_764_p1 == 1'd0) & (tmp_20_i_i_fu_749_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        cntl_V_blk_n = cntl_V_full_n;
    end else begin
        cntl_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (ap_predicate_op133_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        cntl_V_write = 1'b1;
    end else begin
        cntl_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_outputs_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_outputs_AWVALID = 1'b1;
    end else begin
        m_axi_outputs_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_outputs_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        m_axi_outputs_BREADY = 1'b1;
    end else begin
        m_axi_outputs_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_outputs_WREADY == 1'b0) & (tmp_25_i_i_reg_998 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_outputs_WVALID = 1'b1;
    end else begin
        m_axi_outputs_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_101_reg_972 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (output_buffer_0_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_buffer_0_read = 1'b1;
    end else begin
        output_buffer_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd10) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_10_empty_n == 1'b1))) begin
        output_buffer_10_read = 1'b1;
    end else begin
        output_buffer_10_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd11) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_11_empty_n == 1'b1))) begin
        output_buffer_11_read = 1'b1;
    end else begin
        output_buffer_11_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd12) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_12_empty_n == 1'b1))) begin
        output_buffer_12_read = 1'b1;
    end else begin
        output_buffer_12_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd13) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_13_empty_n == 1'b1))) begin
        output_buffer_13_read = 1'b1;
    end else begin
        output_buffer_13_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd14) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_14_empty_n == 1'b1))) begin
        output_buffer_14_read = 1'b1;
    end else begin
        output_buffer_14_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd15) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_15_empty_n == 1'b1))) begin
        output_buffer_15_read = 1'b1;
    end else begin
        output_buffer_15_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd1) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_1_empty_n == 1'b1))) begin
        output_buffer_1_read = 1'b1;
    end else begin
        output_buffer_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd2) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_2_empty_n == 1'b1))) begin
        output_buffer_2_read = 1'b1;
    end else begin
        output_buffer_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd3) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_3_empty_n == 1'b1))) begin
        output_buffer_3_read = 1'b1;
    end else begin
        output_buffer_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd4) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_4_empty_n == 1'b1))) begin
        output_buffer_4_read = 1'b1;
    end else begin
        output_buffer_4_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd5) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_5_empty_n == 1'b1))) begin
        output_buffer_5_read = 1'b1;
    end else begin
        output_buffer_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd6) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_6_empty_n == 1'b1))) begin
        output_buffer_6_read = 1'b1;
    end else begin
        output_buffer_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd7) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_7_empty_n == 1'b1))) begin
        output_buffer_7_read = 1'b1;
    end else begin
        output_buffer_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd8) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_8_empty_n == 1'b1))) begin
        output_buffer_8_read = 1'b1;
    end else begin
        output_buffer_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_101_reg_972 == 4'd9) & (tmp_25_i_i_fu_812_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (output_buffer_9_empty_n == 1'b1))) begin
        output_buffer_9_read = 1'b1;
    end else begin
        output_buffer_9_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        outputs_blk_n_AW = m_axi_outputs_AWREADY;
    end else begin
        outputs_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        outputs_blk_n_B = m_axi_outputs_BVALID;
    end else begin
        outputs_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_25_i_i_reg_998 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        outputs_blk_n_W = m_axi_outputs_WREADY;
    end else begin
        outputs_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_offset_blk_n = outputs_offset_empty_n;
    end else begin
        outputs_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outputs_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_offset_read = 1'b1;
    end else begin
        outputs_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_20_i_i_fu_749_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (result_buffer_V_empty_n == 1'b1))) begin
        result_buffer_V_read = 1'b1;
    end else begin
        result_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_188_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (result_c_V_empty_n == 1'b1))) begin
        result_c_V_read = 1'b1;
    end else begin
        result_c_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_188_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (result_m_V_empty_n == 1'b1))) begin
        result_m_V_read = 1'b1;
    end else begin
        result_m_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (result_n_V_empty_n == 1'b1))) begin
        result_n_V_read = 1'b1;
    end else begin
        result_n_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_188_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (result_r_V_empty_n == 1'b1))) begin
        result_r_V_read = 1'b1;
    end else begin
        result_r_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((outputs_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_nbreadreq_fu_188_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_122_fu_764_p1 == 1'd0) & (tmp_20_i_i_fu_749_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_20_i_i_fu_749_p2 == 1'd0) & (tmp_122_fu_764_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0)) & (tmp_20_i_i_fu_749_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_22_i_i_fu_772_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_25_i_i_fu_812_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_25_i_i_fu_812_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_outputs_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((outputs_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state5 = ((ap_predicate_op133_write_state5 == 1'b1) & (cntl_V_full_n == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((ap_sig_ioackin_m_axi_outputs_WREADY == 1'b0) & (tmp_25_i_i_reg_998 == 1'd1));
end

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_324 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_956 = ((tmp_25_i_i_reg_998 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_85_load_i_i_reg_399 = 'bx;

always @ (*) begin
    ap_predicate_op133_write_state5 = ((tmp_122_fu_764_p1 == 1'd0) & (tmp_20_i_i_fu_749_p2 == 1'd0));
end

assign base_addr_d1_5_fu_802_p2 = (base_addr_d2_reg_345 + 32'd65536);

assign base_addr_d2_5_fu_887_p2 = ($signed(base_addr_d2_0_i_i_i_reg_366) + $signed(32'd256));

assign base_addr_fu_611_p2 = (tmp1_i_i_fu_605_p2 + tmp_16_i_i_fu_578_p3);

assign cntl_V_din = 1'd0;

assign i_0_i_cast_i_i_fu_808_p1 = i_0_i_i_i_reg_388;

assign i_fu_817_p2 = (i_0_i_i_i_reg_388 + 31'd1);

assign mLoops_fu_538_p3 = ((tmp_12_i_i_fu_532_p2[0:0] === 1'b1) ? 32'd16 : tmp_11_i_i_fu_527_p2);

assign m_axi_outputs_ARADDR = 32'd0;

assign m_axi_outputs_ARBURST = 2'd0;

assign m_axi_outputs_ARCACHE = 4'd0;

assign m_axi_outputs_ARID = 1'd0;

assign m_axi_outputs_ARLEN = 32'd0;

assign m_axi_outputs_ARLOCK = 2'd0;

assign m_axi_outputs_ARPROT = 3'd0;

assign m_axi_outputs_ARQOS = 4'd0;

assign m_axi_outputs_ARREGION = 4'd0;

assign m_axi_outputs_ARSIZE = 3'd0;

assign m_axi_outputs_ARUSER = 1'd0;

assign m_axi_outputs_ARVALID = 1'b0;

assign m_axi_outputs_AWADDR = outputs_addr_reg_987;

assign m_axi_outputs_AWBURST = 2'd0;

assign m_axi_outputs_AWCACHE = 4'd0;

assign m_axi_outputs_AWID = 1'd0;

assign m_axi_outputs_AWLEN = tmp_19_i_i_reg_958;

assign m_axi_outputs_AWLOCK = 2'd0;

assign m_axi_outputs_AWPROT = 3'd0;

assign m_axi_outputs_AWQOS = 4'd0;

assign m_axi_outputs_AWREGION = 4'd0;

assign m_axi_outputs_AWSIZE = 3'd0;

assign m_axi_outputs_AWUSER = 1'd0;

assign m_axi_outputs_RREADY = 1'b0;

assign m_axi_outputs_WDATA = ap_phi_reg_pp0_iter1_tmp_85_load_i_i_reg_399;

assign m_axi_outputs_WID = 1'd0;

assign m_axi_outputs_WLAST = 1'b0;

assign m_axi_outputs_WSTRB = 2'd3;

assign m_axi_outputs_WUSER = 1'd0;

assign p_lshr5_i_i_fu_631_p4 = {{p_neg4_i_i_fu_625_p2[31:1]}};

assign p_lshr_f7_i_i_fu_651_p4 = {{tmp_9_i_i_fu_516_p2[31:1]}};

assign p_lshr_f_i_i_fu_715_p4 = {{tmp_i_i_fu_505_p2[31:1]}};

assign p_lshr_i_i_fu_695_p4 = {{p_neg_i_i_fu_689_p2[31:1]}};

assign p_neg1_i_i_fu_551_p2 = (32'd0 - tmp_120_reg_906);

assign p_neg2_i_i_fu_479_p2 = (32'd0 - result_c_V_dout);

assign p_neg4_i_i_fu_625_p2 = (32'd0 - tmp_9_i_i_fu_516_p2);

assign p_neg_i_i_fu_689_p2 = (32'd0 - tmp_i_i_fu_505_p2);

assign p_neg_t1_i_i_fu_589_p2 = (32'd0 - tmp_77_i_i_fu_586_p1);

assign p_neg_t6_i_i_fu_645_p2 = (32'd0 - tmp_79_i_i_fu_641_p1);

assign p_neg_t_i_i_fu_709_p2 = (32'd0 - tmp_81_i_i_fu_705_p1);

assign p_op2_i_i_fu_729_p3 = ((tmp_100_fu_681_p3[0:0] === 1'b1) ? p_neg_t_i_i_fu_709_p2 : tmp_82_i_i_fu_725_p1);

assign p_op_i_i_fu_665_p3 = ((tmp_99_fu_617_p3[0:0] === 1'b1) ? p_neg_t6_i_i_fu_645_p2 : tmp_80_i_i_fu_661_p1);

assign sext_cast_i_i_fu_437_p1 = outputs_offset_dout;

assign sum1_cast_i_i_fu_792_p1 = $signed(sum1_i_i_fu_787_p2);

assign sum1_i_i_fu_787_p2 = ($signed(sext_cast_i_i_reg_893) + $signed(tmp_24_cast_i_i_fu_783_p1));

assign tm_0_i_cast_i_i_fu_745_p1 = tm_0_i_i_i_reg_355;

assign tm_fu_754_p2 = (tm_0_i_i_i_reg_355 + 5'd1);

assign tmp1_i_i_fu_605_p2 = (tmp_96_fu_546_p2 + tmp_17_i_i_fu_598_p3);

assign tmp_100_fu_681_p3 = tmp_i_i_fu_505_p2[32'd31];

assign tmp_101_fu_760_p1 = tm_0_i_i_i_reg_355[3:0];

assign tmp_10_i_i_fu_521_p2 = (($signed(tmp_9_i_i_fu_516_p2) > $signed(32'd16)) ? 1'b1 : 1'b0);

assign tmp_11_i_i_fu_527_p2 = (32'd32 - tmp_121_reg_912);

assign tmp_122_fu_764_p1 = result_buffer_V_dout;

assign tmp_12_i_i_fu_532_p2 = (($signed(tmp_11_i_i_fu_527_p2) > $signed(32'd16)) ? 1'b1 : 1'b0);

assign tmp_14_i_i_fu_556_p4 = {{p_neg1_i_i_fu_551_p2[24:1]}};

assign tmp_15_i_i_fu_566_p2 = (24'd0 - tmp_14_i_i_fu_556_p4);

assign tmp_16_i_i_fu_578_p3 = {{tmp_76_i_i_fu_572_p3}, {8'd0}};

assign tmp_17_i_i_fu_598_p3 = ((tmp_98_reg_928[0:0] === 1'b1) ? p_neg_t1_i_i_fu_589_p2 : tmp_78_i_i_fu_595_p1);

assign tmp_18_i_i_fu_673_p3 = ((tmp_10_i_i_fu_521_p2[0:0] === 1'b1) ? 32'd8 : p_op_i_i_fu_665_p3);

assign tmp_19_i_i_fu_737_p3 = ((tmp_8_i_i_fu_510_p2[0:0] === 1'b1) ? 32'd8 : p_op2_i_i_fu_729_p3);

assign tmp_20_i_i_fu_749_p2 = (($signed(tm_0_i_cast_i_i_fu_745_p1) < $signed(mLoops_reg_943)) ? 1'b1 : 1'b0);

assign tmp_22_i_i_fu_772_p2 = (($signed(tr_divS_0_i_cast_i_i_fu_768_p1) < $signed(tmp_18_i_i_reg_953)) ? 1'b1 : 1'b0);

assign tmp_24_cast_i_i_fu_783_p1 = base_addr_d2_0_i_i_i_reg_366;

assign tmp_25_i_i_fu_812_p2 = (($signed(i_0_i_cast_i_i_fu_808_p1) < $signed(tmp_19_i_i_reg_958)) ? 1'b1 : 1'b0);

assign tmp_76_i_i_fu_572_p3 = ((tmp_97_reg_918[0:0] === 1'b1) ? tmp_15_i_i_fu_566_p2 : tmp_75_i_i_reg_923);

assign tmp_77_i_i_fu_586_p1 = p_lshr2_i_i_reg_933;

assign tmp_78_i_i_fu_595_p1 = p_lshr_f2_i_i_reg_938;

assign tmp_79_i_i_fu_641_p1 = p_lshr5_i_i_fu_631_p4;

assign tmp_80_i_i_fu_661_p1 = p_lshr_f7_i_i_fu_651_p4;

assign tmp_81_i_i_fu_705_p1 = p_lshr_i_i_fu_695_p4;

assign tmp_82_i_i_fu_725_p1 = p_lshr_f_i_i_fu_715_p4;

assign tmp_8_i_i_fu_510_p2 = (($signed(tmp_i_i_fu_505_p2) > $signed(32'd16)) ? 1'b1 : 1'b0);

assign tmp_96_fu_546_p2 = tmp_121_reg_912 << 32'd16;

assign tmp_99_fu_617_p3 = tmp_9_i_i_fu_516_p2[32'd31];

assign tmp_9_i_i_fu_516_p2 = (32'd512 - tmp_120_reg_906);

assign tmp_i_i_fu_505_p2 = (32'd512 - tmp_119_reg_901);

assign tmp_nbreadreq_fu_188_p3 = result_buffer_V_empty_n;

assign tr_divS_0_i_cast_i_i_fu_768_p1 = tr_divS_0_i_i_i_reg_377;

assign tr_divS_fu_777_p2 = (tr_divS_0_i_i_i_reg_377 + 31'd1);

always @ (posedge ap_clk) begin
    sext_cast_i_i_reg_893[32:31] <= 2'b00;
end

endmodule //output_result_5
