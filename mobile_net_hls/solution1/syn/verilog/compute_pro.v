// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_pro (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_buffer_V_dout,
        input_buffer_V_empty_n,
        input_buffer_V_read,
        output_buffer_V_din,
        output_buffer_V_full_n,
        output_buffer_V_write,
        data_buffer_V_dout,
        data_buffer_V_empty_n,
        data_buffer_V_read,
        result_buffer_V_din,
        result_buffer_V_full_n,
        result_buffer_V_write,
        data_n_V_dout,
        data_n_V_empty_n,
        data_n_V_read,
        data_r_V_dout,
        data_r_V_empty_n,
        data_r_V_read,
        data_c_V_dout,
        data_c_V_empty_n,
        data_c_V_read,
        result_n_V_din,
        result_n_V_full_n,
        result_n_V_write,
        result_r_V_din,
        result_r_V_full_n,
        result_r_V_write,
        result_c_V_din,
        result_c_V_full_n,
        result_c_V_write
);

parameter    ap_ST_fsm_state1 = 54'd1;
parameter    ap_ST_fsm_state2 = 54'd2;
parameter    ap_ST_fsm_state3 = 54'd4;
parameter    ap_ST_fsm_state4 = 54'd8;
parameter    ap_ST_fsm_state5 = 54'd16;
parameter    ap_ST_fsm_state6 = 54'd32;
parameter    ap_ST_fsm_state7 = 54'd64;
parameter    ap_ST_fsm_state8 = 54'd128;
parameter    ap_ST_fsm_state9 = 54'd256;
parameter    ap_ST_fsm_state10 = 54'd512;
parameter    ap_ST_fsm_state11 = 54'd1024;
parameter    ap_ST_fsm_state12 = 54'd2048;
parameter    ap_ST_fsm_state13 = 54'd4096;
parameter    ap_ST_fsm_state14 = 54'd8192;
parameter    ap_ST_fsm_state15 = 54'd16384;
parameter    ap_ST_fsm_state16 = 54'd32768;
parameter    ap_ST_fsm_state17 = 54'd65536;
parameter    ap_ST_fsm_state18 = 54'd131072;
parameter    ap_ST_fsm_state19 = 54'd262144;
parameter    ap_ST_fsm_state20 = 54'd524288;
parameter    ap_ST_fsm_state21 = 54'd1048576;
parameter    ap_ST_fsm_state22 = 54'd2097152;
parameter    ap_ST_fsm_state23 = 54'd4194304;
parameter    ap_ST_fsm_state24 = 54'd8388608;
parameter    ap_ST_fsm_state25 = 54'd16777216;
parameter    ap_ST_fsm_state26 = 54'd33554432;
parameter    ap_ST_fsm_state27 = 54'd67108864;
parameter    ap_ST_fsm_state28 = 54'd134217728;
parameter    ap_ST_fsm_state29 = 54'd268435456;
parameter    ap_ST_fsm_state30 = 54'd536870912;
parameter    ap_ST_fsm_state31 = 54'd1073741824;
parameter    ap_ST_fsm_state32 = 54'd2147483648;
parameter    ap_ST_fsm_state33 = 54'd4294967296;
parameter    ap_ST_fsm_state34 = 54'd8589934592;
parameter    ap_ST_fsm_state35 = 54'd17179869184;
parameter    ap_ST_fsm_state36 = 54'd34359738368;
parameter    ap_ST_fsm_state37 = 54'd68719476736;
parameter    ap_ST_fsm_state38 = 54'd137438953472;
parameter    ap_ST_fsm_state39 = 54'd274877906944;
parameter    ap_ST_fsm_state40 = 54'd549755813888;
parameter    ap_ST_fsm_state41 = 54'd1099511627776;
parameter    ap_ST_fsm_state42 = 54'd2199023255552;
parameter    ap_ST_fsm_state43 = 54'd4398046511104;
parameter    ap_ST_fsm_state44 = 54'd8796093022208;
parameter    ap_ST_fsm_state45 = 54'd17592186044416;
parameter    ap_ST_fsm_state46 = 54'd35184372088832;
parameter    ap_ST_fsm_state47 = 54'd70368744177664;
parameter    ap_ST_fsm_state48 = 54'd140737488355328;
parameter    ap_ST_fsm_state49 = 54'd281474976710656;
parameter    ap_ST_fsm_state50 = 54'd562949953421312;
parameter    ap_ST_fsm_state51 = 54'd1125899906842624;
parameter    ap_ST_fsm_state52 = 54'd2251799813685248;
parameter    ap_ST_fsm_state53 = 54'd4503599627370496;
parameter    ap_ST_fsm_state54 = 54'd9007199254740992;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] input_buffer_V_dout;
input   input_buffer_V_empty_n;
output   input_buffer_V_read;
output  [15:0] output_buffer_V_din;
input   output_buffer_V_full_n;
output   output_buffer_V_write;
input   data_buffer_V_dout;
input   data_buffer_V_empty_n;
output   data_buffer_V_read;
output   result_buffer_V_din;
input   result_buffer_V_full_n;
output   result_buffer_V_write;
input  [31:0] data_n_V_dout;
input   data_n_V_empty_n;
output   data_n_V_read;
input  [31:0] data_r_V_dout;
input   data_r_V_empty_n;
output   data_r_V_read;
input  [31:0] data_c_V_dout;
input   data_c_V_empty_n;
output   data_c_V_read;
output  [31:0] result_n_V_din;
input   result_n_V_full_n;
output   result_n_V_write;
output  [31:0] result_r_V_din;
input   result_r_V_full_n;
output   result_r_V_write;
output  [31:0] result_c_V_din;
input   result_c_V_full_n;
output   result_c_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_buffer_V_read;
reg output_buffer_V_write;
reg data_buffer_V_read;
reg result_buffer_V_write;
reg data_n_V_read;
reg data_r_V_read;
reg data_c_V_read;
reg result_n_V_write;
reg result_r_V_write;
reg result_c_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [53:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] block_cnt;
wire   [31:0] grp_fu_266_p1;
reg   [31:0] reg_313;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state44;
wire   [15:0] grp_fu_284_p2;
reg   [15:0] reg_318;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state34;
reg   [31:0] tmp_1350_reg_543;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_nbreadreq_fu_104_p3;
wire   [0:0] tmp_9_nbwritereq_fu_112_p3;
reg   [31:0] tmp_1351_reg_551;
wire   [31:0] rLoops_fu_343_p3;
reg   [31:0] rLoops_reg_559;
wire    ap_CS_fsm_state4;
wire   [31:0] cLoops_fu_362_p3;
reg   [31:0] cLoops_reg_566;
wire   [31:0] grp_fu_269_p1;
reg   [31:0] tmp_1344_reg_573;
reg   [31:0] tmp_1349_reg_578;
wire    ap_CS_fsm_state12;
wire   [31:0] nLoops_fu_385_p3;
reg   [31:0] nLoops_reg_584;
wire    ap_CS_fsm_state13;
wire   [0:0] or_cond_fu_415_p2;
reg   [0:0] or_cond_reg_589;
wire   [15:0] grp_fu_272_p1;
reg   [15:0] tmp_588_reg_593;
wire   [15:0] grp_fu_275_p1;
reg   [15:0] tmp_589_reg_598;
wire   [31:0] tmp_15_fu_421_p2;
reg   [31:0] tmp_15_reg_603;
wire   [31:0] tmp_16_fu_426_p2;
reg   [31:0] tmp_16_reg_608;
wire   [0:0] brmerge_fu_443_p2;
reg   [0:0] brmerge_reg_613;
wire   [3:0] tn_1_fu_458_p2;
reg   [3:0] tn_1_reg_620;
wire    ap_CS_fsm_state14;
wire   [3:0] tr_1_fu_507_p2;
reg   [3:0] tr_1_reg_634;
wire    ap_CS_fsm_state15;
reg   [2:0] output_temp_addr_1_reg_639;
wire   [0:0] tmp_22_fu_502_p2;
wire   [3:0] tc_1_fu_527_p2;
reg   [3:0] tc_1_reg_648;
wire    ap_CS_fsm_state16;
reg   [15:0] tmp_1355_reg_653;
wire   [0:0] tmp_26_fu_522_p2;
wire   [15:0] grp_fu_278_p2;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state29;
wire   [15:0] output_temp_q0;
reg   [15:0] output_temp_load_reg_668;
reg   [15:0] tmp_25_reg_673;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
reg   [15:0] tmp_590_reg_684;
wire    ap_CS_fsm_state47;
reg   [15:0] output_reg_reg_689;
wire    ap_CS_fsm_state53;
reg    output_temp_ce0;
reg   [2:0] output_temp_address1;
reg    output_temp_ce1;
reg    output_temp_we1;
reg   [15:0] output_temp_d1;
reg   [3:0] tn_reg_208;
wire    ap_CS_fsm_state54;
reg   [15:0] acc_datftr_reg_220;
wire   [0:0] tmp_17_fu_453_p2;
reg   [3:0] tr_reg_232;
reg   [15:0] acc_datftc_reg_243;
reg   [3:0] tc_reg_255;
wire   [63:0] tmp_21_fu_464_p1;
wire   [63:0] tmp_24_fu_513_p1;
wire   [0:0] tmp_1352_fu_493_p1;
wire   [31:0] tmp_10_fu_393_p2;
wire   [0:0] or_cond7_fu_481_p2;
wire    ap_CS_fsm_state33;
reg   [31:0] grp_fu_266_p0;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state45;
reg   [15:0] grp_fu_278_p0;
reg   [15:0] grp_fu_278_p1;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state35;
reg   [15:0] grp_fu_284_p0;
reg   [15:0] grp_fu_284_p1;
wire    ap_CS_fsm_state48;
reg   [31:0] grp_fu_295_p1;
reg   [31:0] grp_fu_304_p1;
wire   [31:0] tmp_4_fu_332_p2;
wire   [0:0] tmp_5_fu_337_p2;
wire   [31:0] tmp_6_fu_351_p2;
wire   [0:0] tmp_7_fu_356_p2;
wire   [31:0] tmp_s_fu_374_p2;
wire   [0:0] tmp_3_fu_379_p2;
wire   [0:0] tmp_11_fu_405_p2;
wire   [0:0] tmp_12_fu_410_p2;
wire   [27:0] grp_fu_295_p4;
wire   [27:0] grp_fu_304_p4;
wire   [0:0] icmp_fu_431_p2;
wire   [0:0] icmp16_fu_437_p2;
wire   [31:0] tn_cast_fu_449_p1;
wire   [0:0] icmp19_fu_469_p2;
wire   [0:0] icmp22_fu_475_p2;
wire   [31:0] tr_cast_fu_498_p1;
wire   [31:0] tc_cast_fu_518_p1;
reg   [53:0] ap_NS_fsm;
reg    ap_block_state1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 54'd1;
#0 block_cnt = 32'd0;
end

compute_pro_outpucgu #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
output_temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_temp_addr_1_reg_639),
    .ce0(output_temp_ce0),
    .q0(output_temp_q0),
    .address1(output_temp_address1),
    .ce1(output_temp_ce1),
    .we1(output_temp_we1),
    .d1(output_temp_d1)
);

moblie_net_sitofpchv #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
moblie_net_sitofpchv_U2843(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_266_p0),
    .ce(1'b1),
    .dout(grp_fu_266_p1)
);

moblie_net_sitofpchv #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
moblie_net_sitofpchv_U2844(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rLoops_reg_559),
    .ce(1'b1),
    .dout(grp_fu_269_p1)
);

moblie_net_sptohpciv #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
moblie_net_sptohpciv_U2845(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_313),
    .ce(1'b1),
    .dout(grp_fu_272_p1)
);

moblie_net_sptohpciv #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
moblie_net_sptohpciv_U2846(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1344_reg_573),
    .ce(1'b1),
    .dout(grp_fu_275_p1)
);

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U2847(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_278_p0),
    .din1(grp_fu_278_p1),
    .ce(1'b1),
    .dout(grp_fu_278_p2)
);

moblie_net_hdiv_1cjv #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hdiv_1cjv_U2848(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_284_p0),
    .din1(grp_fu_284_p1),
    .ce(1'b1),
    .dout(grp_fu_284_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_1352_fu_493_p1 == 1'd0) & (tmp_17_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        acc_datftc_reg_243 <= grp_fu_278_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (tmp_22_fu_502_p2 == 1'd1))) begin
        acc_datftc_reg_243 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        acc_datftr_reg_220 <= grp_fu_278_p2;
    end else if (((1'b1 == ap_CS_fsm_state14) & (tmp_17_fu_453_p2 == 1'd1))) begin
        acc_datftr_reg_220 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_17_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (or_cond7_fu_481_p2 == 1'd1))) begin
        block_cnt <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        block_cnt <= tmp_10_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tc_reg_255 <= tc_1_reg_648;
    end else if (((1'b1 == ap_CS_fsm_state15) & (tmp_22_fu_502_p2 == 1'd1))) begin
        tc_reg_255 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        tn_reg_208 <= tn_1_reg_620;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        tn_reg_208 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tr_reg_232 <= tr_1_reg_634;
    end else if (((1'b1 == ap_CS_fsm_state14) & (tmp_17_fu_453_p2 == 1'd1))) begin
        tr_reg_232 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        brmerge_reg_613 <= brmerge_fu_443_p2;
        nLoops_reg_584 <= nLoops_fu_385_p3;
        or_cond_reg_589 <= or_cond_fu_415_p2;
        tmp_15_reg_603 <= tmp_15_fu_421_p2;
        tmp_16_reg_608 <= tmp_16_fu_426_p2;
        tmp_588_reg_593 <= grp_fu_272_p1;
        tmp_589_reg_598 <= grp_fu_275_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cLoops_reg_566 <= cLoops_fu_362_p3;
        rLoops_reg_559 <= rLoops_fu_343_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        output_reg_reg_689 <= grp_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_22_fu_502_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        output_temp_addr_1_reg_639 <= tmp_24_fu_513_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_temp_load_reg_668 <= output_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_313 <= grp_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_318 <= grp_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tc_1_reg_648 <= tc_1_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_1344_reg_573 <= grp_fu_269_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_1349_reg_578 <= data_n_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_9_nbwritereq_fu_112_p3 == 1'd1) & (tmp_nbreadreq_fu_104_p3 == 1'd1))) begin
        tmp_1350_reg_543 <= data_r_V_dout;
        tmp_1351_reg_551 <= data_c_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_26_fu_522_p2 == 1'd1))) begin
        tmp_1355_reg_653 <= input_buffer_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_25_reg_673 <= grp_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        tmp_590_reg_684 <= grp_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tn_1_reg_620 <= tn_1_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tr_1_reg_634 <= tr_1_fu_507_p2;
    end
end

always @ (*) begin
    if (((tmp_1352_fu_493_p1 == 1'd0) & (tmp_17_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1352_fu_493_p1 == 1'd0) & (tmp_17_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_17_fu_453_p2 == 1'd0) & (data_buffer_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        data_buffer_V_read = 1'b1;
    end else begin
        data_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (data_c_V_empty_n == 1'b1) & (tmp_9_nbwritereq_fu_112_p3 == 1'd1) & (tmp_nbreadreq_fu_104_p3 == 1'd1))) begin
        data_c_V_read = 1'b1;
    end else begin
        data_c_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((data_n_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        data_n_V_read = 1'b1;
    end else begin
        data_n_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((data_r_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (tmp_9_nbwritereq_fu_112_p3 == 1'd1) & (tmp_nbreadreq_fu_104_p3 == 1'd1))) begin
        data_r_V_read = 1'b1;
    end else begin
        data_r_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_266_p0 = block_cnt;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_266_p0 = cLoops_reg_566;
    end else begin
        grp_fu_266_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_278_p0 = output_temp_load_reg_668;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_278_p0 = reg_318;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_278_p0 = tmp_1355_reg_653;
    end else begin
        grp_fu_278_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_278_p1 = reg_318;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_278_p1 = acc_datftr_reg_220;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_278_p1 = acc_datftc_reg_243;
    end else begin
        grp_fu_278_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_284_p0 = tmp_25_reg_673;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_284_p0 = acc_datftc_reg_243;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_284_p0 = acc_datftr_reg_220;
    end else begin
        grp_fu_284_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_284_p1 = tmp_590_reg_684;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_284_p1 = tmp_588_reg_593;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_284_p1 = tmp_589_reg_598;
    end else begin
        grp_fu_284_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_295_p1 = tmp_15_reg_603;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_295_p1 = tmp_15_fu_421_p2;
    end else begin
        grp_fu_295_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_304_p1 = tmp_16_reg_608;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_304_p1 = tmp_16_fu_426_p2;
    end else begin
        grp_fu_304_p1 = 'bx;
    end
end

always @ (*) begin
    if (((input_buffer_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state16) & (tmp_26_fu_522_p2 == 1'd1))) begin
        input_buffer_V_read = 1'b1;
    end else begin
        input_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((output_buffer_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state54) & (brmerge_reg_613 == 1'd0))) begin
        output_buffer_V_write = 1'b1;
    end else begin
        output_buffer_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        output_temp_address1 = output_temp_addr_1_reg_639;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_temp_address1 = tmp_21_fu_464_p1;
    end else begin
        output_temp_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        output_temp_ce0 = 1'b1;
    end else begin
        output_temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state14))) begin
        output_temp_ce1 = 1'b1;
    end else begin
        output_temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        output_temp_d1 = tmp_25_reg_673;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_temp_d1 = 16'd0;
    end else begin
        output_temp_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state14) & (tmp_17_fu_453_p2 == 1'd1) & (or_cond_reg_589 == 1'd1)))) begin
        output_temp_we1 = 1'b1;
    end else begin
        output_temp_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_17_fu_453_p2 == 1'd0) & (result_buffer_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        result_buffer_V_write = 1'b1;
    end else begin
        result_buffer_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_17_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (result_c_V_full_n == 1'b1))) begin
        result_c_V_write = 1'b1;
    end else begin
        result_c_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_17_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (result_n_V_full_n == 1'b1))) begin
        result_n_V_write = 1'b1;
    end else begin
        result_n_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_17_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (result_r_V_full_n == 1'b1))) begin
        result_r_V_write = 1'b1;
    end else begin
        result_r_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((tmp_9_nbwritereq_fu_112_p3 == 1'd0) | (tmp_nbreadreq_fu_104_p3 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((tmp_1352_fu_493_p1 == 1'd0) & (tmp_17_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((tmp_17_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14) & (tmp_1352_fu_493_p1 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (tmp_22_fu_502_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((tmp_26_fu_522_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (brmerge_reg_613 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign brmerge_fu_443_p2 = (icmp_fu_431_p2 | icmp16_fu_437_p2);

assign cLoops_fu_362_p3 = ((tmp_7_fu_356_p2[0:0] === 1'b1) ? 32'd8 : tmp_6_fu_351_p2);

assign grp_fu_295_p4 = {{grp_fu_295_p1[31:4]}};

assign grp_fu_304_p4 = {{grp_fu_304_p1[31:4]}};

assign icmp16_fu_437_p2 = (($signed(grp_fu_304_p4) < $signed(28'd1)) ? 1'b1 : 1'b0);

assign icmp19_fu_469_p2 = (($signed(grp_fu_295_p4) > $signed(28'd0)) ? 1'b1 : 1'b0);

assign icmp22_fu_475_p2 = (($signed(grp_fu_304_p4) > $signed(28'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_431_p2 = (($signed(grp_fu_295_p4) < $signed(28'd1)) ? 1'b1 : 1'b0);

assign nLoops_fu_385_p3 = ((tmp_3_fu_379_p2[0:0] === 1'b1) ? 32'd8 : tmp_s_fu_374_p2);

assign or_cond7_fu_481_p2 = (icmp22_fu_475_p2 & icmp19_fu_469_p2);

assign or_cond_fu_415_p2 = (tmp_12_fu_410_p2 & tmp_11_fu_405_p2);

assign output_buffer_V_din = output_reg_reg_689;

assign rLoops_fu_343_p3 = ((tmp_5_fu_337_p2[0:0] === 1'b1) ? 32'd8 : tmp_4_fu_332_p2);

assign result_buffer_V_din = data_buffer_V_dout;

assign result_c_V_din = tmp_1351_reg_551;

assign result_n_V_din = tmp_1349_reg_578;

assign result_r_V_din = tmp_1350_reg_543;

assign tc_1_fu_527_p2 = (tc_reg_255 + 4'd1);

assign tc_cast_fu_518_p1 = tc_reg_255;

assign tmp_10_fu_393_p2 = (block_cnt + 32'd1);

assign tmp_11_fu_405_p2 = (($signed(tmp_1350_reg_543) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign tmp_12_fu_410_p2 = (($signed(tmp_1351_reg_551) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign tmp_1352_fu_493_p1 = data_buffer_V_dout;

assign tmp_15_fu_421_p2 = (tmp_1350_reg_543 + rLoops_reg_559);

assign tmp_16_fu_426_p2 = (tmp_1351_reg_551 + cLoops_reg_566);

assign tmp_17_fu_453_p2 = (($signed(tn_cast_fu_449_p1) < $signed(nLoops_reg_584)) ? 1'b1 : 1'b0);

assign tmp_21_fu_464_p1 = tn_reg_208;

assign tmp_22_fu_502_p2 = (($signed(tr_cast_fu_498_p1) < $signed(rLoops_reg_559)) ? 1'b1 : 1'b0);

assign tmp_24_fu_513_p1 = tn_reg_208;

assign tmp_26_fu_522_p2 = (($signed(tc_cast_fu_518_p1) < $signed(cLoops_reg_566)) ? 1'b1 : 1'b0);

assign tmp_3_fu_379_p2 = (($signed(tmp_s_fu_374_p2) > $signed(32'd8)) ? 1'b1 : 1'b0);

assign tmp_4_fu_332_p2 = (32'd16 - tmp_1350_reg_543);

assign tmp_5_fu_337_p2 = (($signed(tmp_4_fu_332_p2) > $signed(32'd8)) ? 1'b1 : 1'b0);

assign tmp_6_fu_351_p2 = (32'd16 - tmp_1351_reg_551);

assign tmp_7_fu_356_p2 = (($signed(tmp_6_fu_351_p2) > $signed(32'd8)) ? 1'b1 : 1'b0);

assign tmp_9_nbwritereq_fu_112_p3 = result_buffer_V_full_n;

assign tmp_nbreadreq_fu_104_p3 = data_buffer_V_empty_n;

assign tmp_s_fu_374_p2 = (32'd512 - tmp_1349_reg_578);

assign tn_1_fu_458_p2 = (tn_reg_208 + 4'd1);

assign tn_cast_fu_449_p1 = tn_reg_208;

assign tr_1_fu_507_p2 = (tr_reg_232 + 4'd1);

assign tr_cast_fu_498_p1 = tr_reg_232;

endmodule //compute_pro
