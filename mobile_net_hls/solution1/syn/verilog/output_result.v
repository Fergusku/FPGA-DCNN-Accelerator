// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module output_result (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY,
        m_axi_outputs_AWADDR,
        m_axi_outputs_AWID,
        m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID,
        m_axi_outputs_WREADY,
        m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST,
        m_axi_outputs_WID,
        m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY,
        m_axi_outputs_ARADDR,
        m_axi_outputs_ARID,
        m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID,
        m_axi_outputs_RREADY,
        m_axi_outputs_RDATA,
        m_axi_outputs_RLAST,
        m_axi_outputs_RID,
        m_axi_outputs_RUSER,
        m_axi_outputs_RRESP,
        m_axi_outputs_BVALID,
        m_axi_outputs_BREADY,
        m_axi_outputs_BRESP,
        m_axi_outputs_BID,
        m_axi_outputs_BUSER,
        outputs_offset_dout,
        outputs_offset_empty_n,
        outputs_offset_read,
        outputs_offset_c_dout,
        outputs_offset_c_empty_n,
        outputs_offset_c_read,
        output_buffer_V_dout,
        output_buffer_V_empty_n,
        output_buffer_V_read,
        result_buffer_V_dout,
        result_buffer_V_empty_n,
        result_buffer_V_read,
        result_n_V_dout,
        result_n_V_empty_n,
        result_n_V_read,
        result_r_V_dout,
        result_r_V_empty_n,
        result_r_V_read,
        result_c_V_dout,
        result_c_V_empty_n,
        result_c_V_read,
        cntl_V_din,
        cntl_V_full_n,
        cntl_V_write
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_pp0_stage0 = 11'd32;
parameter    ap_ST_fsm_state8 = 11'd64;
parameter    ap_ST_fsm_state9 = 11'd128;
parameter    ap_ST_fsm_state10 = 11'd256;
parameter    ap_ST_fsm_state11 = 11'd512;
parameter    ap_ST_fsm_state12 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_outputs_AWVALID;
input   m_axi_outputs_AWREADY;
output  [31:0] m_axi_outputs_AWADDR;
output  [0:0] m_axi_outputs_AWID;
output  [31:0] m_axi_outputs_AWLEN;
output  [2:0] m_axi_outputs_AWSIZE;
output  [1:0] m_axi_outputs_AWBURST;
output  [1:0] m_axi_outputs_AWLOCK;
output  [3:0] m_axi_outputs_AWCACHE;
output  [2:0] m_axi_outputs_AWPROT;
output  [3:0] m_axi_outputs_AWQOS;
output  [3:0] m_axi_outputs_AWREGION;
output  [0:0] m_axi_outputs_AWUSER;
output   m_axi_outputs_WVALID;
input   m_axi_outputs_WREADY;
output  [15:0] m_axi_outputs_WDATA;
output  [1:0] m_axi_outputs_WSTRB;
output   m_axi_outputs_WLAST;
output  [0:0] m_axi_outputs_WID;
output  [0:0] m_axi_outputs_WUSER;
output   m_axi_outputs_ARVALID;
input   m_axi_outputs_ARREADY;
output  [31:0] m_axi_outputs_ARADDR;
output  [0:0] m_axi_outputs_ARID;
output  [31:0] m_axi_outputs_ARLEN;
output  [2:0] m_axi_outputs_ARSIZE;
output  [1:0] m_axi_outputs_ARBURST;
output  [1:0] m_axi_outputs_ARLOCK;
output  [3:0] m_axi_outputs_ARCACHE;
output  [2:0] m_axi_outputs_ARPROT;
output  [3:0] m_axi_outputs_ARQOS;
output  [3:0] m_axi_outputs_ARREGION;
output  [0:0] m_axi_outputs_ARUSER;
input   m_axi_outputs_RVALID;
output   m_axi_outputs_RREADY;
input  [15:0] m_axi_outputs_RDATA;
input   m_axi_outputs_RLAST;
input  [0:0] m_axi_outputs_RID;
input  [0:0] m_axi_outputs_RUSER;
input  [1:0] m_axi_outputs_RRESP;
input   m_axi_outputs_BVALID;
output   m_axi_outputs_BREADY;
input  [1:0] m_axi_outputs_BRESP;
input  [0:0] m_axi_outputs_BID;
input  [0:0] m_axi_outputs_BUSER;
input  [30:0] outputs_offset_dout;
input   outputs_offset_empty_n;
output   outputs_offset_read;
input  [9:0] outputs_offset_c_dout;
input   outputs_offset_c_empty_n;
output   outputs_offset_c_read;
input  [15:0] output_buffer_V_dout;
input   output_buffer_V_empty_n;
output   output_buffer_V_read;
input   result_buffer_V_dout;
input   result_buffer_V_empty_n;
output   result_buffer_V_read;
input  [31:0] result_n_V_dout;
input   result_n_V_empty_n;
output   result_n_V_read;
input  [31:0] result_r_V_dout;
input   result_r_V_empty_n;
output   result_r_V_read;
input  [31:0] result_c_V_dout;
input   result_c_V_empty_n;
output   result_c_V_read;
output   cntl_V_din;
input   cntl_V_full_n;
output   cntl_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_outputs_AWVALID;
reg m_axi_outputs_WVALID;
reg m_axi_outputs_BREADY;
reg outputs_offset_read;
reg outputs_offset_c_read;
reg output_buffer_V_read;
reg result_buffer_V_read;
reg result_n_V_read;
reg result_r_V_read;
reg result_c_V_read;
reg cntl_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    outputs_blk_n_AW;
wire    ap_CS_fsm_state5;
reg    outputs_blk_n_W;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_13_i_i_i_reg_408;
reg    outputs_blk_n_B;
wire    ap_CS_fsm_state12;
reg   [0:0] icmp_reg_394;
reg   [0:0] icmp7_reg_398;
reg    outputs_offset_blk_n;
reg    outputs_offset_c_blk_n;
reg    cntl_V_blk_n;
wire   [0:0] tmp_288_fu_343_p1;
reg   [3:0] i_0_i_i_i_i_reg_169;
wire   [32:0] outputs_offset_cast_s_fu_180_p1;
reg   [32:0] outputs_offset_cast_s_reg_347;
reg    ap_block_state1;
wire   [33:0] sext_cast_i_i_fu_184_p1;
reg   [33:0] sext_cast_i_i_reg_352;
reg  signed [31:0] tmp_285_reg_360;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_nbreadreq_fu_108_p3;
reg   [31:0] tmp_286_reg_366;
reg   [31:0] tmp_287_reg_371;
wire   [31:0] tmp_4_i_i_i_fu_200_p2;
reg   [31:0] tmp_4_i_i_i_reg_376;
wire   [31:0] tmp_6_i_i_i_fu_206_p2;
reg   [31:0] tmp_6_i_i_i_reg_382;
wire   [31:0] nLoops_fu_223_p3;
reg   [31:0] nLoops_reg_388;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_fu_270_p2;
wire   [0:0] icmp7_fu_291_p2;
reg   [31:0] outputs_addr_reg_402;
wire   [0:0] tmp_13_i_i_i_fu_328_p2;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
reg    ap_sig_ioackin_m_axi_outputs_WREADY;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_333_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_283_reg_417;
reg    ap_sig_ioackin_m_axi_outputs_AWREADY;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
wire  signed [63:0] sum_cast_i_i_fu_314_p1;
reg    ap_reg_ioackin_m_axi_outputs_AWREADY;
reg    ap_predicate_op88_writeresp_state12;
reg    ap_block_state12;
reg    ap_reg_ioackin_m_axi_outputs_WREADY;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_i_i_i_fu_212_p2;
wire   [0:0] tmp_3_i_i_i_fu_217_p2;
wire   [0:0] tmp_5_i_i_i_fu_231_p2;
wire   [0:0] tmp_7_i_i_i_fu_243_p2;
wire   [31:0] rLoops_fu_236_p3;
wire   [31:0] tmp_8_i_i_i_fu_255_p2;
wire   [27:0] tmp_281_fu_260_p4;
wire   [31:0] cLoops_fu_248_p3;
wire   [31:0] tmp_10_i_i_i_fu_276_p2;
wire   [27:0] tmp_282_fu_281_p4;
wire  signed [32:0] tmp_12_cast_i_i_i_fu_297_p1;
wire   [32:0] tmp_19_i_i_fu_300_p2;
wire  signed [33:0] tmp_20_cast_i_i_fu_305_p1;
wire   [33:0] sum_i_i_fu_309_p2;
wire   [31:0] i_0_i_cast_i_i_i_fu_324_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_484;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_outputs_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_outputs_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((m_axi_outputs_BVALID == 1'b0) & (ap_predicate_op88_writeresp_state12 == 1'b1)) | ((tmp_288_fu_343_p1 == 1'd0) & (cntl_V_full_n == 1'b0))) & (tmp_288_fu_343_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_outputs_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_outputs_AWREADY <= 1'b0;
            end else if ((m_axi_outputs_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_outputs_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_outputs_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_484)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_outputs_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_outputs_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_outputs_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i_i_i_i_reg_169 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_13_i_i_i_fu_328_p2 == 1'd1))) begin
        i_0_i_i_i_i_reg_169 <= i_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_fu_270_p2 == 1'd1))) begin
        icmp7_reg_398 <= icmp7_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_reg_394 <= icmp_fu_270_p2;
        nLoops_reg_388 <= nLoops_fu_223_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp7_fu_291_p2 == 1'd1) & (icmp_fu_270_p2 == 1'd1))) begin
        outputs_addr_reg_402 <= sum_cast_i_i_fu_314_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outputs_offset_c_empty_n == 1'b0) | (outputs_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_offset_cast_s_reg_347[9 : 0] <= outputs_offset_cast_s_fu_180_p1[9 : 0];
        sext_cast_i_i_reg_352[30 : 0] <= sext_cast_i_i_fu_184_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_13_i_i_i_reg_408 <= tmp_13_i_i_i_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_13_i_i_i_fu_328_p2 == 1'd1))) begin
        tmp_283_reg_417 <= output_buffer_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_nbreadreq_fu_108_p3 == 1'd1))) begin
        tmp_285_reg_360 <= result_n_V_dout;
        tmp_286_reg_366 <= result_r_V_dout;
        tmp_287_reg_371 <= result_c_V_dout;
        tmp_4_i_i_i_reg_376 <= tmp_4_i_i_i_fu_200_p2;
        tmp_6_i_i_i_reg_382 <= tmp_6_i_i_i_fu_206_p2;
    end
end

always @ (*) begin
    if ((tmp_13_i_i_i_fu_328_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((m_axi_outputs_BVALID == 1'b0) & (ap_predicate_op88_writeresp_state12 == 1'b1)) | ((tmp_288_fu_343_p1 == 1'd0) & (cntl_V_full_n == 1'b0))) & (tmp_288_fu_343_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((m_axi_outputs_BVALID == 1'b0) & (ap_predicate_op88_writeresp_state12 == 1'b1)) | ((tmp_288_fu_343_p1 == 1'd0) & (cntl_V_full_n == 1'b0))) & (tmp_288_fu_343_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_outputs_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_outputs_AWREADY = m_axi_outputs_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_outputs_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_outputs_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_outputs_WREADY = m_axi_outputs_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_outputs_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_288_fu_343_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        cntl_V_blk_n = cntl_V_full_n;
    end else begin
        cntl_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((m_axi_outputs_BVALID == 1'b0) & (ap_predicate_op88_writeresp_state12 == 1'b1)) | ((tmp_288_fu_343_p1 == 1'd0) & (cntl_V_full_n == 1'b0))) & (tmp_288_fu_343_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        cntl_V_write = 1'b1;
    end else begin
        cntl_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_outputs_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_outputs_AWVALID = 1'b1;
    end else begin
        m_axi_outputs_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~(((m_axi_outputs_BVALID == 1'b0) & (ap_predicate_op88_writeresp_state12 == 1'b1)) | ((tmp_288_fu_343_p1 == 1'd0) & (cntl_V_full_n == 1'b0))) & (ap_predicate_op88_writeresp_state12 == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_outputs_BREADY = 1'b1;
    end else begin
        m_axi_outputs_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_outputs_WREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_13_i_i_i_reg_408 == 1'd1))) begin
        m_axi_outputs_WVALID = 1'b1;
    end else begin
        m_axi_outputs_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (output_buffer_V_empty_n == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_13_i_i_i_fu_328_p2 == 1'd1))) begin
        output_buffer_V_read = 1'b1;
    end else begin
        output_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        outputs_blk_n_AW = m_axi_outputs_AWREADY;
    end else begin
        outputs_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp7_reg_398 == 1'd1) & (icmp_reg_394 == 1'd1))) begin
        outputs_blk_n_B = m_axi_outputs_BVALID;
    end else begin
        outputs_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_13_i_i_i_reg_408 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        outputs_blk_n_W = m_axi_outputs_WREADY;
    end else begin
        outputs_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_offset_blk_n = outputs_offset_empty_n;
    end else begin
        outputs_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_offset_c_blk_n = outputs_offset_c_empty_n;
    end else begin
        outputs_offset_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outputs_offset_c_empty_n == 1'b0) | (outputs_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_offset_c_read = 1'b1;
    end else begin
        outputs_offset_c_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((outputs_offset_c_empty_n == 1'b0) | (outputs_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        outputs_offset_read = 1'b1;
    end else begin
        outputs_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~(((m_axi_outputs_BVALID == 1'b0) & (ap_predicate_op88_writeresp_state12 == 1'b1)) | ((tmp_288_fu_343_p1 == 1'd0) & (cntl_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state12) & (result_buffer_V_empty_n == 1'b1))) begin
        result_buffer_V_read = 1'b1;
    end else begin
        result_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (result_c_V_empty_n == 1'b1) & (tmp_nbreadreq_fu_108_p3 == 1'd1))) begin
        result_c_V_read = 1'b1;
    end else begin
        result_c_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (result_n_V_empty_n == 1'b1) & (tmp_nbreadreq_fu_108_p3 == 1'd1))) begin
        result_n_V_read = 1'b1;
    end else begin
        result_n_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (result_r_V_empty_n == 1'b1) & (tmp_nbreadreq_fu_108_p3 == 1'd1))) begin
        result_r_V_read = 1'b1;
    end else begin
        result_r_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((outputs_offset_c_empty_n == 1'b0) | (outputs_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_nbreadreq_fu_108_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp7_fu_291_p2 == 1'd1) & (icmp_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_m_axi_outputs_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_13_i_i_i_fu_328_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_13_i_i_i_fu_328_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if ((~(((m_axi_outputs_BVALID == 1'b0) & (ap_predicate_op88_writeresp_state12 == 1'b1)) | ((tmp_288_fu_343_p1 == 1'd0) & (cntl_V_full_n == 1'b0))) & (tmp_288_fu_343_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((m_axi_outputs_BVALID == 1'b0) & (ap_predicate_op88_writeresp_state12 == 1'b1)) | ((tmp_288_fu_343_p1 == 1'd0) & (cntl_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state12) & (tmp_288_fu_343_p1 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((outputs_offset_c_empty_n == 1'b0) | (outputs_offset_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state12 = (((m_axi_outputs_BVALID == 1'b0) & (ap_predicate_op88_writeresp_state12 == 1'b1)) | ((tmp_288_fu_343_p1 == 1'd0) & (cntl_V_full_n == 1'b0)));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((ap_sig_ioackin_m_axi_outputs_WREADY == 1'b0) & (tmp_13_i_i_i_reg_408 == 1'd1));
end

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_484 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_13_i_i_i_reg_408 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op88_writeresp_state12 = ((icmp7_reg_398 == 1'd1) & (icmp_reg_394 == 1'd1));
end

assign cLoops_fu_248_p3 = ((tmp_7_i_i_i_fu_243_p2[0:0] === 1'b1) ? 32'd8 : tmp_6_i_i_i_reg_382);

assign cntl_V_din = 1'd0;

assign i_0_i_cast_i_i_i_fu_324_p1 = i_0_i_i_i_i_reg_169;

assign i_fu_333_p2 = (i_0_i_i_i_i_reg_169 + 4'd1);

assign icmp7_fu_291_p2 = (($signed(tmp_282_fu_281_p4) > $signed(28'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_270_p2 = (($signed(tmp_281_fu_260_p4) > $signed(28'd0)) ? 1'b1 : 1'b0);

assign m_axi_outputs_ARADDR = 32'd0;

assign m_axi_outputs_ARBURST = 2'd0;

assign m_axi_outputs_ARCACHE = 4'd0;

assign m_axi_outputs_ARID = 1'd0;

assign m_axi_outputs_ARLEN = 32'd0;

assign m_axi_outputs_ARLOCK = 2'd0;

assign m_axi_outputs_ARPROT = 3'd0;

assign m_axi_outputs_ARQOS = 4'd0;

assign m_axi_outputs_ARREGION = 4'd0;

assign m_axi_outputs_ARSIZE = 3'd0;

assign m_axi_outputs_ARUSER = 1'd0;

assign m_axi_outputs_ARVALID = 1'b0;

assign m_axi_outputs_AWADDR = outputs_addr_reg_402;

assign m_axi_outputs_AWBURST = 2'd0;

assign m_axi_outputs_AWCACHE = 4'd0;

assign m_axi_outputs_AWID = 1'd0;

assign m_axi_outputs_AWLEN = nLoops_reg_388;

assign m_axi_outputs_AWLOCK = 2'd0;

assign m_axi_outputs_AWPROT = 3'd0;

assign m_axi_outputs_AWQOS = 4'd0;

assign m_axi_outputs_AWREGION = 4'd0;

assign m_axi_outputs_AWSIZE = 3'd0;

assign m_axi_outputs_AWUSER = 1'd0;

assign m_axi_outputs_RREADY = 1'b0;

assign m_axi_outputs_WDATA = tmp_283_reg_417;

assign m_axi_outputs_WID = 1'd0;

assign m_axi_outputs_WLAST = 1'b0;

assign m_axi_outputs_WSTRB = 2'd3;

assign m_axi_outputs_WUSER = 1'd0;

assign nLoops_fu_223_p3 = ((tmp_3_i_i_i_fu_217_p2[0:0] === 1'b1) ? 32'd8 : tmp_i_i_i_fu_212_p2);

assign outputs_offset_cast_s_fu_180_p1 = outputs_offset_c_dout;

assign rLoops_fu_236_p3 = ((tmp_5_i_i_i_fu_231_p2[0:0] === 1'b1) ? 32'd8 : tmp_4_i_i_i_reg_376);

assign sext_cast_i_i_fu_184_p1 = outputs_offset_dout;

assign sum_cast_i_i_fu_314_p1 = $signed(sum_i_i_fu_309_p2);

assign sum_i_i_fu_309_p2 = ($signed(sext_cast_i_i_reg_352) + $signed(tmp_20_cast_i_i_fu_305_p1));

assign tmp_10_i_i_i_fu_276_p2 = (tmp_287_reg_371 + cLoops_fu_248_p3);

assign tmp_12_cast_i_i_i_fu_297_p1 = tmp_285_reg_360;

assign tmp_13_i_i_i_fu_328_p2 = (($signed(i_0_i_cast_i_i_i_fu_324_p1) < $signed(nLoops_reg_388)) ? 1'b1 : 1'b0);

assign tmp_19_i_i_fu_300_p2 = ($signed(outputs_offset_cast_s_reg_347) + $signed(tmp_12_cast_i_i_i_fu_297_p1));

assign tmp_20_cast_i_i_fu_305_p1 = $signed(tmp_19_i_i_fu_300_p2);

assign tmp_281_fu_260_p4 = {{tmp_8_i_i_i_fu_255_p2[31:4]}};

assign tmp_282_fu_281_p4 = {{tmp_10_i_i_i_fu_276_p2[31:4]}};

assign tmp_288_fu_343_p1 = result_buffer_V_dout;

assign tmp_3_i_i_i_fu_217_p2 = (($signed(tmp_i_i_i_fu_212_p2) > $signed(32'd8)) ? 1'b1 : 1'b0);

assign tmp_4_i_i_i_fu_200_p2 = (32'd16 - result_r_V_dout);

assign tmp_5_i_i_i_fu_231_p2 = (($signed(tmp_4_i_i_i_reg_376) > $signed(32'd8)) ? 1'b1 : 1'b0);

assign tmp_6_i_i_i_fu_206_p2 = (32'd16 - result_c_V_dout);

assign tmp_7_i_i_i_fu_243_p2 = (($signed(tmp_6_i_i_i_reg_382) > $signed(32'd8)) ? 1'b1 : 1'b0);

assign tmp_8_i_i_i_fu_255_p2 = (tmp_286_reg_366 + rLoops_fu_236_p3);

assign tmp_i_i_i_fu_212_p2 = ($signed(32'd512) - $signed(tmp_285_reg_360));

assign tmp_nbreadreq_fu_108_p3 = result_buffer_V_empty_n;

always @ (posedge ap_clk) begin
    outputs_offset_cast_s_reg_347[32:10] <= 23'b00000000000000000000000;
    sext_cast_i_i_reg_352[33:31] <= 3'b000;
end

endmodule //output_result
