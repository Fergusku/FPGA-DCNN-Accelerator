// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _copy_weight_fmem2buf_3_HH_
#define _copy_weight_fmem2buf_3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct copy_weight_fmem2buf_3 : public sc_module {
    // Port declarations 107
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_weights_AWVALID;
    sc_in< sc_logic > m_axi_weights_AWREADY;
    sc_out< sc_lv<32> > m_axi_weights_AWADDR;
    sc_out< sc_lv<1> > m_axi_weights_AWID;
    sc_out< sc_lv<32> > m_axi_weights_AWLEN;
    sc_out< sc_lv<3> > m_axi_weights_AWSIZE;
    sc_out< sc_lv<2> > m_axi_weights_AWBURST;
    sc_out< sc_lv<2> > m_axi_weights_AWLOCK;
    sc_out< sc_lv<4> > m_axi_weights_AWCACHE;
    sc_out< sc_lv<3> > m_axi_weights_AWPROT;
    sc_out< sc_lv<4> > m_axi_weights_AWQOS;
    sc_out< sc_lv<4> > m_axi_weights_AWREGION;
    sc_out< sc_lv<1> > m_axi_weights_AWUSER;
    sc_out< sc_logic > m_axi_weights_WVALID;
    sc_in< sc_logic > m_axi_weights_WREADY;
    sc_out< sc_lv<16> > m_axi_weights_WDATA;
    sc_out< sc_lv<2> > m_axi_weights_WSTRB;
    sc_out< sc_logic > m_axi_weights_WLAST;
    sc_out< sc_lv<1> > m_axi_weights_WID;
    sc_out< sc_lv<1> > m_axi_weights_WUSER;
    sc_out< sc_logic > m_axi_weights_ARVALID;
    sc_in< sc_logic > m_axi_weights_ARREADY;
    sc_out< sc_lv<32> > m_axi_weights_ARADDR;
    sc_out< sc_lv<1> > m_axi_weights_ARID;
    sc_out< sc_lv<32> > m_axi_weights_ARLEN;
    sc_out< sc_lv<3> > m_axi_weights_ARSIZE;
    sc_out< sc_lv<2> > m_axi_weights_ARBURST;
    sc_out< sc_lv<2> > m_axi_weights_ARLOCK;
    sc_out< sc_lv<4> > m_axi_weights_ARCACHE;
    sc_out< sc_lv<3> > m_axi_weights_ARPROT;
    sc_out< sc_lv<4> > m_axi_weights_ARQOS;
    sc_out< sc_lv<4> > m_axi_weights_ARREGION;
    sc_out< sc_lv<1> > m_axi_weights_ARUSER;
    sc_in< sc_logic > m_axi_weights_RVALID;
    sc_out< sc_logic > m_axi_weights_RREADY;
    sc_in< sc_lv<16> > m_axi_weights_RDATA;
    sc_in< sc_logic > m_axi_weights_RLAST;
    sc_in< sc_lv<1> > m_axi_weights_RID;
    sc_in< sc_lv<1> > m_axi_weights_RUSER;
    sc_in< sc_lv<2> > m_axi_weights_RRESP;
    sc_in< sc_logic > m_axi_weights_BVALID;
    sc_out< sc_logic > m_axi_weights_BREADY;
    sc_in< sc_lv<2> > m_axi_weights_BRESP;
    sc_in< sc_lv<1> > m_axi_weights_BID;
    sc_in< sc_lv<1> > m_axi_weights_BUSER;
    sc_in< sc_lv<31> > weights_offset;
    sc_out< sc_lv<16> > weight_buffer_0_V_din;
    sc_in< sc_logic > weight_buffer_0_V_full_n;
    sc_out< sc_logic > weight_buffer_0_V_write;
    sc_out< sc_lv<16> > weight_buffer_1_V_din;
    sc_in< sc_logic > weight_buffer_1_V_full_n;
    sc_out< sc_logic > weight_buffer_1_V_write;
    sc_out< sc_lv<16> > weight_buffer_2_V_din;
    sc_in< sc_logic > weight_buffer_2_V_full_n;
    sc_out< sc_logic > weight_buffer_2_V_write;
    sc_out< sc_lv<16> > weight_buffer_3_V_din;
    sc_in< sc_logic > weight_buffer_3_V_full_n;
    sc_out< sc_logic > weight_buffer_3_V_write;
    sc_out< sc_lv<16> > weight_buffer_4_V_din;
    sc_in< sc_logic > weight_buffer_4_V_full_n;
    sc_out< sc_logic > weight_buffer_4_V_write;
    sc_out< sc_lv<16> > weight_buffer_5_V_din;
    sc_in< sc_logic > weight_buffer_5_V_full_n;
    sc_out< sc_logic > weight_buffer_5_V_write;
    sc_out< sc_lv<16> > weight_buffer_6_V_din;
    sc_in< sc_logic > weight_buffer_6_V_full_n;
    sc_out< sc_logic > weight_buffer_6_V_write;
    sc_out< sc_lv<16> > weight_buffer_7_V_din;
    sc_in< sc_logic > weight_buffer_7_V_full_n;
    sc_out< sc_logic > weight_buffer_7_V_write;
    sc_out< sc_lv<16> > weight_buffer_8_V_din;
    sc_in< sc_logic > weight_buffer_8_V_full_n;
    sc_out< sc_logic > weight_buffer_8_V_write;
    sc_out< sc_lv<16> > weight_buffer_9_V_din;
    sc_in< sc_logic > weight_buffer_9_V_full_n;
    sc_out< sc_logic > weight_buffer_9_V_write;
    sc_out< sc_lv<16> > weight_buffer_10_V_din;
    sc_in< sc_logic > weight_buffer_10_V_full_n;
    sc_out< sc_logic > weight_buffer_10_V_write;
    sc_out< sc_lv<16> > weight_buffer_11_V_din;
    sc_in< sc_logic > weight_buffer_11_V_full_n;
    sc_out< sc_logic > weight_buffer_11_V_write;
    sc_out< sc_lv<16> > weight_buffer_12_V_din;
    sc_in< sc_logic > weight_buffer_12_V_full_n;
    sc_out< sc_logic > weight_buffer_12_V_write;
    sc_out< sc_lv<16> > weight_buffer_13_V_din;
    sc_in< sc_logic > weight_buffer_13_V_full_n;
    sc_out< sc_logic > weight_buffer_13_V_write;
    sc_out< sc_lv<16> > weight_buffer_14_V_din;
    sc_in< sc_logic > weight_buffer_14_V_full_n;
    sc_out< sc_logic > weight_buffer_14_V_write;
    sc_out< sc_lv<16> > weight_buffer_15_V_din;
    sc_in< sc_logic > weight_buffer_15_V_full_n;
    sc_out< sc_logic > weight_buffer_15_V_write;
    sc_in< sc_lv<3> > n;
    sc_in< sc_lv<6> > m;
    sc_in< sc_lv<2> > nLoops;
    sc_in< sc_lv<6> > mLoops;
    sc_out< sc_logic > weight_cntl_V_din;
    sc_in< sc_logic > weight_cntl_V_full_n;
    sc_out< sc_logic > weight_cntl_V_write;


    // Module declarations
    copy_weight_fmem2buf_3(sc_module_name name);
    SC_HAS_PROCESS(copy_weight_fmem2buf_3);

    ~copy_weight_fmem2buf_3();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > weights_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > weights_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<4> > i_reg_371;
    sc_signal< sc_lv<32> > weights_offset_cast_fu_382_p1;
    sc_signal< sc_lv<32> > weights_offset_cast_reg_525;
    sc_signal< sc_lv<12> > base_addr_fu_436_p2;
    sc_signal< sc_lv<2> > tn_5_fu_447_p2;
    sc_signal< sc_lv<2> > tn_5_reg_538;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > tm_3_fu_462_p2;
    sc_signal< sc_lv<5> > tm_3_reg_546;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > tmp_553_fu_468_p1;
    sc_signal< sc_lv<4> > tmp_553_reg_551;
    sc_signal< sc_lv<1> > tmp_10_fu_457_p2;
    sc_signal< sc_lv<32> > weights_addr_reg_555;
    sc_signal< sc_lv<12> > base_addr_d1_16_fu_491_p2;
    sc_signal< sc_lv<1> > exitcond_fu_497_p2;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > i_4_fu_503_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<16> > tmp_554_reg_575;
    sc_signal< sc_lv<12> > base_addr_d2_9_fu_509_p2;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state11;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<12> > base_addr_d2_reg_328;
    sc_signal< sc_lv<2> > tn_reg_338;
    sc_signal< sc_lv<12> > base_addr_d_reg_349;
    sc_signal< sc_lv<1> > exitcond1_fu_442_p2;
    sc_signal< sc_lv<5> > tm_reg_360;
    sc_signal< sc_lv<64> > sum_cast_fu_481_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_weights_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_weights_ARREADY;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<2> > tmp_552_fu_386_p1;
    sc_signal< sc_lv<7> > p_shl3_fu_390_p3;
    sc_signal< sc_lv<8> > p_shl3_cast_fu_398_p1;
    sc_signal< sc_lv<11> > tmp_s_fu_402_p3;
    sc_signal< sc_lv<9> > p_shl_fu_414_p3;
    sc_signal< sc_lv<12> > m_cast_fu_426_p1;
    sc_signal< sc_lv<12> > tmp_cast_cast_fu_410_p1;
    sc_signal< sc_lv<12> > p_shl_cast_fu_422_p1;
    sc_signal< sc_lv<12> > tmp_fu_430_p2;
    sc_signal< sc_lv<6> > tm_cast_cast_fu_453_p1;
    sc_signal< sc_lv<32> > tmp_159_cast_fu_472_p1;
    sc_signal< sc_lv<32> > sum_fu_476_p2;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state1;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_state3;
    static const sc_lv<12> ap_ST_fsm_state4;
    static const sc_lv<12> ap_ST_fsm_state5;
    static const sc_lv<12> ap_ST_fsm_state6;
    static const sc_lv<12> ap_ST_fsm_state7;
    static const sc_lv<12> ap_ST_fsm_state8;
    static const sc_lv<12> ap_ST_fsm_state9;
    static const sc_lv<12> ap_ST_fsm_state10;
    static const sc_lv<12> ap_ST_fsm_pp0_stage0;
    static const sc_lv<12> ap_ST_fsm_state14;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_A;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<4> ap_const_lv4_D;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<12> ap_const_lv12_120;
    static const sc_lv<12> ap_const_lv12_9;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state11_pp0_stage0_iter0();
    void thread_ap_block_state12_pp0_stage0_iter1();
    void thread_ap_block_state13_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state11();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_weights_ARREADY();
    void thread_base_addr_d1_16_fu_491_p2();
    void thread_base_addr_d2_9_fu_509_p2();
    void thread_base_addr_fu_436_p2();
    void thread_exitcond1_fu_442_p2();
    void thread_exitcond_fu_497_p2();
    void thread_i_4_fu_503_p2();
    void thread_m_axi_weights_ARADDR();
    void thread_m_axi_weights_ARBURST();
    void thread_m_axi_weights_ARCACHE();
    void thread_m_axi_weights_ARID();
    void thread_m_axi_weights_ARLEN();
    void thread_m_axi_weights_ARLOCK();
    void thread_m_axi_weights_ARPROT();
    void thread_m_axi_weights_ARQOS();
    void thread_m_axi_weights_ARREGION();
    void thread_m_axi_weights_ARSIZE();
    void thread_m_axi_weights_ARUSER();
    void thread_m_axi_weights_ARVALID();
    void thread_m_axi_weights_AWADDR();
    void thread_m_axi_weights_AWBURST();
    void thread_m_axi_weights_AWCACHE();
    void thread_m_axi_weights_AWID();
    void thread_m_axi_weights_AWLEN();
    void thread_m_axi_weights_AWLOCK();
    void thread_m_axi_weights_AWPROT();
    void thread_m_axi_weights_AWQOS();
    void thread_m_axi_weights_AWREGION();
    void thread_m_axi_weights_AWSIZE();
    void thread_m_axi_weights_AWUSER();
    void thread_m_axi_weights_AWVALID();
    void thread_m_axi_weights_BREADY();
    void thread_m_axi_weights_RREADY();
    void thread_m_axi_weights_WDATA();
    void thread_m_axi_weights_WID();
    void thread_m_axi_weights_WLAST();
    void thread_m_axi_weights_WSTRB();
    void thread_m_axi_weights_WUSER();
    void thread_m_axi_weights_WVALID();
    void thread_m_cast_fu_426_p1();
    void thread_p_shl3_cast_fu_398_p1();
    void thread_p_shl3_fu_390_p3();
    void thread_p_shl_cast_fu_422_p1();
    void thread_p_shl_fu_414_p3();
    void thread_sum_cast_fu_481_p1();
    void thread_sum_fu_476_p2();
    void thread_tm_3_fu_462_p2();
    void thread_tm_cast_cast_fu_453_p1();
    void thread_tmp_10_fu_457_p2();
    void thread_tmp_159_cast_fu_472_p1();
    void thread_tmp_552_fu_386_p1();
    void thread_tmp_553_fu_468_p1();
    void thread_tmp_cast_cast_fu_410_p1();
    void thread_tmp_fu_430_p2();
    void thread_tmp_s_fu_402_p3();
    void thread_tn_5_fu_447_p2();
    void thread_weight_buffer_0_V_din();
    void thread_weight_buffer_0_V_write();
    void thread_weight_buffer_10_V_din();
    void thread_weight_buffer_10_V_write();
    void thread_weight_buffer_11_V_din();
    void thread_weight_buffer_11_V_write();
    void thread_weight_buffer_12_V_din();
    void thread_weight_buffer_12_V_write();
    void thread_weight_buffer_13_V_din();
    void thread_weight_buffer_13_V_write();
    void thread_weight_buffer_14_V_din();
    void thread_weight_buffer_14_V_write();
    void thread_weight_buffer_15_V_din();
    void thread_weight_buffer_15_V_write();
    void thread_weight_buffer_1_V_din();
    void thread_weight_buffer_1_V_write();
    void thread_weight_buffer_2_V_din();
    void thread_weight_buffer_2_V_write();
    void thread_weight_buffer_3_V_din();
    void thread_weight_buffer_3_V_write();
    void thread_weight_buffer_4_V_din();
    void thread_weight_buffer_4_V_write();
    void thread_weight_buffer_5_V_din();
    void thread_weight_buffer_5_V_write();
    void thread_weight_buffer_6_V_din();
    void thread_weight_buffer_6_V_write();
    void thread_weight_buffer_7_V_din();
    void thread_weight_buffer_7_V_write();
    void thread_weight_buffer_8_V_din();
    void thread_weight_buffer_8_V_write();
    void thread_weight_buffer_9_V_din();
    void thread_weight_buffer_9_V_write();
    void thread_weight_cntl_V_din();
    void thread_weight_cntl_V_write();
    void thread_weights_blk_n_AR();
    void thread_weights_blk_n_R();
    void thread_weights_offset_cast_fu_382_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
