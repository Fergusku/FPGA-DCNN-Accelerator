// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module copy_input_fmem2buff_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY,
        m_axi_inputs_AWADDR,
        m_axi_inputs_AWID,
        m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID,
        m_axi_inputs_WREADY,
        m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST,
        m_axi_inputs_WID,
        m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY,
        m_axi_inputs_ARADDR,
        m_axi_inputs_ARID,
        m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID,
        m_axi_inputs_RREADY,
        m_axi_inputs_RDATA,
        m_axi_inputs_RLAST,
        m_axi_inputs_RID,
        m_axi_inputs_RUSER,
        m_axi_inputs_RRESP,
        m_axi_inputs_BVALID,
        m_axi_inputs_BREADY,
        m_axi_inputs_BRESP,
        m_axi_inputs_BID,
        m_axi_inputs_BUSER,
        inputs_offset,
        inputs_offset1,
        input_buffer_V_din,
        input_buffer_V_full_n,
        input_buffer_V_write,
        n,
        r,
        c,
        nLoops,
        rLoops,
        cLoops,
        input_cntl_V_din,
        input_cntl_V_full_n,
        input_cntl_V_write
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_pp0_stage0 = 30'd1024;
parameter    ap_ST_fsm_state14 = 30'd2048;
parameter    ap_ST_fsm_state15 = 30'd4096;
parameter    ap_ST_fsm_state16 = 30'd8192;
parameter    ap_ST_fsm_state17 = 30'd16384;
parameter    ap_ST_fsm_state18 = 30'd32768;
parameter    ap_ST_fsm_state19 = 30'd65536;
parameter    ap_ST_fsm_state20 = 30'd131072;
parameter    ap_ST_fsm_state21 = 30'd262144;
parameter    ap_ST_fsm_pp1_stage0 = 30'd524288;
parameter    ap_ST_fsm_state25 = 30'd1048576;
parameter    ap_ST_fsm_state26 = 30'd2097152;
parameter    ap_ST_fsm_state27 = 30'd4194304;
parameter    ap_ST_fsm_state28 = 30'd8388608;
parameter    ap_ST_fsm_state29 = 30'd16777216;
parameter    ap_ST_fsm_state30 = 30'd33554432;
parameter    ap_ST_fsm_state31 = 30'd67108864;
parameter    ap_ST_fsm_pp2_stage0 = 30'd134217728;
parameter    ap_ST_fsm_state35 = 30'd268435456;
parameter    ap_ST_fsm_state36 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_inputs_AWVALID;
input   m_axi_inputs_AWREADY;
output  [31:0] m_axi_inputs_AWADDR;
output  [0:0] m_axi_inputs_AWID;
output  [31:0] m_axi_inputs_AWLEN;
output  [2:0] m_axi_inputs_AWSIZE;
output  [1:0] m_axi_inputs_AWBURST;
output  [1:0] m_axi_inputs_AWLOCK;
output  [3:0] m_axi_inputs_AWCACHE;
output  [2:0] m_axi_inputs_AWPROT;
output  [3:0] m_axi_inputs_AWQOS;
output  [3:0] m_axi_inputs_AWREGION;
output  [0:0] m_axi_inputs_AWUSER;
output   m_axi_inputs_WVALID;
input   m_axi_inputs_WREADY;
output  [15:0] m_axi_inputs_WDATA;
output  [1:0] m_axi_inputs_WSTRB;
output   m_axi_inputs_WLAST;
output  [0:0] m_axi_inputs_WID;
output  [0:0] m_axi_inputs_WUSER;
output   m_axi_inputs_ARVALID;
input   m_axi_inputs_ARREADY;
output  [31:0] m_axi_inputs_ARADDR;
output  [0:0] m_axi_inputs_ARID;
output  [31:0] m_axi_inputs_ARLEN;
output  [2:0] m_axi_inputs_ARSIZE;
output  [1:0] m_axi_inputs_ARBURST;
output  [1:0] m_axi_inputs_ARLOCK;
output  [3:0] m_axi_inputs_ARCACHE;
output  [2:0] m_axi_inputs_ARPROT;
output  [3:0] m_axi_inputs_ARQOS;
output  [3:0] m_axi_inputs_ARREGION;
output  [0:0] m_axi_inputs_ARUSER;
input   m_axi_inputs_RVALID;
output   m_axi_inputs_RREADY;
input  [15:0] m_axi_inputs_RDATA;
input   m_axi_inputs_RLAST;
input  [0:0] m_axi_inputs_RID;
input  [0:0] m_axi_inputs_RUSER;
input  [1:0] m_axi_inputs_RRESP;
input   m_axi_inputs_BVALID;
output   m_axi_inputs_BREADY;
input  [1:0] m_axi_inputs_BRESP;
input  [0:0] m_axi_inputs_BID;
input  [0:0] m_axi_inputs_BUSER;
input  [30:0] inputs_offset;
input  [17:0] inputs_offset1;
output  [15:0] input_buffer_V_din;
input   input_buffer_V_full_n;
output   input_buffer_V_write;
input  [7:0] n;
input  [5:0] r;
input  [5:0] c;
input  [1:0] nLoops;
input  [5:0] rLoops;
input  [5:0] cLoops;
output   input_cntl_V_din;
input   input_cntl_V_full_n;
output   input_cntl_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_inputs_ARVALID;
reg[31:0] m_axi_inputs_ARADDR;
reg[31:0] m_axi_inputs_ARLEN;
reg m_axi_inputs_RREADY;
reg[15:0] input_buffer_V_din;
reg input_buffer_V_write;
reg input_cntl_V_write;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inputs_blk_n_AR;
wire    ap_CS_fsm_state25;
reg    inputs_blk_n_R;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond5_reg_709;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_122_reg_700;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_681;
reg   [4:0] i8_reg_284;
reg   [4:0] i6_reg_295;
reg   [4:0] i5_reg_306;
reg   [15:0] reg_328;
wire    ap_block_state11_pp0_stage0_iter0;
reg    ap_block_state12_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_state22_pp1_stage0_iter0;
reg    ap_block_state23_pp1_stage0_iter1;
wire    ap_block_state24_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [31:0] inputs_offset_cast_fu_333_p1;
reg   [31:0] inputs_offset_cast_reg_603;
wire   [17:0] base_addr1_fu_365_p2;
wire   [17:0] base_addr2_fu_375_p2;
wire   [0:0] tmp_108_fu_381_p2;
reg   [0:0] tmp_108_reg_619;
reg   [0:0] tmp_597_reg_623;
wire   [18:0] inputs_offset_cast_c_fu_401_p1;
reg   [18:0] inputs_offset_cast_c_reg_627;
wire   [31:0] tmp_110_fu_405_p1;
reg   [31:0] tmp_110_reg_633;
wire   [1:0] tn_14_fu_414_p2;
reg   [1:0] tn_14_reg_641;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_112_fu_424_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] tr_4_fu_429_p2;
reg   [4:0] tr_4_reg_650;
wire   [0:0] tmp_598_fu_440_p3;
reg   [31:0] inputs_addr_5_reg_659;
reg   [31:0] inputs_addr_reg_665;
wire   [17:0] base_addr1_d1_3_fu_504_p2;
wire   [17:0] base_addr2_d1_3_fu_510_p2;
wire   [0:0] exitcond_fu_516_p2;
reg   [0:0] exitcond_reg_681_pp0_iter1_reg;
wire   [4:0] i_6_fu_522_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [17:0] base_addr1_d2_3_fu_528_p2;
wire    ap_CS_fsm_state14;
wire   [17:0] base_addr2_d2_3_fu_534_p2;
wire   [0:0] tmp_122_fu_544_p2;
reg   [0:0] tmp_122_reg_700_pp1_iter1_reg;
wire   [4:0] i_5_fu_549_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond5_fu_555_p2;
wire    ap_block_state32_pp2_stage0_iter0;
reg    ap_block_state33_pp2_stage0_iter1;
wire    ap_block_state34_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [0:0] exitcond5_reg_709_pp2_iter1_reg;
wire   [4:0] i_4_fu_561_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [15:0] tmp_599_reg_718;
wire   [4:0] i_s_fu_576_p2;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state10;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state11;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state21;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state22;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state31;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state32;
reg    ap_enable_reg_pp2_iter2;
reg   [17:0] base_addr1_d2_reg_220;
reg   [17:0] base_addr2_d2_reg_230;
reg   [1:0] tn_reg_240;
reg   [17:0] base_addr1_d_reg_251;
wire   [0:0] exitcond1_fu_409_p2;
reg   [17:0] base_addr2_d_reg_262;
reg   [4:0] tr_reg_273;
reg   [4:0] i_reg_317;
wire   [0:0] tmp_115_fu_571_p2;
wire   [63:0] sum9_cast_fu_466_p1;
wire   [63:0] sum3_cast_fu_494_p1;
reg    ap_reg_ioackin_m_axi_inputs_ARREADY;
reg    ap_sig_ioackin_m_axi_inputs_ARREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_pp2_stage0_01001;
wire   [6:0] tmp_596_fu_337_p1;
wire   [16:0] tmp_fu_341_p3;
wire   [10:0] tmp_s_fu_353_p3;
wire   [17:0] tmp_cast_fu_349_p1;
wire   [17:0] tmp_cast_179_fu_361_p1;
wire   [17:0] c_cast5_fu_371_p1;
wire   [5:0] tmp_109_fu_387_p2;
wire   [5:0] tr_cast_cast_fu_420_p1;
wire   [5:0] tmp_114_fu_435_p2;
wire   [18:0] tmp_118_fu_448_p1;
wire   [18:0] tmp_119_fu_452_p2;
wire   [31:0] tmp_255_cast_fu_457_p1;
wire   [31:0] sum9_fu_461_p2;
wire   [18:0] tmp_116_fu_476_p1;
wire   [18:0] tmp_117_fu_480_p2;
wire   [31:0] tmp_252_cast_fu_485_p1;
wire   [31:0] sum3_fu_489_p2;
wire   [5:0] i6_cast_cast_fu_540_p1;
wire   [5:0] i_cast_fu_567_p1;
reg   [29:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_reg_ioackin_m_axi_inputs_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state11)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state22) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state22)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state22);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state32) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state32)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_inputs_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_m_axi_inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_sig_ioackin_m_axi_inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((ap_sig_ioackin_m_axi_inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
            ap_reg_ioackin_m_axi_inputs_ARREADY <= 1'b0;
        end else if ((((m_axi_inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((m_axi_inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
            ap_reg_ioackin_m_axi_inputs_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_112_fu_424_p2 == 1'd0))) begin
        base_addr1_d2_reg_220 <= base_addr1_d1_3_fu_504_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        base_addr1_d2_reg_220 <= base_addr1_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        base_addr1_d_reg_251 <= base_addr1_d2_3_fu_528_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_409_p2 == 1'd0))) begin
        base_addr1_d_reg_251 <= base_addr1_d2_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_112_fu_424_p2 == 1'd0))) begin
        base_addr2_d2_reg_230 <= base_addr2_d1_3_fu_510_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        base_addr2_d2_reg_230 <= base_addr2_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        base_addr2_d_reg_262 <= base_addr2_d2_3_fu_534_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_409_p2 == 1'd0))) begin
        base_addr2_d_reg_262 <= base_addr2_d2_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i5_reg_306 <= 5'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond5_fu_555_p2 == 1'd0))) begin
        i5_reg_306 <= i_4_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i6_reg_295 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_122_fu_544_p2 == 1'd1))) begin
        i6_reg_295 <= i_5_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i8_reg_284 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_fu_516_p2 == 1'd0))) begin
        i8_reg_284 <= i_6_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_598_fu_440_p3 == 1'd1) & (tmp_112_fu_424_p2 == 1'd1))) begin
        i_reg_317 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state35) & (tmp_115_fu_571_p2 == 1'd1))) begin
        i_reg_317 <= i_s_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_112_fu_424_p2 == 1'd0))) begin
        tn_reg_240 <= tn_14_reg_641;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tn_reg_240 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tr_reg_273 <= tr_4_reg_650;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_409_p2 == 1'd0))) begin
        tr_reg_273 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond5_reg_709 <= exitcond5_fu_555_p2;
        exitcond5_reg_709_pp2_iter1_reg <= exitcond5_reg_709;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_681 <= exitcond_fu_516_p2;
        exitcond_reg_681_pp0_iter1_reg <= exitcond_reg_681;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_112_fu_424_p2 == 1'd1) & (tmp_598_fu_440_p3 == 1'd0) & (tmp_108_reg_619 == 1'd0))) begin
        inputs_addr_5_reg_659 <= sum9_cast_fu_466_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_112_fu_424_p2 == 1'd1) & (tmp_108_reg_619 == 1'd1) & (tmp_598_fu_440_p3 == 1'd0))) begin
        inputs_addr_reg_665 <= sum3_cast_fu_494_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        inputs_offset_cast_c_reg_627[17 : 0] <= inputs_offset_cast_c_fu_401_p1[17 : 0];
        inputs_offset_cast_reg_603[30 : 0] <= inputs_offset_cast_fu_333_p1[30 : 0];
        tmp_108_reg_619 <= tmp_108_fu_381_p2;
        tmp_110_reg_633[5 : 0] <= tmp_110_fu_405_p1[5 : 0];
        tmp_597_reg_623 <= tmp_109_fu_387_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_681 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_122_reg_700 == 1'd1)))) begin
        reg_328 <= m_axi_inputs_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_122_reg_700 <= tmp_122_fu_544_p2;
        tmp_122_reg_700_pp1_iter1_reg <= tmp_122_reg_700;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond5_reg_709 == 1'd0))) begin
        tmp_599_reg_718 <= m_axi_inputs_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tn_14_reg_641 <= tn_14_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tr_4_reg_650 <= tr_4_fu_429_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_516_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_122_fu_544_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state22 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state22 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_555_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_409_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_409_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_inputs_ARREADY = m_axi_inputs_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_inputs_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & (tmp_115_fu_571_p2 == 1'd1))) begin
        input_buffer_V_din = 16'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_01001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond5_reg_709_pp2_iter1_reg == 1'd0))) begin
        input_buffer_V_din = tmp_599_reg_718;
    end else if ((((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_122_reg_700_pp1_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_reg_681_pp0_iter1_reg == 1'd0)))) begin
        input_buffer_V_din = reg_328;
    end else begin
        input_buffer_V_din = 'bx;
    end
end

always @ (*) begin
    if (((input_buffer_V_full_n == 1'b1) & (((input_buffer_V_full_n == 1'b1) & (((input_buffer_V_full_n == 1'b1) & (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_122_reg_700_pp1_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (input_buffer_V_full_n == 1'b1) & (exitcond_reg_681_pp0_iter1_reg == 1'd0)))) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond5_reg_709_pp2_iter1_reg == 1'd0)))) | ((1'b1 == ap_CS_fsm_state35) & (tmp_115_fu_571_p2 == 1'd1))))) begin
        input_buffer_V_write = 1'b1;
    end else begin
        input_buffer_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (input_cntl_V_full_n == 1'b1) & (exitcond1_fu_409_p2 == 1'd1))) begin
        input_cntl_V_write = 1'b1;
    end else begin
        input_cntl_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        inputs_blk_n_AR = m_axi_inputs_ARREADY;
    end else begin
        inputs_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_reg_681 == 1'd0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_122_reg_700 == 1'd1) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (exitcond5_reg_709 == 1'd0)))) begin
        inputs_blk_n_R = m_axi_inputs_RVALID;
    end else begin
        inputs_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25))) begin
        m_axi_inputs_ARADDR = inputs_addr_reg_665;
    end else if ((((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)))) begin
        m_axi_inputs_ARADDR = inputs_addr_5_reg_659;
    end else begin
        m_axi_inputs_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
        m_axi_inputs_ARLEN = tmp_110_reg_633;
    end else if ((((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)))) begin
        m_axi_inputs_ARLEN = 32'd16;
    end else begin
        m_axi_inputs_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state15)) | ((ap_reg_ioackin_m_axi_inputs_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state25)))) begin
        m_axi_inputs_ARVALID = 1'b1;
    end else begin
        m_axi_inputs_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_681 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_122_reg_700 == 1'd1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond5_reg_709 == 1'd0)))) begin
        m_axi_inputs_RREADY = 1'b1;
    end else begin
        m_axi_inputs_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_409_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_112_fu_424_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_598_fu_440_p3 == 1'd1) & (tmp_112_fu_424_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_112_fu_424_p2 == 1'd1) & (tmp_597_reg_623 == 1'd1) & (tmp_598_fu_440_p3 == 1'd0) & (tmp_108_reg_619 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_112_fu_424_p2 == 1'd1) & (tmp_598_fu_440_p3 == 1'd0) & (tmp_597_reg_623 == 1'd0) & (tmp_108_reg_619 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_m_axi_inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_fu_516_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_fu_516_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state15 : begin
            if (((ap_sig_ioackin_m_axi_inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_122_fu_544_p2 == 1'd0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_122_fu_544_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((ap_sig_ioackin_m_axi_inputs_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond5_fu_555_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond5_fu_555_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (tmp_115_fu_571_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_inputs_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_reg_681 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_inputs_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_reg_681 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_inputs_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_reg_681 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((m_axi_inputs_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (tmp_122_reg_700 == 1'd1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_inputs_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (tmp_122_reg_700 == 1'd1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_inputs_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (tmp_122_reg_700 == 1'd1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((m_axi_inputs_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond5_reg_709 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((m_axi_inputs_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond5_reg_709 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((m_axi_inputs_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond5_reg_709 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter1 = ((m_axi_inputs_RVALID == 1'b0) & (exitcond_reg_681 == 1'd0));
end

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp1_stage0_iter1 = ((m_axi_inputs_RVALID == 1'b0) & (tmp_122_reg_700 == 1'd1));
end

assign ap_block_state24_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33_pp2_stage0_iter1 = ((m_axi_inputs_RVALID == 1'b0) & (exitcond5_reg_709 == 1'd0));
end

assign ap_block_state34_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign base_addr1_d1_3_fu_504_p2 = (base_addr1_d2_reg_220 + 18'd1024);

assign base_addr1_d2_3_fu_528_p2 = (base_addr1_d_reg_251 + 18'd32);

assign base_addr1_fu_365_p2 = (tmp_cast_fu_349_p1 + tmp_cast_179_fu_361_p1);

assign base_addr2_d1_3_fu_510_p2 = (base_addr2_d2_reg_230 + 18'd1024);

assign base_addr2_d2_3_fu_534_p2 = (base_addr2_d_reg_262 + 18'd32);

assign base_addr2_fu_375_p2 = (c_cast5_fu_371_p1 + base_addr1_fu_365_p2);

assign c_cast5_fu_371_p1 = c;

assign exitcond1_fu_409_p2 = ((tn_reg_240 == nLoops) ? 1'b1 : 1'b0);

assign exitcond5_fu_555_p2 = ((i5_reg_306 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_516_p2 = ((i8_reg_284 == 5'd16) ? 1'b1 : 1'b0);

assign i6_cast_cast_fu_540_p1 = i6_reg_295;

assign i_4_fu_561_p2 = (i5_reg_306 + 5'd1);

assign i_5_fu_549_p2 = (i6_reg_295 + 5'd1);

assign i_6_fu_522_p2 = (i8_reg_284 + 5'd1);

assign i_cast_fu_567_p1 = i_reg_317;

assign i_s_fu_576_p2 = (i_reg_317 + 5'd1);

assign input_cntl_V_din = 1'd0;

assign inputs_offset_cast_c_fu_401_p1 = inputs_offset1;

assign inputs_offset_cast_fu_333_p1 = inputs_offset;

assign m_axi_inputs_ARBURST = 2'd0;

assign m_axi_inputs_ARCACHE = 4'd0;

assign m_axi_inputs_ARID = 1'd0;

assign m_axi_inputs_ARLOCK = 2'd0;

assign m_axi_inputs_ARPROT = 3'd0;

assign m_axi_inputs_ARQOS = 4'd0;

assign m_axi_inputs_ARREGION = 4'd0;

assign m_axi_inputs_ARSIZE = 3'd0;

assign m_axi_inputs_ARUSER = 1'd0;

assign m_axi_inputs_AWADDR = 32'd0;

assign m_axi_inputs_AWBURST = 2'd0;

assign m_axi_inputs_AWCACHE = 4'd0;

assign m_axi_inputs_AWID = 1'd0;

assign m_axi_inputs_AWLEN = 32'd0;

assign m_axi_inputs_AWLOCK = 2'd0;

assign m_axi_inputs_AWPROT = 3'd0;

assign m_axi_inputs_AWQOS = 4'd0;

assign m_axi_inputs_AWREGION = 4'd0;

assign m_axi_inputs_AWSIZE = 3'd0;

assign m_axi_inputs_AWUSER = 1'd0;

assign m_axi_inputs_AWVALID = 1'b0;

assign m_axi_inputs_BREADY = 1'b0;

assign m_axi_inputs_WDATA = 16'd0;

assign m_axi_inputs_WID = 1'd0;

assign m_axi_inputs_WLAST = 1'b0;

assign m_axi_inputs_WSTRB = 2'd0;

assign m_axi_inputs_WUSER = 1'd0;

assign m_axi_inputs_WVALID = 1'b0;

assign sum3_cast_fu_494_p1 = sum3_fu_489_p2;

assign sum3_fu_489_p2 = (inputs_offset_cast_reg_603 + tmp_252_cast_fu_485_p1);

assign sum9_cast_fu_466_p1 = sum9_fu_461_p2;

assign sum9_fu_461_p2 = (inputs_offset_cast_reg_603 + tmp_255_cast_fu_457_p1);

assign tmp_108_fu_381_p2 = ((c == 6'd0) ? 1'b1 : 1'b0);

assign tmp_109_fu_387_p2 = (6'd16 + c);

assign tmp_110_fu_405_p1 = cLoops;

assign tmp_112_fu_424_p2 = (($signed(tr_cast_cast_fu_420_p1) < $signed(rLoops)) ? 1'b1 : 1'b0);

assign tmp_114_fu_435_p2 = (tr_cast_cast_fu_420_p1 + r);

assign tmp_115_fu_571_p2 = (($signed(i_cast_fu_567_p1) < $signed(cLoops)) ? 1'b1 : 1'b0);

assign tmp_116_fu_476_p1 = base_addr1_d_reg_251;

assign tmp_117_fu_480_p2 = (inputs_offset_cast_c_reg_627 + tmp_116_fu_476_p1);

assign tmp_118_fu_448_p1 = base_addr2_d_reg_262;

assign tmp_119_fu_452_p2 = (inputs_offset_cast_c_reg_627 + tmp_118_fu_448_p1);

assign tmp_122_fu_544_p2 = (($signed(i6_cast_cast_fu_540_p1) < $signed(cLoops)) ? 1'b1 : 1'b0);

assign tmp_252_cast_fu_485_p1 = tmp_117_fu_480_p2;

assign tmp_255_cast_fu_457_p1 = tmp_119_fu_452_p2;

assign tmp_596_fu_337_p1 = n[6:0];

assign tmp_598_fu_440_p3 = tmp_114_fu_435_p2[32'd5];

assign tmp_cast_179_fu_361_p1 = tmp_s_fu_353_p3;

assign tmp_cast_fu_349_p1 = tmp_fu_341_p3;

assign tmp_fu_341_p3 = {{tmp_596_fu_337_p1}, {10'd0}};

assign tmp_s_fu_353_p3 = {{r}, {5'd0}};

assign tn_14_fu_414_p2 = (tn_reg_240 + 2'd1);

assign tr_4_fu_429_p2 = (tr_reg_273 + 5'd1);

assign tr_cast_cast_fu_420_p1 = tr_reg_273;

always @ (posedge ap_clk) begin
    inputs_offset_cast_reg_603[31] <= 1'b0;
    inputs_offset_cast_c_reg_627[18] <= 1'b0;
    tmp_110_reg_633[31:6] <= 26'b00000000000000000000000000;
end

endmodule //copy_input_fmem2buff_3
