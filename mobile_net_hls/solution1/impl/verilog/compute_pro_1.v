// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_pro_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_buffer_V_dout,
        input_buffer_V_empty_n,
        input_buffer_V_read,
        weight_buffer_V_dout,
        weight_buffer_V_empty_n,
        weight_buffer_V_read,
        beta_buffer_V_dout,
        beta_buffer_V_empty_n,
        beta_buffer_V_read,
        output_buffer_V_din,
        output_buffer_V_full_n,
        output_buffer_V_write,
        data_buffer_V_dout,
        data_buffer_V_empty_n,
        data_buffer_V_read,
        result_buffer_V_din,
        result_buffer_V_full_n,
        result_buffer_V_write,
        data_m_V_dout,
        data_m_V_empty_n,
        data_m_V_read,
        data_n_V_dout,
        data_n_V_empty_n,
        data_n_V_read,
        result_m_V_din,
        result_m_V_full_n,
        result_m_V_write,
        result_n_V_din,
        result_n_V_full_n,
        result_n_V_write
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] input_buffer_V_dout;
input   input_buffer_V_empty_n;
output   input_buffer_V_read;
input  [15:0] weight_buffer_V_dout;
input   weight_buffer_V_empty_n;
output   weight_buffer_V_read;
input  [15:0] beta_buffer_V_dout;
input   beta_buffer_V_empty_n;
output   beta_buffer_V_read;
output  [15:0] output_buffer_V_din;
input   output_buffer_V_full_n;
output   output_buffer_V_write;
input   data_buffer_V_dout;
input   data_buffer_V_empty_n;
output   data_buffer_V_read;
output   result_buffer_V_din;
input   result_buffer_V_full_n;
output   result_buffer_V_write;
input  [31:0] data_m_V_dout;
input   data_m_V_empty_n;
output   data_m_V_read;
input  [31:0] data_n_V_dout;
input   data_n_V_empty_n;
output   data_n_V_read;
output  [31:0] result_m_V_din;
input   result_m_V_full_n;
output   result_m_V_write;
output  [31:0] result_n_V_din;
input   result_n_V_full_n;
output   result_n_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_buffer_V_read;
reg weight_buffer_V_read;
reg beta_buffer_V_read;
reg[15:0] output_buffer_V_din;
reg output_buffer_V_write;
reg data_buffer_V_read;
reg result_buffer_V_write;
reg data_m_V_read;
reg data_n_V_read;
reg result_m_V_write;
reg result_n_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] tmp_1339_reg_437;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_nbreadreq_fu_110_p3;
wire   [0:0] tmp_35_nbwritereq_fu_118_p3;
reg   [31:0] tmp_1338_reg_445;
wire    ap_CS_fsm_state4;
wire   [31:0] mLoops_fu_304_p3;
reg   [31:0] mLoops_reg_450;
wire   [31:0] nLoops_fu_323_p3;
reg   [31:0] nLoops_reg_455;
wire   [0:0] tmp_39_fu_331_p2;
reg   [0:0] tmp_39_reg_460;
wire   [0:0] icmp_fu_351_p2;
reg   [0:0] icmp_reg_464;
wire   [30:0] tm_2_fu_366_p2;
reg   [30:0] tm_2_reg_471;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_44_fu_372_p2;
reg   [0:0] tmp_44_reg_476;
wire   [0:0] tmp_42_fu_361_p2;
wire   [5:0] tn_2_fu_392_p2;
reg   [5:0] tn_2_reg_486;
wire    ap_CS_fsm_state6;
reg   [1:0] output_temp_addr_reg_491;
wire   [0:0] tmp_45_fu_387_p2;
reg   [15:0] tmp_1342_reg_497;
reg   [15:0] tmp_1341_reg_502;
wire    ap_CS_fsm_state7;
wire   [15:0] input_regs_q0;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_fu_277_p2;
reg   [15:0] mul_dat_reg_517;
wire    ap_CS_fsm_state11;
wire   [15:0] grp_fu_272_p2;
wire    ap_CS_fsm_state15;
wire   [15:0] output_temp_q0;
reg   [15:0] output_temp_load_reg_527;
wire    ap_CS_fsm_state16;
reg   [15:0] tmp_51_reg_532;
wire    ap_CS_fsm_state20;
reg   [15:0] tmp_49_reg_538;
wire    ap_CS_fsm_state25;
wire   [4:0] input_regs_address0;
reg    input_regs_ce0;
wire   [4:0] input_regs_address1;
reg    input_regs_ce1;
reg    input_regs_we1;
wire   [1:0] output_temp_address0;
reg    output_temp_ce0;
reg   [1:0] output_temp_address1;
reg    output_temp_ce1;
reg    output_temp_we1;
reg   [15:0] output_temp_d1;
reg   [30:0] tm_reg_236;
wire    ap_CS_fsm_state21;
reg   [15:0] mac_dat_reg_248;
reg   [5:0] tn_reg_260;
wire   [63:0] tmp_47_fu_398_p1;
wire   [63:0] tmp_50_fu_408_p1;
wire   [63:0] tmp_48_fu_421_p1;
wire   [63:0] tmp_52_fu_426_p1;
wire    ap_CS_fsm_state26;
wire   [0:0] tmp_1340_fu_378_p1;
reg   [15:0] grp_fu_272_p0;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state22;
wire   [0:0] tmp_1336_fu_290_p3;
wire   [31:0] tmp_36_fu_298_p2;
wire   [31:0] tmp_37_fu_312_p2;
wire   [0:0] tmp_38_fu_317_p2;
wire   [31:0] tmp_40_fu_336_p2;
wire   [22:0] tmp_1337_fu_341_p4;
wire   [31:0] tm_cast_fu_357_p1;
wire   [31:0] tn_cast_fu_383_p1;
reg   [25:0] ap_NS_fsm;
reg    ap_block_state1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 26'd1;
end

compute_pro_1_inpcmv #(
    .DataWidth( 16 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
input_regs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_regs_address0),
    .ce0(input_regs_ce0),
    .q0(input_regs_q0),
    .address1(input_regs_address1),
    .ce1(input_regs_ce1),
    .we1(input_regs_we1),
    .d1(input_buffer_V_dout)
);

compute_pro_1_outcnw #(
    .DataWidth( 16 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
output_temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_temp_address0),
    .ce0(output_temp_ce0),
    .q0(output_temp_q0),
    .address1(output_temp_address1),
    .ce1(output_temp_ce1),
    .we1(output_temp_we1),
    .d1(output_temp_d1)
);

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U2945(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_272_p0),
    .din1(mac_dat_reg_248),
    .ce(1'b1),
    .dout(grp_fu_272_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U2946(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_q0),
    .din1(tmp_1341_reg_502),
    .ce(1'b1),
    .dout(grp_fu_277_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_1340_fu_378_p1 == 1'd0) & (tmp_42_fu_361_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mac_dat_reg_248 <= grp_fu_272_p2;
    end else if (((tmp_42_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mac_dat_reg_248 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tm_reg_236 <= tm_2_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tm_reg_236 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tn_reg_260 <= tn_2_reg_486;
    end else if (((tmp_42_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tn_reg_260 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_reg_464 <= icmp_fu_351_p2;
        mLoops_reg_450 <= mLoops_fu_304_p3;
        nLoops_reg_455 <= nLoops_fu_323_p3;
        tmp_1338_reg_445 <= data_m_V_dout;
        tmp_39_reg_460 <= tmp_39_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_dat_reg_517 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_45_fu_387_p2 == 1'd0) & (tmp_39_reg_460 == 1'd0))) begin
        output_temp_addr_reg_491 <= tmp_50_fu_408_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_temp_load_reg_527 <= output_temp_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tm_2_reg_471 <= tm_2_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_35_nbwritereq_fu_118_p3 == 1'd1) & (tmp_nbreadreq_fu_110_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_1339_reg_437 <= data_n_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1341_reg_502 <= weight_buffer_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_39_reg_460 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (tmp_45_fu_387_p2 == 1'd0))) begin
        tmp_1342_reg_497 <= beta_buffer_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_42_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_44_reg_476 <= tmp_44_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_49_reg_538 <= grp_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_51_reg_532 <= grp_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tn_2_reg_486 <= tn_2_fu_392_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_1340_fu_378_p1 == 1'd0) & (tmp_42_fu_361_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_1340_fu_378_p1 == 1'd0) & (tmp_42_fu_361_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_39_reg_460 == 1'd1) & (beta_buffer_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6) & (tmp_45_fu_387_p2 == 1'd0))) begin
        beta_buffer_V_read = 1'b1;
    end else begin
        beta_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((data_buffer_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (tmp_42_fu_361_p2 == 1'd0))) begin
        data_buffer_V_read = 1'b1;
    end else begin
        data_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((data_m_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        data_m_V_read = 1'b1;
    end else begin
        data_m_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_35_nbwritereq_fu_118_p3 == 1'd1) & (tmp_nbreadreq_fu_110_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (data_n_V_empty_n == 1'b1))) begin
        data_n_V_read = 1'b1;
    end else begin
        data_n_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_272_p0 = tmp_1342_reg_497;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_272_p0 = output_temp_load_reg_527;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_272_p0 = mul_dat_reg_517;
    end else begin
        grp_fu_272_p0 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_45_fu_387_p2 == 1'd1) & (tmp_44_reg_476 == 1'd1) & (input_buffer_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        input_buffer_V_read = 1'b1;
    end else begin
        input_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_regs_ce0 = 1'b1;
    end else begin
        input_regs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_regs_ce1 = 1'b1;
    end else begin
        input_regs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_45_fu_387_p2 == 1'd1) & (tmp_44_reg_476 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        input_regs_we1 = 1'b1;
    end else begin
        input_regs_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_reg_464 == 1'd1)) begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            output_buffer_V_din = tmp_49_reg_538;
        end else if (((1'b1 == ap_CS_fsm_state21) & (tmp_39_reg_460 == 1'd0))) begin
            output_buffer_V_din = tmp_51_reg_532;
        end else begin
            output_buffer_V_din = 'bx;
        end
    end else begin
        output_buffer_V_din = 'bx;
    end
end

always @ (*) begin
    if (((output_buffer_V_full_n == 1'b1) & (((icmp_reg_464 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((icmp_reg_464 == 1'd1) & (output_buffer_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21) & (tmp_39_reg_460 == 1'd0))))) begin
        output_buffer_V_write = 1'b1;
    end else begin
        output_buffer_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        output_temp_address1 = tmp_52_fu_426_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_temp_address1 = output_temp_addr_reg_491;
    end else begin
        output_temp_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_temp_ce0 = 1'b1;
    end else begin
        output_temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state21))) begin
        output_temp_ce1 = 1'b1;
    end else begin
        output_temp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        output_temp_d1 = tmp_49_reg_538;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_temp_d1 = tmp_51_reg_532;
    end else begin
        output_temp_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state26) & (icmp_reg_464 == 1'd0)) | ((1'b1 == ap_CS_fsm_state21) & (icmp_reg_464 == 1'd0) & (tmp_39_reg_460 == 1'd0)))) begin
        output_temp_we1 = 1'b1;
    end else begin
        output_temp_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((result_buffer_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (tmp_42_fu_361_p2 == 1'd0))) begin
        result_buffer_V_write = 1'b1;
    end else begin
        result_buffer_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((result_m_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (tmp_42_fu_361_p2 == 1'd0))) begin
        result_m_V_write = 1'b1;
    end else begin
        result_m_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((result_n_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5) & (tmp_42_fu_361_p2 == 1'd0))) begin
        result_n_V_write = 1'b1;
    end else begin
        result_n_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((weight_buffer_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_buffer_V_read = 1'b1;
    end else begin
        weight_buffer_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((tmp_35_nbwritereq_fu_118_p3 == 1'd0) | (tmp_nbreadreq_fu_110_p3 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_1340_fu_378_p1 == 1'd0) & (tmp_42_fu_361_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((tmp_1340_fu_378_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_42_fu_361_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_39_reg_460 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (tmp_45_fu_387_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_45_fu_387_p2 == 1'd0) & (tmp_39_reg_460 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign icmp_fu_351_p2 = (($signed(tmp_1337_fu_341_p4) > $signed(23'd0)) ? 1'b1 : 1'b0);

assign input_regs_address0 = tmp_48_fu_421_p1;

assign input_regs_address1 = tmp_47_fu_398_p1;

assign mLoops_fu_304_p3 = ((tmp_1336_fu_290_p3[0:0] === 1'b1) ? 32'd4 : tmp_36_fu_298_p2);

assign nLoops_fu_323_p3 = ((tmp_38_fu_317_p2[0:0] === 1'b1) ? 32'd32 : tmp_37_fu_312_p2);

assign output_temp_address0 = tmp_50_fu_408_p1;

assign result_buffer_V_din = data_buffer_V_dout;

assign result_m_V_din = tmp_1338_reg_445;

assign result_n_V_din = tmp_1339_reg_437;

assign tm_2_fu_366_p2 = (tm_reg_236 + 31'd1);

assign tm_cast_fu_357_p1 = tm_reg_236;

assign tmp_1336_fu_290_p3 = data_m_V_dout[32'd31];

assign tmp_1337_fu_341_p4 = {{tmp_40_fu_336_p2[31:9]}};

assign tmp_1340_fu_378_p1 = data_buffer_V_dout;

assign tmp_35_nbwritereq_fu_118_p3 = result_buffer_V_full_n;

assign tmp_36_fu_298_p2 = (32'd4 - data_m_V_dout);

assign tmp_37_fu_312_p2 = (32'd512 - tmp_1339_reg_437);

assign tmp_38_fu_317_p2 = (($signed(tmp_37_fu_312_p2) > $signed(32'd32)) ? 1'b1 : 1'b0);

assign tmp_39_fu_331_p2 = (($signed(tmp_1339_reg_437) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign tmp_40_fu_336_p2 = (tmp_1339_reg_437 + 32'd32);

assign tmp_42_fu_361_p2 = (($signed(tm_cast_fu_357_p1) < $signed(mLoops_reg_450)) ? 1'b1 : 1'b0);

assign tmp_44_fu_372_p2 = ((tm_reg_236 == 31'd0) ? 1'b1 : 1'b0);

assign tmp_45_fu_387_p2 = (($signed(tn_cast_fu_383_p1) < $signed(nLoops_reg_455)) ? 1'b1 : 1'b0);

assign tmp_47_fu_398_p1 = tn_reg_260;

assign tmp_48_fu_421_p1 = tn_reg_260;

assign tmp_50_fu_408_p1 = tm_reg_236;

assign tmp_52_fu_426_p1 = tm_reg_236;

assign tmp_nbreadreq_fu_110_p3 = data_buffer_V_empty_n;

assign tn_2_fu_392_p2 = (tn_reg_260 + 6'd1);

assign tn_cast_fu_383_p1 = tn_reg_260;

endmodule //compute_pro_1
