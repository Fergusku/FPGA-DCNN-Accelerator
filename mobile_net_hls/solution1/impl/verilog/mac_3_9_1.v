// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mac_3_9_1 (
        ap_clk,
        ap_rst,
        input_regs_0_read,
        input_regs_1_read,
        input_regs_2_read,
        input_regs_3_read,
        input_regs_4_read,
        input_regs_5_read,
        input_regs_6_read,
        input_regs_7_read,
        input_regs_8_read,
        ap_return
);


input   ap_clk;
input   ap_rst;
input  [15:0] input_regs_0_read;
input  [15:0] input_regs_1_read;
input  [15:0] input_regs_2_read;
input  [15:0] input_regs_3_read;
input  [15:0] input_regs_4_read;
input  [15:0] input_regs_5_read;
input  [15:0] input_regs_6_read;
input  [15:0] input_regs_7_read;
input  [15:0] input_regs_8_read;
output  [15:0] ap_return;

reg   [15:0] input_regs_8_read_1_reg_161;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] input_regs_8_read_1_reg_161_pp0_iter1_reg;
reg   [15:0] input_regs_8_read_1_reg_161_pp0_iter2_reg;
reg   [15:0] input_regs_8_read_1_reg_161_pp0_iter3_reg;
wire   [15:0] grp_fu_108_p2;
reg   [15:0] tmp_5_reg_206;
wire   [15:0] grp_fu_114_p2;
reg   [15:0] tmp_5_0_1_reg_211;
wire   [15:0] grp_fu_120_p2;
reg   [15:0] tmp_5_0_2_reg_216;
wire   [15:0] grp_fu_126_p2;
reg   [15:0] tmp_5_1_reg_221;
wire   [15:0] grp_fu_132_p2;
reg   [15:0] tmp_5_1_1_reg_226;
wire   [15:0] grp_fu_138_p2;
reg   [15:0] tmp_5_1_2_reg_231;
wire   [15:0] grp_fu_144_p2;
reg   [15:0] tmp_5_2_reg_236;
wire   [15:0] grp_fu_150_p2;
reg   [15:0] tmp_5_2_1_reg_241;
wire   [15:0] grp_fu_156_p2;
reg   [15:0] tmp_5_2_2_reg_246;
wire   [15:0] grp_fu_76_p2;
reg   [15:0] tmp1_reg_251;
wire   [15:0] grp_fu_80_p2;
reg   [15:0] tmp2_reg_256;
wire   [15:0] grp_fu_84_p2;
reg   [15:0] tmp4_reg_261;
reg   [15:0] tmp4_reg_261_pp0_iter8_reg;
reg   [15:0] tmp4_reg_261_pp0_iter9_reg;
reg   [15:0] tmp4_reg_261_pp0_iter10_reg;
reg   [15:0] tmp4_reg_261_pp0_iter11_reg;
wire   [15:0] grp_fu_88_p2;
reg   [15:0] tmp6_reg_266;
wire   [15:0] grp_fu_92_p2;
reg   [15:0] tmp_reg_271;
reg   [15:0] tmp_reg_271_pp0_iter12_reg;
reg   [15:0] tmp_reg_271_pp0_iter13_reg;
reg   [15:0] tmp_reg_271_pp0_iter14_reg;
reg   [15:0] tmp_reg_271_pp0_iter15_reg;
wire   [15:0] grp_fu_96_p2;
reg   [15:0] tmp5_reg_276;
wire   [15:0] grp_fu_100_p2;
reg   [15:0] tmp3_reg_281;
wire    ap_block_pp0_stage0;
wire   [15:0] grp_fu_104_p2;
reg   [15:0] input_regs_0_read_int_reg;
reg   [15:0] input_regs_1_read_int_reg;
reg   [15:0] input_regs_2_read_int_reg;
reg   [15:0] input_regs_3_read_int_reg;
reg   [15:0] input_regs_4_read_int_reg;
reg   [15:0] input_regs_5_read_int_reg;
reg   [15:0] input_regs_6_read_int_reg;
reg   [15:0] input_regs_7_read_int_reg;
reg   [15:0] input_regs_8_read_int_reg;

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U521(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_206),
    .din1(tmp_5_0_1_reg_211),
    .ce(1'b1),
    .dout(grp_fu_76_p2)
);

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U522(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_0_2_reg_216),
    .din1(tmp_5_1_2_reg_231),
    .ce(1'b1),
    .dout(grp_fu_80_p2)
);

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U523(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_1_1_reg_226),
    .din1(tmp_5_1_reg_221),
    .ce(1'b1),
    .dout(grp_fu_84_p2)
);

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U524(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_2_1_reg_241),
    .din1(tmp_5_2_reg_236),
    .ce(1'b1),
    .dout(grp_fu_88_p2)
);

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U525(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp2_reg_256),
    .din1(tmp1_reg_251),
    .ce(1'b1),
    .dout(grp_fu_92_p2)
);

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U526(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp6_reg_266),
    .din1(tmp_5_2_2_reg_246),
    .ce(1'b1),
    .dout(grp_fu_96_p2)
);

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U527(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp5_reg_276),
    .din1(tmp4_reg_261_pp0_iter11_reg),
    .ce(1'b1),
    .dout(grp_fu_100_p2)
);

moblie_net_hadd_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hadd_1bkb_U528(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp3_reg_281),
    .din1(tmp_reg_271_pp0_iter15_reg),
    .ce(1'b1),
    .dout(grp_fu_104_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U529(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_0_read_int_reg),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U530(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_1_read_int_reg),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U531(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_2_read_int_reg),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_120_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U532(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_3_read_int_reg),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_126_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U533(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_4_read_int_reg),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_132_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U534(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_5_read_int_reg),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U535(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_6_read_int_reg),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U536(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_7_read_int_reg),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_150_p2)
);

moblie_net_hmul_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
moblie_net_hmul_1cud_U537(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_regs_8_read_1_reg_161_pp0_iter3_reg),
    .din1(16'd0),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

always @ (posedge ap_clk) begin
    input_regs_0_read_int_reg <= input_regs_0_read;
end

always @ (posedge ap_clk) begin
    input_regs_1_read_int_reg <= input_regs_1_read;
end

always @ (posedge ap_clk) begin
    input_regs_2_read_int_reg <= input_regs_2_read;
end

always @ (posedge ap_clk) begin
    input_regs_3_read_int_reg <= input_regs_3_read;
end

always @ (posedge ap_clk) begin
    input_regs_4_read_int_reg <= input_regs_4_read;
end

always @ (posedge ap_clk) begin
    input_regs_5_read_int_reg <= input_regs_5_read;
end

always @ (posedge ap_clk) begin
    input_regs_6_read_int_reg <= input_regs_6_read;
end

always @ (posedge ap_clk) begin
    input_regs_7_read_int_reg <= input_regs_7_read;
end

always @ (posedge ap_clk) begin
    input_regs_8_read_int_reg <= input_regs_8_read;
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        input_regs_8_read_1_reg_161 <= input_regs_8_read_int_reg;
        input_regs_8_read_1_reg_161_pp0_iter1_reg <= input_regs_8_read_1_reg_161;
        input_regs_8_read_1_reg_161_pp0_iter2_reg <= input_regs_8_read_1_reg_161_pp0_iter1_reg;
        input_regs_8_read_1_reg_161_pp0_iter3_reg <= input_regs_8_read_1_reg_161_pp0_iter2_reg;
        tmp1_reg_251 <= grp_fu_76_p2;
        tmp2_reg_256 <= grp_fu_80_p2;
        tmp3_reg_281 <= grp_fu_100_p2;
        tmp4_reg_261 <= grp_fu_84_p2;
        tmp4_reg_261_pp0_iter10_reg <= tmp4_reg_261_pp0_iter9_reg;
        tmp4_reg_261_pp0_iter11_reg <= tmp4_reg_261_pp0_iter10_reg;
        tmp4_reg_261_pp0_iter8_reg <= tmp4_reg_261;
        tmp4_reg_261_pp0_iter9_reg <= tmp4_reg_261_pp0_iter8_reg;
        tmp5_reg_276 <= grp_fu_96_p2;
        tmp6_reg_266 <= grp_fu_88_p2;
        tmp_5_0_1_reg_211 <= grp_fu_114_p2;
        tmp_5_0_2_reg_216 <= grp_fu_120_p2;
        tmp_5_1_1_reg_226 <= grp_fu_132_p2;
        tmp_5_1_2_reg_231 <= grp_fu_138_p2;
        tmp_5_1_reg_221 <= grp_fu_126_p2;
        tmp_5_2_1_reg_241 <= grp_fu_150_p2;
        tmp_5_2_2_reg_246 <= grp_fu_156_p2;
        tmp_5_2_reg_236 <= grp_fu_144_p2;
        tmp_5_reg_206 <= grp_fu_108_p2;
        tmp_reg_271 <= grp_fu_92_p2;
        tmp_reg_271_pp0_iter12_reg <= tmp_reg_271;
        tmp_reg_271_pp0_iter13_reg <= tmp_reg_271_pp0_iter12_reg;
        tmp_reg_271_pp0_iter14_reg <= tmp_reg_271_pp0_iter13_reg;
        tmp_reg_271_pp0_iter15_reg <= tmp_reg_271_pp0_iter14_reg;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_return = grp_fu_104_p2;

endmodule //mac_3_9_1
