-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_pro_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_buffer_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    input_buffer_V_empty_n : IN STD_LOGIC;
    input_buffer_V_read : OUT STD_LOGIC;
    weight_buffer_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    weight_buffer_V_empty_n : IN STD_LOGIC;
    weight_buffer_V_read : OUT STD_LOGIC;
    beta_buffer_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    beta_buffer_V_empty_n : IN STD_LOGIC;
    beta_buffer_V_read : OUT STD_LOGIC;
    output_buffer_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_buffer_V_full_n : IN STD_LOGIC;
    output_buffer_V_write : OUT STD_LOGIC;
    data_buffer_V_dout : IN STD_LOGIC;
    data_buffer_V_empty_n : IN STD_LOGIC;
    data_buffer_V_read : OUT STD_LOGIC;
    result_buffer_V_din : OUT STD_LOGIC;
    result_buffer_V_full_n : IN STD_LOGIC;
    result_buffer_V_write : OUT STD_LOGIC;
    data_m_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_m_V_empty_n : IN STD_LOGIC;
    data_m_V_read : OUT STD_LOGIC;
    data_n_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_n_V_empty_n : IN STD_LOGIC;
    data_n_V_read : OUT STD_LOGIC;
    result_m_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_m_V_full_n : IN STD_LOGIC;
    result_m_V_write : OUT STD_LOGIC;
    result_n_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_n_V_full_n : IN STD_LOGIC;
    result_n_V_write : OUT STD_LOGIC );
end;


architecture behav of compute_pro_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1339_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_nbreadreq_fu_110_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_nbwritereq_fu_118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1338_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mLoops_fu_304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mLoops_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal nLoops_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal nLoops_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal tm_2_fu_366_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tm_2_reg_471 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_44_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tn_2_fu_392_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tn_2_reg_486 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal output_temp_addr_reg_491 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_45_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1342_reg_497 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1341_reg_502 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_regs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_dat_reg_517 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal output_temp_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_temp_load_reg_527 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_51_reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_49_reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal input_regs_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_regs_ce0 : STD_LOGIC;
    signal input_regs_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_regs_ce1 : STD_LOGIC;
    signal input_regs_we1 : STD_LOGIC;
    signal output_temp_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_temp_ce0 : STD_LOGIC;
    signal output_temp_address1 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_temp_ce1 : STD_LOGIC;
    signal output_temp_we1 : STD_LOGIC;
    signal output_temp_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tm_reg_236 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal mac_dat_reg_248 : STD_LOGIC_VECTOR (15 downto 0);
    signal tn_reg_260 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_1340_fu_378_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_272_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_1336_fu_290_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1337_fu_341_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tm_cast_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tn_cast_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_state1 : BOOLEAN;

    component moblie_net_hadd_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component moblie_net_hmul_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component compute_pro_1_inpcmv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component compute_pro_1_outcnw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    input_regs_U : component compute_pro_1_inpcmv
    generic map (
        DataWidth => 16,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_regs_address0,
        ce0 => input_regs_ce0,
        q0 => input_regs_q0,
        address1 => input_regs_address1,
        ce1 => input_regs_ce1,
        we1 => input_regs_we1,
        d1 => input_buffer_V_dout);

    output_temp_U : component compute_pro_1_outcnw
    generic map (
        DataWidth => 16,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_temp_address0,
        ce0 => output_temp_ce0,
        q0 => output_temp_q0,
        address1 => output_temp_address1,
        ce1 => output_temp_ce1,
        we1 => output_temp_we1,
        d1 => output_temp_d1);

    moblie_net_hadd_1bkb_U2945 : component moblie_net_hadd_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_272_p0,
        din1 => mac_dat_reg_248,
        ce => ap_const_logic_1,
        dout => grp_fu_272_p2);

    moblie_net_hmul_1cud_U2946 : component moblie_net_hmul_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_regs_q0,
        din1 => tmp_1341_reg_502,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_1340_fu_378_p1 = ap_const_lv1_0) and (tmp_42_fu_361_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    mac_dat_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                mac_dat_reg_248 <= grp_fu_272_p2;
            elsif (((tmp_42_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                mac_dat_reg_248 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tm_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                tm_reg_236 <= tm_2_reg_471;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                tm_reg_236 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    tn_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                tn_reg_260 <= tn_2_reg_486;
            elsif (((tmp_42_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tn_reg_260 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_reg_464 <= icmp_fu_351_p2;
                mLoops_reg_450 <= mLoops_fu_304_p3;
                nLoops_reg_455 <= nLoops_fu_323_p3;
                tmp_1338_reg_445 <= data_m_V_dout;
                tmp_39_reg_460 <= tmp_39_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_dat_reg_517 <= grp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_45_fu_387_p2 = ap_const_lv1_0) and (tmp_39_reg_460 = ap_const_lv1_0))) then
                output_temp_addr_reg_491 <= tmp_50_fu_408_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                output_temp_load_reg_527 <= output_temp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tm_2_reg_471 <= tm_2_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_nbwritereq_fu_118_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_110_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_1339_reg_437 <= data_n_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_1341_reg_502 <= weight_buffer_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_39_reg_460 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_45_fu_387_p2 = ap_const_lv1_0))) then
                tmp_1342_reg_497 <= beta_buffer_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_42_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_44_reg_476 <= tmp_44_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_49_reg_538 <= grp_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_51_reg_532 <= grp_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tn_2_reg_486 <= tn_2_fu_392_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_nbreadreq_fu_110_p3, tmp_35_nbwritereq_fu_118_p3, tmp_39_reg_460, ap_CS_fsm_state5, tmp_42_fu_361_p2, ap_CS_fsm_state6, tmp_45_fu_387_p2, tmp_1340_fu_378_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_35_nbwritereq_fu_118_p3 = ap_const_lv1_0) or (tmp_nbreadreq_fu_110_p3 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_1340_fu_378_p1 = ap_const_lv1_0) and (tmp_42_fu_361_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((tmp_1340_fu_378_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_42_fu_361_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((tmp_39_reg_460 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_45_fu_387_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_45_fu_387_p2 = ap_const_lv1_0) and (tmp_39_reg_460 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, tmp_42_fu_361_p2, tmp_1340_fu_378_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_1340_fu_378_p1 = ap_const_lv1_0) and (tmp_42_fu_361_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, tmp_42_fu_361_p2, tmp_1340_fu_378_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_1340_fu_378_p1 = ap_const_lv1_0) and (tmp_42_fu_361_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    beta_buffer_V_read_assign_proc : process(beta_buffer_V_empty_n, tmp_39_reg_460, ap_CS_fsm_state6, tmp_45_fu_387_p2)
    begin
        if (((tmp_39_reg_460 = ap_const_lv1_1) and (beta_buffer_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_45_fu_387_p2 = ap_const_lv1_0))) then 
            beta_buffer_V_read <= ap_const_logic_1;
        else 
            beta_buffer_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_buffer_V_read_assign_proc : process(data_buffer_V_empty_n, ap_CS_fsm_state5, tmp_42_fu_361_p2)
    begin
        if (((data_buffer_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_42_fu_361_p2 = ap_const_lv1_0))) then 
            data_buffer_V_read <= ap_const_logic_1;
        else 
            data_buffer_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_m_V_read_assign_proc : process(data_m_V_empty_n, ap_CS_fsm_state4)
    begin
        if (((data_m_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_m_V_read <= ap_const_logic_1;
        else 
            data_m_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_n_V_read_assign_proc : process(data_n_V_empty_n, ap_CS_fsm_state3, tmp_nbreadreq_fu_110_p3, tmp_35_nbwritereq_fu_118_p3)
    begin
        if (((tmp_35_nbwritereq_fu_118_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_110_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (data_n_V_empty_n = ap_const_logic_1))) then 
            data_n_V_read <= ap_const_logic_1;
        else 
            data_n_V_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_272_p0_assign_proc : process(tmp_1342_reg_497, mul_dat_reg_517, output_temp_load_reg_527, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_272_p0 <= tmp_1342_reg_497;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_272_p0 <= output_temp_load_reg_527;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_272_p0 <= mul_dat_reg_517;
        else 
            grp_fu_272_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_fu_351_p2 <= "1" when (signed(tmp_1337_fu_341_p4) > signed(ap_const_lv23_0)) else "0";

    input_buffer_V_read_assign_proc : process(input_buffer_V_empty_n, tmp_44_reg_476, ap_CS_fsm_state6, tmp_45_fu_387_p2)
    begin
        if (((tmp_45_fu_387_p2 = ap_const_lv1_1) and (tmp_44_reg_476 = ap_const_lv1_1) and (input_buffer_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_buffer_V_read <= ap_const_logic_1;
        else 
            input_buffer_V_read <= ap_const_logic_0;
        end if; 
    end process;

    input_regs_address0 <= tmp_48_fu_421_p1(5 - 1 downto 0);
    input_regs_address1 <= tmp_47_fu_398_p1(5 - 1 downto 0);

    input_regs_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_regs_ce0 <= ap_const_logic_1;
        else 
            input_regs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_regs_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_regs_ce1 <= ap_const_logic_1;
        else 
            input_regs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_regs_we1_assign_proc : process(tmp_44_reg_476, ap_CS_fsm_state6, tmp_45_fu_387_p2)
    begin
        if (((tmp_45_fu_387_p2 = ap_const_lv1_1) and (tmp_44_reg_476 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_regs_we1 <= ap_const_logic_1;
        else 
            input_regs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mLoops_fu_304_p3 <= 
        ap_const_lv32_4 when (tmp_1336_fu_290_p3(0) = '1') else 
        tmp_36_fu_298_p2;
    nLoops_fu_323_p3 <= 
        ap_const_lv32_20 when (tmp_38_fu_317_p2(0) = '1') else 
        tmp_37_fu_312_p2;

    output_buffer_V_din_assign_proc : process(tmp_39_reg_460, icmp_reg_464, tmp_51_reg_532, tmp_49_reg_538, ap_CS_fsm_state21, ap_CS_fsm_state26)
    begin
        if ((icmp_reg_464 = ap_const_lv1_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                output_buffer_V_din <= tmp_49_reg_538;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_39_reg_460 = ap_const_lv1_0))) then 
                output_buffer_V_din <= tmp_51_reg_532;
            else 
                output_buffer_V_din <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            output_buffer_V_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_buffer_V_write_assign_proc : process(output_buffer_V_full_n, tmp_39_reg_460, icmp_reg_464, ap_CS_fsm_state21, ap_CS_fsm_state26)
    begin
        if (((output_buffer_V_full_n = ap_const_logic_1) and (((icmp_reg_464 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((icmp_reg_464 = ap_const_lv1_1) and (output_buffer_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_39_reg_460 = ap_const_lv1_0))))) then 
            output_buffer_V_write <= ap_const_logic_1;
        else 
            output_buffer_V_write <= ap_const_logic_0;
        end if; 
    end process;

    output_temp_address0 <= tmp_50_fu_408_p1(2 - 1 downto 0);

    output_temp_address1_assign_proc : process(output_temp_addr_reg_491, ap_CS_fsm_state21, tmp_52_fu_426_p1, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            output_temp_address1 <= tmp_52_fu_426_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_temp_address1 <= output_temp_addr_reg_491;
        else 
            output_temp_address1 <= "XX";
        end if; 
    end process;


    output_temp_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_temp_ce0 <= ap_const_logic_1;
        else 
            output_temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_temp_ce1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            output_temp_ce1 <= ap_const_logic_1;
        else 
            output_temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_temp_d1_assign_proc : process(tmp_51_reg_532, tmp_49_reg_538, ap_CS_fsm_state21, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            output_temp_d1 <= tmp_49_reg_538;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_temp_d1 <= tmp_51_reg_532;
        else 
            output_temp_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_temp_we1_assign_proc : process(tmp_39_reg_460, icmp_reg_464, ap_CS_fsm_state21, ap_CS_fsm_state26)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_reg_464 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_reg_464 = ap_const_lv1_0) and (tmp_39_reg_460 = ap_const_lv1_0)))) then 
            output_temp_we1 <= ap_const_logic_1;
        else 
            output_temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    result_buffer_V_din <= data_buffer_V_dout;

    result_buffer_V_write_assign_proc : process(result_buffer_V_full_n, ap_CS_fsm_state5, tmp_42_fu_361_p2)
    begin
        if (((result_buffer_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_42_fu_361_p2 = ap_const_lv1_0))) then 
            result_buffer_V_write <= ap_const_logic_1;
        else 
            result_buffer_V_write <= ap_const_logic_0;
        end if; 
    end process;

    result_m_V_din <= tmp_1338_reg_445;

    result_m_V_write_assign_proc : process(result_m_V_full_n, ap_CS_fsm_state5, tmp_42_fu_361_p2)
    begin
        if (((result_m_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_42_fu_361_p2 = ap_const_lv1_0))) then 
            result_m_V_write <= ap_const_logic_1;
        else 
            result_m_V_write <= ap_const_logic_0;
        end if; 
    end process;

    result_n_V_din <= tmp_1339_reg_437;

    result_n_V_write_assign_proc : process(result_n_V_full_n, ap_CS_fsm_state5, tmp_42_fu_361_p2)
    begin
        if (((result_n_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_42_fu_361_p2 = ap_const_lv1_0))) then 
            result_n_V_write <= ap_const_logic_1;
        else 
            result_n_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tm_2_fu_366_p2 <= std_logic_vector(unsigned(tm_reg_236) + unsigned(ap_const_lv31_1));
    tm_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tm_reg_236),32));
    tmp_1336_fu_290_p3 <= data_m_V_dout(31 downto 31);
    tmp_1337_fu_341_p4 <= tmp_40_fu_336_p2(31 downto 9);
    tmp_1340_fu_378_p1 <= (0=>data_buffer_V_dout, others=>'-');
    tmp_35_nbwritereq_fu_118_p3 <= (0=>result_buffer_V_full_n, others=>'-');
    tmp_36_fu_298_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) - unsigned(data_m_V_dout));
    tmp_37_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv32_200) - unsigned(tmp_1339_reg_437));
    tmp_38_fu_317_p2 <= "1" when (signed(tmp_37_fu_312_p2) > signed(ap_const_lv32_20)) else "0";
    tmp_39_fu_331_p2 <= "1" when (signed(tmp_1339_reg_437) < signed(ap_const_lv32_1)) else "0";
    tmp_40_fu_336_p2 <= std_logic_vector(unsigned(tmp_1339_reg_437) + unsigned(ap_const_lv32_20));
    tmp_42_fu_361_p2 <= "1" when (signed(tm_cast_fu_357_p1) < signed(mLoops_reg_450)) else "0";
    tmp_44_fu_372_p2 <= "1" when (tm_reg_236 = ap_const_lv31_0) else "0";
    tmp_45_fu_387_p2 <= "1" when (signed(tn_cast_fu_383_p1) < signed(nLoops_reg_455)) else "0";
    tmp_47_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_reg_260),64));
    tmp_48_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_reg_260),64));
    tmp_50_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tm_reg_236),64));
    tmp_52_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tm_reg_236),64));
    tmp_nbreadreq_fu_110_p3 <= (0=>data_buffer_V_empty_n, others=>'-');
    tn_2_fu_392_p2 <= std_logic_vector(unsigned(tn_reg_260) + unsigned(ap_const_lv6_1));
    tn_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_reg_260),32));

    weight_buffer_V_read_assign_proc : process(weight_buffer_V_empty_n, ap_CS_fsm_state7)
    begin
        if (((weight_buffer_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            weight_buffer_V_read <= ap_const_logic_1;
        else 
            weight_buffer_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
