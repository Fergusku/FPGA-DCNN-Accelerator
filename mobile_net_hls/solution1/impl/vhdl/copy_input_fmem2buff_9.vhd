-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity copy_input_fmem2buff_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_inputs_AWVALID : OUT STD_LOGIC;
    m_axi_inputs_AWREADY : IN STD_LOGIC;
    m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WVALID : OUT STD_LOGIC;
    m_axi_inputs_WREADY : IN STD_LOGIC;
    m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_WLAST : OUT STD_LOGIC;
    m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARVALID : OUT STD_LOGIC;
    m_axi_inputs_ARREADY : IN STD_LOGIC;
    m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RVALID : IN STD_LOGIC;
    m_axi_inputs_RREADY : OUT STD_LOGIC;
    m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_RLAST : IN STD_LOGIC;
    m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BVALID : IN STD_LOGIC;
    m_axi_inputs_BREADY : OUT STD_LOGIC;
    m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    inputs_offset1 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_buffer_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buffer_V_full_n : IN STD_LOGIC;
    input_buffer_V_write : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (9 downto 0);
    nLoops : IN STD_LOGIC_VECTOR (1 downto 0);
    input_cntl_V_din : OUT STD_LOGIC;
    input_cntl_V_full_n : IN STD_LOGIC;
    input_cntl_V_write : OUT STD_LOGIC );
end;


architecture behav of copy_input_fmem2buff_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv18_3FFF0 : STD_LOGIC_VECTOR (17 downto 0) := "111111111111110000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv19_100 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_const_lv19_10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inputs_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal inputs_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_reg_201 : STD_LOGIC_VECTOR (4 downto 0);
    signal base_addr1_cast4_fu_245_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal inputs_offset_cast_c_fu_249_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal inputs_offset_cast_c_reg_372 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_cast_fu_253_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_377 : STD_LOGIC_VECTOR (32 downto 0);
    signal tn_8_fu_262_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tn_8_reg_385 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond4_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tr_1_fu_274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr_1_reg_394 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_cond_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputs_addr_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_addr1_d1_6_fu_326_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_414_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_567_reg_423 : STD_LOGIC_VECTOR (15 downto 0);
    signal base_addr1_d2_1_fu_344_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_6_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal base_addr1_d2_reg_158 : STD_LOGIC_VECTOR (18 downto 0);
    signal tn_reg_168 : STD_LOGIC_VECTOR (1 downto 0);
    signal base_addr1_d_reg_179 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond1_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tr_reg_190 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_212 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum2_cast_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_inputs_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_inputs_ARREADY : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_566_fu_223_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_227_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_cast_fu_235_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal base_addr1_fu_239_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_298_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_22_fu_302_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_169_cast_fu_307_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum2_fu_311_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_inputs_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_inputs_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_m_axi_inputs_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_inputs_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_inputs_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_inputs_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    base_addr1_d2_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_268_p2 = ap_const_lv1_1))) then 
                base_addr1_d2_reg_158 <= base_addr1_d1_6_fu_326_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                base_addr1_d2_reg_158 <= base_addr1_cast4_fu_245_p1;
            end if; 
        end if;
    end process;

    base_addr1_d_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                base_addr1_d_reg_179 <= base_addr1_d2_1_fu_344_p2;
            elsif (((exitcond1_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                base_addr1_d_reg_179 <= base_addr1_d2_reg_158;
            end if; 
        end if;
    end process;

    i2_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i2_reg_201 <= ap_const_lv5_0;
            elsif (((exitcond_fu_332_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i2_reg_201 <= i_7_fu_338_p2;
            end if; 
        end if;
    end process;

    i_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (or_cond_fu_292_p2 = ap_const_lv1_1))) then 
                i_reg_212 <= ap_const_lv5_0;
            elsif (((exitcond3_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_reg_212 <= i_6_fu_356_p2;
            end if; 
        end if;
    end process;

    tn_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_268_p2 = ap_const_lv1_1))) then 
                tn_reg_168 <= tn_8_reg_385;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                tn_reg_168 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    tr_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                tr_reg_190 <= tr_1_reg_394;
            elsif (((exitcond1_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tr_reg_190 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_414 <= exitcond_fu_332_p2;
                exitcond_reg_414_pp0_iter1_reg <= exitcond_reg_414;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_292_p2 = ap_const_lv1_0) and (exitcond4_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                inputs_addr_reg_403 <= sum2_cast_fu_316_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    inputs_offset_cast_c_reg_372(17 downto 0) <= inputs_offset_cast_c_fu_249_p1(17 downto 0);
                    sext_cast_reg_377(30 downto 0) <= sext_cast_fu_253_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                or_cond_reg_399 <= or_cond_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_414 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_567_reg_423 <= m_axi_inputs_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tn_8_reg_385 <= tn_8_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tr_1_reg_394 <= tr_1_fu_274_p2;
            end if;
        end if;
    end process;
    inputs_offset_cast_c_reg_372(19 downto 18) <= "00";
    sext_cast_reg_377(32 downto 31) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, exitcond4_fu_268_p2, ap_CS_fsm_state3, or_cond_fu_292_p2, exitcond_fu_332_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state15, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, exitcond1_fu_257_p2, exitcond3_fu_350_p2, ap_sig_ioackin_m_axi_inputs_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_257_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((exitcond4_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (or_cond_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_m_axi_inputs_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state15 => 
                if (((exitcond3_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_inputs_RVALID, ap_enable_reg_pp0_iter1, exitcond_reg_414)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_reg_414 = ap_const_lv1_0) and (m_axi_inputs_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_inputs_RVALID, ap_enable_reg_pp0_iter1, exitcond_reg_414)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_414 = ap_const_lv1_0) and (m_axi_inputs_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_inputs_RVALID, ap_enable_reg_pp0_iter1, exitcond_reg_414)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_414 = ap_const_lv1_0) and (m_axi_inputs_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter1_assign_proc : process(m_axi_inputs_RVALID, exitcond_reg_414)
    begin
                ap_block_state12_pp0_stage0_iter1 <= ((exitcond_reg_414 = ap_const_lv1_0) and (m_axi_inputs_RVALID = ap_const_logic_0));
    end process;

        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state11_assign_proc : process(exitcond_fu_332_p2)
    begin
        if ((exitcond_fu_332_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_257_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_257_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_257_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_257_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_inputs_ARREADY_assign_proc : process(m_axi_inputs_ARREADY, ap_reg_ioackin_m_axi_inputs_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_inputs_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_inputs_ARREADY <= m_axi_inputs_ARREADY;
        else 
            ap_sig_ioackin_m_axi_inputs_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

        base_addr1_cast4_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_addr1_fu_239_p2),19));

    base_addr1_d1_6_fu_326_p2 <= std_logic_vector(unsigned(base_addr1_d2_reg_158) + unsigned(ap_const_lv19_100));
    base_addr1_d2_1_fu_344_p2 <= std_logic_vector(signed(base_addr1_d_reg_179) + signed(ap_const_lv19_10));
    base_addr1_fu_239_p2 <= std_logic_vector(signed(ap_const_lv18_3FFF0) + signed(tmp_cast_fu_235_p1));
    exitcond1_fu_257_p2 <= "1" when (tn_reg_168 = nLoops) else "0";
    exitcond3_fu_350_p2 <= "1" when (i_reg_212 = ap_const_lv5_12) else "0";
    exitcond4_fu_268_p2 <= "1" when (tr_reg_190 = ap_const_lv5_12) else "0";
    exitcond_fu_332_p2 <= "1" when (i2_reg_201 = ap_const_lv5_10) else "0";
    i_6_fu_356_p2 <= std_logic_vector(unsigned(i_reg_212) + unsigned(ap_const_lv5_1));
    i_7_fu_338_p2 <= std_logic_vector(unsigned(i2_reg_201) + unsigned(ap_const_lv5_1));

    input_buffer_V_din_assign_proc : process(exitcond4_fu_268_p2, ap_CS_fsm_state3, or_cond_fu_292_p2, or_cond_reg_399, exitcond_reg_414_pp0_iter1_reg, tmp_567_reg_423, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_enable_reg_pp0_iter2, exitcond3_fu_350_p2, ap_block_pp0_stage0_01001)
    begin
        if (((exitcond_reg_414_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_buffer_V_din <= tmp_567_reg_423;
        elsif ((((exitcond3_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((or_cond_reg_399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((or_cond_fu_292_p2 = ap_const_lv1_0) and (exitcond4_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            input_buffer_V_din <= ap_const_lv16_0;
        else 
            input_buffer_V_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_buffer_V_write_assign_proc : process(input_buffer_V_full_n, exitcond4_fu_268_p2, ap_CS_fsm_state3, or_cond_fu_292_p2, or_cond_reg_399, ap_block_pp0_stage0_11001, exitcond_reg_414_pp0_iter1_reg, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_enable_reg_pp0_iter2, exitcond3_fu_350_p2)
    begin
        if (((input_buffer_V_full_n = ap_const_logic_1) and (((input_buffer_V_full_n = ap_const_logic_1) and (((input_buffer_V_full_n = ap_const_logic_1) and (((exitcond_reg_414_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((or_cond_fu_292_p2 = ap_const_lv1_0) and (exitcond4_fu_268_p2 = ap_const_lv1_0) and (input_buffer_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) or ((or_cond_reg_399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) or ((exitcond3_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))))) then 
            input_buffer_V_write <= ap_const_logic_1;
        else 
            input_buffer_V_write <= ap_const_logic_0;
        end if; 
    end process;

    input_cntl_V_din <= ap_const_logic_0;

    input_cntl_V_write_assign_proc : process(input_cntl_V_full_n, ap_CS_fsm_state2, exitcond1_fu_257_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (input_cntl_V_full_n = ap_const_logic_1) and (exitcond1_fu_257_p2 = ap_const_lv1_1))) then 
            input_cntl_V_write <= ap_const_logic_1;
        else 
            input_cntl_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_blk_n_AR_assign_proc : process(m_axi_inputs_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inputs_blk_n_AR <= m_axi_inputs_ARREADY;
        else 
            inputs_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    inputs_blk_n_R_assign_proc : process(m_axi_inputs_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_reg_414)
    begin
        if (((exitcond_reg_414 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            inputs_blk_n_R <= m_axi_inputs_RVALID;
        else 
            inputs_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    inputs_offset_cast_c_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputs_offset1),20));
    m_axi_inputs_ARADDR <= inputs_addr_reg_403;
    m_axi_inputs_ARBURST <= ap_const_lv2_0;
    m_axi_inputs_ARCACHE <= ap_const_lv4_0;
    m_axi_inputs_ARID <= ap_const_lv1_0;
    m_axi_inputs_ARLEN <= ap_const_lv32_10;
    m_axi_inputs_ARLOCK <= ap_const_lv2_0;
    m_axi_inputs_ARPROT <= ap_const_lv3_0;
    m_axi_inputs_ARQOS <= ap_const_lv4_0;
    m_axi_inputs_ARREGION <= ap_const_lv4_0;
    m_axi_inputs_ARSIZE <= ap_const_lv3_0;
    m_axi_inputs_ARUSER <= ap_const_lv1_0;

    m_axi_inputs_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_m_axi_inputs_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_inputs_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_inputs_ARVALID <= ap_const_logic_1;
        else 
            m_axi_inputs_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_AWADDR <= ap_const_lv32_0;
    m_axi_inputs_AWBURST <= ap_const_lv2_0;
    m_axi_inputs_AWCACHE <= ap_const_lv4_0;
    m_axi_inputs_AWID <= ap_const_lv1_0;
    m_axi_inputs_AWLEN <= ap_const_lv32_0;
    m_axi_inputs_AWLOCK <= ap_const_lv2_0;
    m_axi_inputs_AWPROT <= ap_const_lv3_0;
    m_axi_inputs_AWQOS <= ap_const_lv4_0;
    m_axi_inputs_AWREGION <= ap_const_lv4_0;
    m_axi_inputs_AWSIZE <= ap_const_lv3_0;
    m_axi_inputs_AWUSER <= ap_const_lv1_0;
    m_axi_inputs_AWVALID <= ap_const_logic_0;
    m_axi_inputs_BREADY <= ap_const_logic_0;

    m_axi_inputs_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_414, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_reg_414 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_inputs_RREADY <= ap_const_logic_1;
        else 
            m_axi_inputs_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_WDATA <= ap_const_lv16_0;
    m_axi_inputs_WID <= ap_const_lv1_0;
    m_axi_inputs_WLAST <= ap_const_logic_0;
    m_axi_inputs_WSTRB <= ap_const_lv2_0;
    m_axi_inputs_WUSER <= ap_const_lv1_0;
    m_axi_inputs_WVALID <= ap_const_logic_0;
    or_cond_fu_292_p2 <= (tmp_20_fu_286_p2 or tmp_19_fu_280_p2);
    sext_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputs_offset),33));
        sum2_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_fu_311_p2),64));

    sum2_fu_311_p2 <= std_logic_vector(unsigned(sext_cast_reg_377) + unsigned(tmp_169_cast_fu_307_p1));
        tmp_169_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_302_p2),33));

    tmp_19_fu_280_p2 <= "1" when (tr_reg_190 = ap_const_lv5_0) else "0";
    tmp_20_fu_286_p2 <= "1" when (unsigned(tr_reg_190) > unsigned(ap_const_lv5_10)) else "0";
        tmp_21_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_addr1_d_reg_179),20));

    tmp_22_fu_302_p2 <= std_logic_vector(unsigned(inputs_offset_cast_c_reg_372) + unsigned(tmp_21_fu_298_p1));
    tmp_566_fu_223_p1 <= n(9 - 1 downto 0);
    tmp_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_227_p3),18));
    tmp_fu_227_p3 <= (tmp_566_fu_223_p1 & ap_const_lv8_0);
    tn_8_fu_262_p2 <= std_logic_vector(unsigned(tn_reg_168) + unsigned(ap_const_lv2_1));
    tr_1_fu_274_p2 <= std_logic_vector(unsigned(tr_reg_190) + unsigned(ap_const_lv5_1));
end behav;
