-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_data353167 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_inputs_AWVALID : OUT STD_LOGIC;
    m_axi_inputs_AWREADY : IN STD_LOGIC;
    m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WVALID : OUT STD_LOGIC;
    m_axi_inputs_WREADY : IN STD_LOGIC;
    m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_WLAST : OUT STD_LOGIC;
    m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARVALID : OUT STD_LOGIC;
    m_axi_inputs_ARREADY : IN STD_LOGIC;
    m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RVALID : IN STD_LOGIC;
    m_axi_inputs_RREADY : OUT STD_LOGIC;
    m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_RLAST : IN STD_LOGIC;
    m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BVALID : IN STD_LOGIC;
    m_axi_inputs_BREADY : OUT STD_LOGIC;
    m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    inputs_offset1 : IN STD_LOGIC_VECTOR (17 downto 0);
    input_buffer_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buffer_V_full_n : IN STD_LOGIC;
    input_buffer_V_write : OUT STD_LOGIC;
    data_buffer_V_din : OUT STD_LOGIC;
    data_buffer_V_full_n : IN STD_LOGIC;
    data_buffer_V_write : OUT STD_LOGIC;
    data_n_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_n_V_full_n : IN STD_LOGIC;
    data_n_V_write : OUT STD_LOGIC;
    data_r_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_r_V_full_n : IN STD_LOGIC;
    data_r_V_write : OUT STD_LOGIC;
    data_c_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_c_V_full_n : IN STD_LOGIC;
    data_c_V_write : OUT STD_LOGIC;
    outputs_offset2 : IN STD_LOGIC_VECTOR (9 downto 0);
    outputs_offset_c_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputs_offset_c_full_n : IN STD_LOGIC;
    outputs_offset_c_write : OUT STD_LOGIC;
    outputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
    outputs_offset_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
    outputs_offset_out_full_n : IN STD_LOGIC;
    outputs_offset_out_write : OUT STD_LOGIC );
end;


architecture behav of load_data353167 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv18_100 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal inputs_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal inputs_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_i_i_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal outputs_offset_c_blk_n : STD_LOGIC;
    signal outputs_offset_out_blk_n : STD_LOGIC;
    signal i_0_i_i_i_i_i_i_reg_302 : STD_LOGIC_VECTOR (3 downto 0);
    signal inputs_offset_cast_i_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs_offset_cast_i_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal inputs_offset_cast_i_1_fu_317_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal inputs_offset_cast_i_1_reg_642 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_305_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_305_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal nLoops_fu_349_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal nLoops_reg_655 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_325_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_295_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_307_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_307_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rLoops_fu_403_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal rLoops_reg_673 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_296_fu_379_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_298_fu_421_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_298_reg_678 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_299_reg_683 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_433_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_309_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_309_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_fu_451_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_300_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cLoops_fu_473_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal cLoops_reg_709 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_301_nbwritereq_fu_180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cLoops_cast_i_i_i_i_s_fu_481_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal cLoops_cast_i_i_i_i_s_reg_714 : STD_LOGIC_VECTOR (4 downto 0);
    signal base_addr_cast_i_i_i_fu_504_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_40_i_i_i_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_i_i_i_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal tn_fu_517_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tn_reg_732 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal c_fu_553_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_i_i_i_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tr_fu_564_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tr_reg_745 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal inputs_addr_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_i_i_i_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_addr_d1_13_fu_620_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond_i_i_i_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state15_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_i_i_i_reg_761_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_631_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_312_reg_770 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_304_reg_234 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_306_reg_246 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_308_reg_258 : STD_LOGIC_VECTOR (4 downto 0);
    signal base_addr_d1_0_i_i_i_reg_270 : STD_LOGIC_VECTOR (17 downto 0);
    signal tn_0_i_i_i_i_i_i_reg_280 : STD_LOGIC_VECTOR (3 downto 0);
    signal tr_0_i_i_i_i_i_i_reg_291 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal sum_cast_i_i_i_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_inputs_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_inputs_ARREADY : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_i_i_i_i_i_fu_333_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_i_i_i_i_i_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_294_fu_339_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal nLoops_cast10_i_i_i_s_fu_357_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_i_i_i_i_i_fu_361_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_i_i_i_i_i_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_i_i_i_i_i_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_297_fu_393_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal rLoops_cast_i_i_i_i_s_fu_411_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_i_i_i_i_i_fu_415_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_i_i_i_i_i_fu_457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_i_i_i_i_i_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_302_fu_463_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_i_i_i_fu_485_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal base_addr_fu_495_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_31_i_i_i_i_i_fu_523_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_303_fu_528_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_i_i_i_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_i_i_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_311_fu_570_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_33_i_i_i_fu_574_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_i_i_i_fu_582_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_35_i_i_i_fu_586_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_36_i_i_i_fu_592_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_37_i_i_i_fu_596_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_38_cast_i_i_i_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_i_i_i_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_325_p3 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state15);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_inputs_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_inputs_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    if ((ap_sig_ioackin_m_axi_inputs_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_inputs_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_inputs_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_inputs_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    base_addr_d1_0_i_i_i_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_i_fu_559_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                base_addr_d1_0_i_i_i_reg_270 <= base_addr_d1_13_fu_620_p2;
            elsif (((tmp_301_nbwritereq_fu_180_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                base_addr_d1_0_i_i_i_reg_270 <= base_addr_cast_i_i_i_fu_504_p1;
            end if; 
        end if;
    end process;

    i_0_i_i_i_i_i_i_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_fu_626_p2 = ap_const_lv1_0))) then 
                i_0_i_i_i_i_i_i_reg_302 <= i_fu_631_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_i_i_i_i_i_i_reg_302 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tmp_304_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_296_fu_379_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_304_reg_234 <= n_fu_433_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (outputs_offset_out_full_n = ap_const_logic_0) or (outputs_offset_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_304_reg_234 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    tmp_306_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_325_p3 = ap_const_lv1_0))) then 
                tmp_306_reg_246 <= ap_const_lv5_0;
            elsif (((tmp_300_fu_443_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                tmp_306_reg_246 <= r_fu_451_p2;
            end if; 
        end if;
    end process;

    tmp_308_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_296_fu_379_p3 = ap_const_lv1_0))) then 
                tmp_308_reg_258 <= ap_const_lv5_0;
            elsif (((exitcond2_i_i_i_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                tmp_308_reg_258 <= c_fu_553_p2;
            end if; 
        end if;
    end process;

    tn_0_i_i_i_i_i_i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_i_i_fu_559_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                tn_0_i_i_i_i_i_i_reg_280 <= tn_reg_732;
            elsif (((tmp_301_nbwritereq_fu_180_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                tn_0_i_i_i_i_i_i_reg_280 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tr_0_i_i_i_i_i_i_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                tr_0_i_i_i_i_i_i_reg_291 <= tr_reg_745;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_i_i_i_fu_512_p2 = ap_const_lv1_0))) then 
                tr_0_i_i_i_i_i_i_reg_291 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_301_nbwritereq_fu_180_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    cLoops_cast_i_i_i_i_s_reg_714(3 downto 0) <= cLoops_cast_i_i_i_i_s_fu_481_p1(3 downto 0);
                cLoops_reg_709 <= cLoops_fu_473_p3;
                    tmp_40_i_i_i_reg_724(3 downto 0) <= tmp_40_i_i_i_fu_508_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_i_i_i_reg_761 <= exitcond_i_i_i_fu_626_p2;
                exitcond_i_i_i_reg_761_pp0_iter1_reg <= exitcond_i_i_i_reg_761;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_i_i_i_fu_559_p2 = ap_const_lv1_0))) then
                inputs_addr_reg_750 <= sum_cast_i_i_i_fu_610_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (outputs_offset_out_full_n = ap_const_logic_0) or (outputs_offset_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    inputs_offset_cast_i_1_reg_642(17 downto 0) <= inputs_offset_cast_i_1_fu_317_p1(17 downto 0);
                    inputs_offset_cast_i_reg_637(30 downto 0) <= inputs_offset_cast_i_fu_313_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_325_p3 = ap_const_lv1_0))) then
                nLoops_reg_655 <= nLoops_fu_349_p3;
                tmp_295_reg_660 <= tmp_16_i_i_i_i_i_fu_361_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_296_fu_379_p3 = ap_const_lv1_0))) then
                rLoops_reg_673 <= rLoops_fu_403_p3;
                tmp_298_reg_678 <= tmp_298_fu_421_p1;
                tmp_299_reg_683 <= tmp_20_i_i_i_i_i_fu_415_p2(4 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_305_reg_647(9 downto 0) <= tmp_305_fu_321_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_307_reg_665(4 downto 0) <= tmp_307_fu_375_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_309_reg_693(4 downto 0) <= tmp_309_fu_439_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_reg_761 = ap_const_lv1_0))) then
                tmp_312_reg_770 <= m_axi_inputs_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tn_reg_732 <= tn_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tr_reg_745 <= tr_fu_564_p2;
            end if;
        end if;
    end process;
    inputs_offset_cast_i_reg_637(31) <= '0';
    inputs_offset_cast_i_1_reg_642(18) <= '0';
    tmp_305_reg_647(31 downto 10) <= "0000000000000000000000";
    tmp_307_reg_665(31 downto 5) <= "000000000000000000000000000";
    tmp_309_reg_693(31 downto 5) <= "000000000000000000000000000";
    cLoops_cast_i_i_i_i_s_reg_714(4) <= '0';
    tmp_40_i_i_i_reg_724(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, outputs_offset_c_full_n, outputs_offset_out_full_n, ap_CS_fsm_state8, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, tmp_fu_325_p3, ap_CS_fsm_state3, tmp_296_fu_379_p3, ap_CS_fsm_state4, tmp_300_fu_443_p3, ap_CS_fsm_state5, tmp_301_nbwritereq_fu_180_p3, ap_CS_fsm_state6, exitcond2_i_i_i_fu_512_p2, ap_CS_fsm_state7, exitcond1_i_i_i_fu_559_p2, exitcond_i_i_i_fu_626_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_sig_ioackin_m_axi_inputs_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (outputs_offset_out_full_n = ap_const_logic_0) or (outputs_offset_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_325_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_296_fu_379_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_300_fu_443_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_301_nbwritereq_fu_180_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond2_i_i_i_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond1_i_i_i_fu_559_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_sig_ioackin_m_axi_inputs_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_i_fu_626_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i_i_i_fu_626_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_inputs_RVALID, ap_enable_reg_pp0_iter1, exitcond_i_i_i_reg_761)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_inputs_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_i_i_i_reg_761 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_inputs_RVALID, ap_enable_reg_pp0_iter1, exitcond_i_i_i_reg_761)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_inputs_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_i_i_i_reg_761 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_inputs_RVALID, ap_enable_reg_pp0_iter1, exitcond_i_i_i_reg_761)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_inputs_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_i_i_i_reg_761 = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, outputs_offset_c_full_n, outputs_offset_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (outputs_offset_out_full_n = ap_const_logic_0) or (outputs_offset_c_full_n = ap_const_logic_0));
    end process;

        ap_block_state15_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage0_iter1_assign_proc : process(m_axi_inputs_RVALID, exitcond_i_i_i_reg_761)
    begin
                ap_block_state16_pp0_stage0_iter1 <= ((m_axi_inputs_RVALID = ap_const_logic_0) and (exitcond_i_i_i_reg_761 = ap_const_lv1_0));
    end process;

        ap_block_state17_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state15_assign_proc : process(exitcond_i_i_i_fu_626_p2)
    begin
        if ((exitcond_i_i_i_fu_626_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_fu_325_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_325_p3 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_sig_ioackin_m_axi_inputs_ARREADY_assign_proc : process(m_axi_inputs_ARREADY, ap_reg_ioackin_m_axi_inputs_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_inputs_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_inputs_ARREADY <= m_axi_inputs_ARREADY;
        else 
            ap_sig_ioackin_m_axi_inputs_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    base_addr_cast_i_i_i_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(base_addr_fu_495_p4),18));
    base_addr_d1_13_fu_620_p2 <= std_logic_vector(unsigned(base_addr_d1_0_i_i_i_reg_270) + unsigned(ap_const_lv18_100));
    base_addr_fu_495_p4 <= ((tmp_298_reg_678 & tmp_22_i_i_i_fu_485_p4) & tmp_308_reg_258);
    cLoops_cast_i_i_i_i_s_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cLoops_fu_473_p3),5));
    cLoops_fu_473_p3 <= 
        ap_const_lv4_8 when (tmp_24_i_i_i_i_i_fu_467_p2(0) = '1') else 
        tmp_302_fu_463_p1;
    c_fu_553_p2 <= std_logic_vector(unsigned(tmp_308_reg_258) + unsigned(ap_const_lv5_8));
    data_buffer_V_din <= (sel_tmp1_i_i_i_fu_541_p2(0) xor ap_const_logic_1);

    data_buffer_V_write_assign_proc : process(data_buffer_V_full_n, ap_CS_fsm_state6, exitcond2_i_i_i_fu_512_p2)
    begin
        if (((exitcond2_i_i_i_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (data_buffer_V_full_n = ap_const_logic_1))) then 
            data_buffer_V_write <= ap_const_logic_1;
        else 
            data_buffer_V_write <= ap_const_logic_0;
        end if; 
    end process;

    data_c_V_din <= tmp_309_reg_693;

    data_c_V_write_assign_proc : process(data_c_V_full_n, ap_CS_fsm_state6, exitcond2_i_i_i_fu_512_p2)
    begin
        if (((exitcond2_i_i_i_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (data_c_V_full_n = ap_const_logic_1))) then 
            data_c_V_write <= ap_const_logic_1;
        else 
            data_c_V_write <= ap_const_logic_0;
        end if; 
    end process;

    data_n_V_din <= tmp_305_reg_647;

    data_n_V_write_assign_proc : process(data_n_V_full_n, ap_CS_fsm_state6, exitcond2_i_i_i_fu_512_p2)
    begin
        if (((exitcond2_i_i_i_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (data_n_V_full_n = ap_const_logic_1))) then 
            data_n_V_write <= ap_const_logic_1;
        else 
            data_n_V_write <= ap_const_logic_0;
        end if; 
    end process;

    data_r_V_din <= tmp_307_reg_665;

    data_r_V_write_assign_proc : process(data_r_V_full_n, ap_CS_fsm_state6, exitcond2_i_i_i_fu_512_p2)
    begin
        if (((exitcond2_i_i_i_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (data_r_V_full_n = ap_const_logic_1))) then 
            data_r_V_write <= ap_const_logic_1;
        else 
            data_r_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_i_i_fu_559_p2 <= "1" when (tr_0_i_i_i_i_i_i_reg_291 = rLoops_reg_673) else "0";
    exitcond2_i_i_i_fu_512_p2 <= "1" when (tn_0_i_i_i_i_i_i_reg_280 = nLoops_reg_655) else "0";
    exitcond_i_i_i_fu_626_p2 <= "1" when (i_0_i_i_i_i_i_i_reg_302 = cLoops_reg_709) else "0";
    i_fu_631_p2 <= std_logic_vector(unsigned(i_0_i_i_i_i_i_i_reg_302) + unsigned(ap_const_lv4_1));
    input_buffer_V_din <= tmp_312_reg_770;

    input_buffer_V_write_assign_proc : process(input_buffer_V_full_n, ap_block_pp0_stage0_11001, exitcond_i_i_i_reg_761_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (input_buffer_V_full_n = ap_const_logic_1) and (exitcond_i_i_i_reg_761_pp0_iter1_reg = ap_const_lv1_0))) then 
            input_buffer_V_write <= ap_const_logic_1;
        else 
            input_buffer_V_write <= ap_const_logic_0;
        end if; 
    end process;


    inputs_blk_n_AR_assign_proc : process(m_axi_inputs_ARREADY, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inputs_blk_n_AR <= m_axi_inputs_ARREADY;
        else 
            inputs_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    inputs_blk_n_R_assign_proc : process(m_axi_inputs_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_i_i_reg_761)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_i_i_i_reg_761 = ap_const_lv1_0))) then 
            inputs_blk_n_R <= m_axi_inputs_RVALID;
        else 
            inputs_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    inputs_offset_cast_i_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputs_offset1),19));
    inputs_offset_cast_i_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputs_offset),32));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_325_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_325_p3 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_ARADDR <= inputs_addr_reg_750;
    m_axi_inputs_ARBURST <= ap_const_lv2_0;
    m_axi_inputs_ARCACHE <= ap_const_lv4_0;
    m_axi_inputs_ARID <= ap_const_lv1_0;
    m_axi_inputs_ARLEN <= tmp_40_i_i_i_reg_724;
    m_axi_inputs_ARLOCK <= ap_const_lv2_0;
    m_axi_inputs_ARPROT <= ap_const_lv3_0;
    m_axi_inputs_ARQOS <= ap_const_lv4_0;
    m_axi_inputs_ARREGION <= ap_const_lv4_0;
    m_axi_inputs_ARSIZE <= ap_const_lv3_0;
    m_axi_inputs_ARUSER <= ap_const_lv1_0;

    m_axi_inputs_ARVALID_assign_proc : process(ap_CS_fsm_state8, ap_reg_ioackin_m_axi_inputs_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_inputs_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_inputs_ARVALID <= ap_const_logic_1;
        else 
            m_axi_inputs_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_AWADDR <= ap_const_lv32_0;
    m_axi_inputs_AWBURST <= ap_const_lv2_0;
    m_axi_inputs_AWCACHE <= ap_const_lv4_0;
    m_axi_inputs_AWID <= ap_const_lv1_0;
    m_axi_inputs_AWLEN <= ap_const_lv32_0;
    m_axi_inputs_AWLOCK <= ap_const_lv2_0;
    m_axi_inputs_AWPROT <= ap_const_lv3_0;
    m_axi_inputs_AWQOS <= ap_const_lv4_0;
    m_axi_inputs_AWREGION <= ap_const_lv4_0;
    m_axi_inputs_AWSIZE <= ap_const_lv3_0;
    m_axi_inputs_AWUSER <= ap_const_lv1_0;
    m_axi_inputs_AWVALID <= ap_const_logic_0;
    m_axi_inputs_BREADY <= ap_const_logic_0;

    m_axi_inputs_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_i_i_reg_761, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_i_i_reg_761 = ap_const_lv1_0))) then 
            m_axi_inputs_RREADY <= ap_const_logic_1;
        else 
            m_axi_inputs_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_WDATA <= ap_const_lv16_0;
    m_axi_inputs_WID <= ap_const_lv1_0;
    m_axi_inputs_WLAST <= ap_const_logic_0;
    m_axi_inputs_WSTRB <= ap_const_lv2_0;
    m_axi_inputs_WUSER <= ap_const_lv1_0;
    m_axi_inputs_WVALID <= ap_const_logic_0;
    nLoops_cast10_i_i_i_s_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nLoops_fu_349_p3),10));
    nLoops_fu_349_p3 <= 
        ap_const_lv4_8 when (tmp_15_i_i_i_i_i_fu_343_p2(0) = '1') else 
        tmp_294_fu_339_p1;
    n_fu_433_p2 <= std_logic_vector(unsigned(tmp_304_reg_234) + unsigned(ap_const_lv10_8));

    outputs_offset_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, outputs_offset_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_c_blk_n <= outputs_offset_c_full_n;
        else 
            outputs_offset_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outputs_offset_c_din <= outputs_offset2;

    outputs_offset_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, outputs_offset_c_full_n, outputs_offset_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (outputs_offset_out_full_n = ap_const_logic_0) or (outputs_offset_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_c_write <= ap_const_logic_1;
        else 
            outputs_offset_c_write <= ap_const_logic_0;
        end if; 
    end process;


    outputs_offset_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, outputs_offset_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_out_blk_n <= outputs_offset_out_full_n;
        else 
            outputs_offset_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outputs_offset_out_din <= outputs_offset;

    outputs_offset_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, outputs_offset_c_full_n, outputs_offset_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (outputs_offset_out_full_n = ap_const_logic_0) or (outputs_offset_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_out_write <= ap_const_logic_1;
        else 
            outputs_offset_out_write <= ap_const_logic_0;
        end if; 
    end process;

    rLoops_cast_i_i_i_i_s_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rLoops_fu_403_p3),5));
    rLoops_fu_403_p3 <= 
        ap_const_lv4_8 when (tmp_19_i_i_i_i_i_fu_397_p2(0) = '1') else 
        tmp_297_fu_393_p1;
    r_fu_451_p2 <= std_logic_vector(unsigned(tmp_306_reg_246) + unsigned(ap_const_lv5_8));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sel_tmp1_i_i_i_fu_541_p2 <= (tmp_299_reg_683 and tmp4_i_i_i_fu_536_p2);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sum_cast_i_i_i_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_i_i_fu_605_p2),64));
    sum_i_i_i_fu_605_p2 <= std_logic_vector(unsigned(tmp_38_cast_i_i_i_fu_601_p1) + unsigned(inputs_offset_cast_i_reg_637));
    tmp4_i_i_i_fu_536_p2 <= (tmp_303_fu_528_p3 and tmp_295_reg_660);
    tmp_15_i_i_i_i_i_fu_343_p2 <= "1" when (unsigned(tmp_i_i_i_i_i_fu_333_p2) > unsigned(ap_const_lv10_8)) else "0";
    tmp_16_i_i_i_i_i_fu_361_p2 <= std_logic_vector(unsigned(tmp_304_reg_234) + unsigned(nLoops_cast10_i_i_i_s_fu_357_p1));
    tmp_18_i_i_i_i_i_fu_387_p2 <= std_logic_vector(signed(ap_const_lv5_10) - signed(tmp_306_reg_246));
    tmp_19_i_i_i_i_i_fu_397_p2 <= "1" when (unsigned(tmp_18_i_i_i_i_i_fu_387_p2) > unsigned(ap_const_lv5_8)) else "0";
    tmp_20_i_i_i_i_i_fu_415_p2 <= std_logic_vector(unsigned(tmp_306_reg_246) + unsigned(rLoops_cast_i_i_i_i_s_fu_411_p1));
    tmp_22_i_i_i_fu_485_p4 <= tmp_306_reg_246(3 downto 1);
    tmp_23_i_i_i_i_i_fu_457_p2 <= std_logic_vector(signed(ap_const_lv5_10) - signed(tmp_308_reg_258));
    tmp_24_i_i_i_i_i_fu_467_p2 <= "1" when (unsigned(tmp_23_i_i_i_i_i_fu_457_p2) > unsigned(ap_const_lv5_8)) else "0";
    tmp_294_fu_339_p1 <= tmp_i_i_i_i_i_fu_333_p2(4 - 1 downto 0);
    tmp_296_fu_379_p3 <= tmp_306_reg_246(4 downto 4);
    tmp_297_fu_393_p1 <= tmp_18_i_i_i_i_i_fu_387_p2(4 - 1 downto 0);
    tmp_298_fu_421_p1 <= tmp_304_reg_234(9 - 1 downto 0);
    tmp_300_fu_443_p3 <= tmp_308_reg_258(4 downto 4);
    tmp_301_nbwritereq_fu_180_p3 <= (0=>data_buffer_V_full_n, others=>'-');
    tmp_302_fu_463_p1 <= tmp_23_i_i_i_i_i_fu_457_p2(4 - 1 downto 0);
    tmp_303_fu_528_p3 <= tmp_31_i_i_i_i_i_fu_523_p2(4 downto 4);
    tmp_305_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_304_reg_234),32));
    tmp_307_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_306_reg_246),32));
    tmp_309_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_308_reg_258),32));
    tmp_311_fu_570_p1 <= tr_0_i_i_i_i_i_i_reg_291(3 - 1 downto 0);
    tmp_31_i_i_i_i_i_fu_523_p2 <= std_logic_vector(unsigned(tmp_308_reg_258) + unsigned(cLoops_cast_i_i_i_i_s_reg_714));
    tmp_33_i_i_i_fu_574_p3 <= (tmp_311_fu_570_p1 & ap_const_lv4_0);
    tmp_34_i_i_i_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_i_i_i_fu_574_p3),18));
    tmp_35_i_i_i_fu_586_p2 <= std_logic_vector(unsigned(base_addr_d1_0_i_i_i_reg_270) + unsigned(tmp_34_i_i_i_fu_582_p1));
    tmp_36_i_i_i_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_i_i_i_fu_586_p2),19));
    tmp_37_i_i_i_fu_596_p2 <= std_logic_vector(unsigned(tmp_36_i_i_i_fu_592_p1) + unsigned(inputs_offset_cast_i_1_reg_642));
    tmp_38_cast_i_i_i_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_i_i_i_fu_596_p2),32));
    tmp_40_i_i_i_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cLoops_fu_473_p3),32));
    tmp_fu_325_p3 <= tmp_304_reg_234(9 downto 9);
    tmp_i_i_i_i_i_fu_333_p2 <= std_logic_vector(signed(ap_const_lv10_200) - signed(tmp_304_reg_234));
    tn_fu_517_p2 <= std_logic_vector(unsigned(tn_0_i_i_i_i_i_i_reg_280) + unsigned(ap_const_lv4_1));
    tr_fu_564_p2 <= std_logic_vector(unsigned(tr_0_i_i_i_i_i_i_reg_291) + unsigned(ap_const_lv4_1));
end behav;
