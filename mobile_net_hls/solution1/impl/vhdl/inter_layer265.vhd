-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inter_layer265 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_inputs_AWVALID : OUT STD_LOGIC;
    m_axi_inputs_AWREADY : IN STD_LOGIC;
    m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WVALID : OUT STD_LOGIC;
    m_axi_inputs_WREADY : IN STD_LOGIC;
    m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_WLAST : OUT STD_LOGIC;
    m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARVALID : OUT STD_LOGIC;
    m_axi_inputs_ARREADY : IN STD_LOGIC;
    m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RVALID : IN STD_LOGIC;
    m_axi_inputs_RREADY : OUT STD_LOGIC;
    m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_inputs_RLAST : IN STD_LOGIC;
    m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BVALID : IN STD_LOGIC;
    m_axi_inputs_BREADY : OUT STD_LOGIC;
    m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs_offset_empty_n : IN STD_LOGIC;
    inputs_offset_read : OUT STD_LOGIC;
    m_axi_weights_AWVALID : OUT STD_LOGIC;
    m_axi_weights_AWREADY : IN STD_LOGIC;
    m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WVALID : OUT STD_LOGIC;
    m_axi_weights_WREADY : IN STD_LOGIC;
    m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_WLAST : OUT STD_LOGIC;
    m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARVALID : OUT STD_LOGIC;
    m_axi_weights_ARREADY : IN STD_LOGIC;
    m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RVALID : IN STD_LOGIC;
    m_axi_weights_RREADY : OUT STD_LOGIC;
    m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_weights_RLAST : IN STD_LOGIC;
    m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BVALID : IN STD_LOGIC;
    m_axi_weights_BREADY : OUT STD_LOGIC;
    m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weights_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_offset_empty_n : IN STD_LOGIC;
    weights_offset_read : OUT STD_LOGIC;
    m_axi_betas_AWVALID : OUT STD_LOGIC;
    m_axi_betas_AWREADY : IN STD_LOGIC;
    m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_WVALID : OUT STD_LOGIC;
    m_axi_betas_WREADY : IN STD_LOGIC;
    m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_WLAST : OUT STD_LOGIC;
    m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_ARVALID : OUT STD_LOGIC;
    m_axi_betas_ARREADY : IN STD_LOGIC;
    m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_RVALID : IN STD_LOGIC;
    m_axi_betas_RREADY : OUT STD_LOGIC;
    m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_betas_RLAST : IN STD_LOGIC;
    m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_BVALID : IN STD_LOGIC;
    m_axi_betas_BREADY : OUT STD_LOGIC;
    m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    betas_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    betas_offset_empty_n : IN STD_LOGIC;
    betas_offset_read : OUT STD_LOGIC;
    m_axi_outputs_AWVALID : OUT STD_LOGIC;
    m_axi_outputs_AWREADY : IN STD_LOGIC;
    m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_WVALID : OUT STD_LOGIC;
    m_axi_outputs_WREADY : IN STD_LOGIC;
    m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_WLAST : OUT STD_LOGIC;
    m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_ARVALID : OUT STD_LOGIC;
    m_axi_outputs_ARREADY : IN STD_LOGIC;
    m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_RVALID : IN STD_LOGIC;
    m_axi_outputs_RREADY : OUT STD_LOGIC;
    m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_outputs_RLAST : IN STD_LOGIC;
    m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_BVALID : IN STD_LOGIC;
    m_axi_outputs_BREADY : OUT STD_LOGIC;
    m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    outputs_offset_empty_n : IN STD_LOGIC;
    outputs_offset_read : OUT STD_LOGIC;
    pre_ready_V_dout : IN STD_LOGIC;
    pre_ready_V_empty_n : IN STD_LOGIC;
    pre_ready_V_read : OUT STD_LOGIC;
    nxt_ready_V_din : OUT STD_LOGIC;
    nxt_ready_V_full_n : IN STD_LOGIC;
    nxt_ready_V_write : OUT STD_LOGIC );
end;


architecture behav of inter_layer265 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inputs_offset_blk_n : STD_LOGIC;
    signal weights_offset_blk_n : STD_LOGIC;
    signal betas_offset_blk_n : STD_LOGIC;
    signal outputs_offset_blk_n : STD_LOGIC;
    signal outputs_offset6_i_reg_282 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal betas_offset4_i_reg_287 : STD_LOGIC_VECTOR (30 downto 0);
    signal weights_offset2_i_reg_292 : STD_LOGIC_VECTOR (30 downto 0);
    signal inputs_offset1_i_reg_297 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_fu_232_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_reg_308 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_473_nbreadreq_fu_120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_474_nbwritereq_fu_128_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_i_fu_241_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_113_i_reg_313 : STD_LOGIC_VECTOR (17 downto 0);
    signal pingpang_flag_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pingpang_flag_reg_318 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_ap_start : STD_LOGIC;
    signal grp_conv_4_fu_173_ap_done : STD_LOGIC;
    signal grp_conv_4_fu_173_ap_idle : STD_LOGIC;
    signal grp_conv_4_fu_173_ap_ready : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_inputs_AWVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_inputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_WVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_inputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_WLAST : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_inputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_inputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_inputs_RREADY : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_inputs_BREADY : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_weights_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_betas_AWVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_betas_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_WVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_betas_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_WLAST : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_betas_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_betas_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_betas_RREADY : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_betas_BREADY : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_outputs_AWVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_WVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_WLAST : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARVALID : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_m_axi_outputs_RREADY : STD_LOGIC;
    signal grp_conv_4_fu_173_m_axi_outputs_BREADY : STD_LOGIC;
    signal grp_conv_4_fu_173_cntl_V_din : STD_LOGIC;
    signal grp_conv_4_fu_173_cntl_V_write : STD_LOGIC;
    signal pingpang_flag_i_reg_161 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_08_i_load_load_fu_266_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_4_fu_173_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal cntl_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal cntl_V_full_n : STD_LOGIC;
    signal cntl_V_write : STD_LOGIC;
    signal tmp_475_nbreadreq_fu_136_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cntl_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal cntl_V_empty_n : STD_LOGIC;
    signal cntl_V_read : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_88 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component conv_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_inputs_AWVALID : OUT STD_LOGIC;
        m_axi_inputs_AWREADY : IN STD_LOGIC;
        m_axi_inputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WVALID : OUT STD_LOGIC;
        m_axi_inputs_WREADY : IN STD_LOGIC;
        m_axi_inputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_WLAST : OUT STD_LOGIC;
        m_axi_inputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARVALID : OUT STD_LOGIC;
        m_axi_inputs_ARREADY : IN STD_LOGIC;
        m_axi_inputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_inputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_inputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_inputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RVALID : IN STD_LOGIC;
        m_axi_inputs_RREADY : OUT STD_LOGIC;
        m_axi_inputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_inputs_RLAST : IN STD_LOGIC;
        m_axi_inputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BVALID : IN STD_LOGIC;
        m_axi_inputs_BREADY : OUT STD_LOGIC;
        m_axi_inputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_inputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_inputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        inputs_offset1 : IN STD_LOGIC_VECTOR (16 downto 0);
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        m_axi_betas_AWVALID : OUT STD_LOGIC;
        m_axi_betas_AWREADY : IN STD_LOGIC;
        m_axi_betas_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WVALID : OUT STD_LOGIC;
        m_axi_betas_WREADY : IN STD_LOGIC;
        m_axi_betas_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_WLAST : OUT STD_LOGIC;
        m_axi_betas_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARVALID : OUT STD_LOGIC;
        m_axi_betas_ARREADY : IN STD_LOGIC;
        m_axi_betas_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_betas_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_betas_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_betas_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RVALID : IN STD_LOGIC;
        m_axi_betas_RREADY : OUT STD_LOGIC;
        m_axi_betas_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_betas_RLAST : IN STD_LOGIC;
        m_axi_betas_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BVALID : IN STD_LOGIC;
        m_axi_betas_BREADY : OUT STD_LOGIC;
        m_axi_betas_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_betas_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_betas_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        betas_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset : IN STD_LOGIC_VECTOR (30 downto 0);
        outputs_offset2 : IN STD_LOGIC_VECTOR (17 downto 0);
        cntl_V_din : OUT STD_LOGIC;
        cntl_V_full_n : IN STD_LOGIC;
        cntl_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w1_d1_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_conv_4_fu_173 : component conv_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_4_fu_173_ap_start,
        ap_done => grp_conv_4_fu_173_ap_done,
        ap_idle => grp_conv_4_fu_173_ap_idle,
        ap_ready => grp_conv_4_fu_173_ap_ready,
        m_axi_inputs_AWVALID => grp_conv_4_fu_173_m_axi_inputs_AWVALID,
        m_axi_inputs_AWREADY => ap_const_logic_0,
        m_axi_inputs_AWADDR => grp_conv_4_fu_173_m_axi_inputs_AWADDR,
        m_axi_inputs_AWID => grp_conv_4_fu_173_m_axi_inputs_AWID,
        m_axi_inputs_AWLEN => grp_conv_4_fu_173_m_axi_inputs_AWLEN,
        m_axi_inputs_AWSIZE => grp_conv_4_fu_173_m_axi_inputs_AWSIZE,
        m_axi_inputs_AWBURST => grp_conv_4_fu_173_m_axi_inputs_AWBURST,
        m_axi_inputs_AWLOCK => grp_conv_4_fu_173_m_axi_inputs_AWLOCK,
        m_axi_inputs_AWCACHE => grp_conv_4_fu_173_m_axi_inputs_AWCACHE,
        m_axi_inputs_AWPROT => grp_conv_4_fu_173_m_axi_inputs_AWPROT,
        m_axi_inputs_AWQOS => grp_conv_4_fu_173_m_axi_inputs_AWQOS,
        m_axi_inputs_AWREGION => grp_conv_4_fu_173_m_axi_inputs_AWREGION,
        m_axi_inputs_AWUSER => grp_conv_4_fu_173_m_axi_inputs_AWUSER,
        m_axi_inputs_WVALID => grp_conv_4_fu_173_m_axi_inputs_WVALID,
        m_axi_inputs_WREADY => ap_const_logic_0,
        m_axi_inputs_WDATA => grp_conv_4_fu_173_m_axi_inputs_WDATA,
        m_axi_inputs_WSTRB => grp_conv_4_fu_173_m_axi_inputs_WSTRB,
        m_axi_inputs_WLAST => grp_conv_4_fu_173_m_axi_inputs_WLAST,
        m_axi_inputs_WID => grp_conv_4_fu_173_m_axi_inputs_WID,
        m_axi_inputs_WUSER => grp_conv_4_fu_173_m_axi_inputs_WUSER,
        m_axi_inputs_ARVALID => grp_conv_4_fu_173_m_axi_inputs_ARVALID,
        m_axi_inputs_ARREADY => m_axi_inputs_ARREADY,
        m_axi_inputs_ARADDR => grp_conv_4_fu_173_m_axi_inputs_ARADDR,
        m_axi_inputs_ARID => grp_conv_4_fu_173_m_axi_inputs_ARID,
        m_axi_inputs_ARLEN => grp_conv_4_fu_173_m_axi_inputs_ARLEN,
        m_axi_inputs_ARSIZE => grp_conv_4_fu_173_m_axi_inputs_ARSIZE,
        m_axi_inputs_ARBURST => grp_conv_4_fu_173_m_axi_inputs_ARBURST,
        m_axi_inputs_ARLOCK => grp_conv_4_fu_173_m_axi_inputs_ARLOCK,
        m_axi_inputs_ARCACHE => grp_conv_4_fu_173_m_axi_inputs_ARCACHE,
        m_axi_inputs_ARPROT => grp_conv_4_fu_173_m_axi_inputs_ARPROT,
        m_axi_inputs_ARQOS => grp_conv_4_fu_173_m_axi_inputs_ARQOS,
        m_axi_inputs_ARREGION => grp_conv_4_fu_173_m_axi_inputs_ARREGION,
        m_axi_inputs_ARUSER => grp_conv_4_fu_173_m_axi_inputs_ARUSER,
        m_axi_inputs_RVALID => m_axi_inputs_RVALID,
        m_axi_inputs_RREADY => grp_conv_4_fu_173_m_axi_inputs_RREADY,
        m_axi_inputs_RDATA => m_axi_inputs_RDATA,
        m_axi_inputs_RLAST => m_axi_inputs_RLAST,
        m_axi_inputs_RID => m_axi_inputs_RID,
        m_axi_inputs_RUSER => m_axi_inputs_RUSER,
        m_axi_inputs_RRESP => m_axi_inputs_RRESP,
        m_axi_inputs_BVALID => ap_const_logic_0,
        m_axi_inputs_BREADY => grp_conv_4_fu_173_m_axi_inputs_BREADY,
        m_axi_inputs_BRESP => ap_const_lv2_0,
        m_axi_inputs_BID => ap_const_lv1_0,
        m_axi_inputs_BUSER => ap_const_lv1_0,
        inputs_offset => inputs_offset1_i_reg_297,
        inputs_offset1 => tmp_i_reg_308,
        m_axi_weights_AWVALID => grp_conv_4_fu_173_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_conv_4_fu_173_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_conv_4_fu_173_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_conv_4_fu_173_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_conv_4_fu_173_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_conv_4_fu_173_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_conv_4_fu_173_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_conv_4_fu_173_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_conv_4_fu_173_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_conv_4_fu_173_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_conv_4_fu_173_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_conv_4_fu_173_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_conv_4_fu_173_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_conv_4_fu_173_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_conv_4_fu_173_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_conv_4_fu_173_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_conv_4_fu_173_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_conv_4_fu_173_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_conv_4_fu_173_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => m_axi_weights_ARREADY,
        m_axi_weights_ARADDR => grp_conv_4_fu_173_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_conv_4_fu_173_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_conv_4_fu_173_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_conv_4_fu_173_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_conv_4_fu_173_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_conv_4_fu_173_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_conv_4_fu_173_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_conv_4_fu_173_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_conv_4_fu_173_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_conv_4_fu_173_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_conv_4_fu_173_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => m_axi_weights_RVALID,
        m_axi_weights_RREADY => grp_conv_4_fu_173_m_axi_weights_RREADY,
        m_axi_weights_RDATA => m_axi_weights_RDATA,
        m_axi_weights_RLAST => m_axi_weights_RLAST,
        m_axi_weights_RID => m_axi_weights_RID,
        m_axi_weights_RUSER => m_axi_weights_RUSER,
        m_axi_weights_RRESP => m_axi_weights_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_conv_4_fu_173_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset => weights_offset2_i_reg_292,
        m_axi_betas_AWVALID => grp_conv_4_fu_173_m_axi_betas_AWVALID,
        m_axi_betas_AWREADY => ap_const_logic_0,
        m_axi_betas_AWADDR => grp_conv_4_fu_173_m_axi_betas_AWADDR,
        m_axi_betas_AWID => grp_conv_4_fu_173_m_axi_betas_AWID,
        m_axi_betas_AWLEN => grp_conv_4_fu_173_m_axi_betas_AWLEN,
        m_axi_betas_AWSIZE => grp_conv_4_fu_173_m_axi_betas_AWSIZE,
        m_axi_betas_AWBURST => grp_conv_4_fu_173_m_axi_betas_AWBURST,
        m_axi_betas_AWLOCK => grp_conv_4_fu_173_m_axi_betas_AWLOCK,
        m_axi_betas_AWCACHE => grp_conv_4_fu_173_m_axi_betas_AWCACHE,
        m_axi_betas_AWPROT => grp_conv_4_fu_173_m_axi_betas_AWPROT,
        m_axi_betas_AWQOS => grp_conv_4_fu_173_m_axi_betas_AWQOS,
        m_axi_betas_AWREGION => grp_conv_4_fu_173_m_axi_betas_AWREGION,
        m_axi_betas_AWUSER => grp_conv_4_fu_173_m_axi_betas_AWUSER,
        m_axi_betas_WVALID => grp_conv_4_fu_173_m_axi_betas_WVALID,
        m_axi_betas_WREADY => ap_const_logic_0,
        m_axi_betas_WDATA => grp_conv_4_fu_173_m_axi_betas_WDATA,
        m_axi_betas_WSTRB => grp_conv_4_fu_173_m_axi_betas_WSTRB,
        m_axi_betas_WLAST => grp_conv_4_fu_173_m_axi_betas_WLAST,
        m_axi_betas_WID => grp_conv_4_fu_173_m_axi_betas_WID,
        m_axi_betas_WUSER => grp_conv_4_fu_173_m_axi_betas_WUSER,
        m_axi_betas_ARVALID => grp_conv_4_fu_173_m_axi_betas_ARVALID,
        m_axi_betas_ARREADY => m_axi_betas_ARREADY,
        m_axi_betas_ARADDR => grp_conv_4_fu_173_m_axi_betas_ARADDR,
        m_axi_betas_ARID => grp_conv_4_fu_173_m_axi_betas_ARID,
        m_axi_betas_ARLEN => grp_conv_4_fu_173_m_axi_betas_ARLEN,
        m_axi_betas_ARSIZE => grp_conv_4_fu_173_m_axi_betas_ARSIZE,
        m_axi_betas_ARBURST => grp_conv_4_fu_173_m_axi_betas_ARBURST,
        m_axi_betas_ARLOCK => grp_conv_4_fu_173_m_axi_betas_ARLOCK,
        m_axi_betas_ARCACHE => grp_conv_4_fu_173_m_axi_betas_ARCACHE,
        m_axi_betas_ARPROT => grp_conv_4_fu_173_m_axi_betas_ARPROT,
        m_axi_betas_ARQOS => grp_conv_4_fu_173_m_axi_betas_ARQOS,
        m_axi_betas_ARREGION => grp_conv_4_fu_173_m_axi_betas_ARREGION,
        m_axi_betas_ARUSER => grp_conv_4_fu_173_m_axi_betas_ARUSER,
        m_axi_betas_RVALID => m_axi_betas_RVALID,
        m_axi_betas_RREADY => grp_conv_4_fu_173_m_axi_betas_RREADY,
        m_axi_betas_RDATA => m_axi_betas_RDATA,
        m_axi_betas_RLAST => m_axi_betas_RLAST,
        m_axi_betas_RID => m_axi_betas_RID,
        m_axi_betas_RUSER => m_axi_betas_RUSER,
        m_axi_betas_RRESP => m_axi_betas_RRESP,
        m_axi_betas_BVALID => ap_const_logic_0,
        m_axi_betas_BREADY => grp_conv_4_fu_173_m_axi_betas_BREADY,
        m_axi_betas_BRESP => ap_const_lv2_0,
        m_axi_betas_BID => ap_const_lv1_0,
        m_axi_betas_BUSER => ap_const_lv1_0,
        betas_offset => betas_offset4_i_reg_287,
        m_axi_outputs_AWVALID => grp_conv_4_fu_173_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => m_axi_outputs_AWREADY,
        m_axi_outputs_AWADDR => grp_conv_4_fu_173_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => grp_conv_4_fu_173_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => grp_conv_4_fu_173_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => grp_conv_4_fu_173_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => grp_conv_4_fu_173_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => grp_conv_4_fu_173_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => grp_conv_4_fu_173_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => grp_conv_4_fu_173_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => grp_conv_4_fu_173_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => grp_conv_4_fu_173_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => grp_conv_4_fu_173_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => grp_conv_4_fu_173_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => m_axi_outputs_WREADY,
        m_axi_outputs_WDATA => grp_conv_4_fu_173_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => grp_conv_4_fu_173_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => grp_conv_4_fu_173_m_axi_outputs_WLAST,
        m_axi_outputs_WID => grp_conv_4_fu_173_m_axi_outputs_WID,
        m_axi_outputs_WUSER => grp_conv_4_fu_173_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => grp_conv_4_fu_173_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => grp_conv_4_fu_173_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => grp_conv_4_fu_173_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => grp_conv_4_fu_173_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => grp_conv_4_fu_173_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => grp_conv_4_fu_173_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => grp_conv_4_fu_173_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => grp_conv_4_fu_173_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => grp_conv_4_fu_173_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => grp_conv_4_fu_173_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => grp_conv_4_fu_173_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => grp_conv_4_fu_173_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => grp_conv_4_fu_173_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv16_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => m_axi_outputs_BVALID,
        m_axi_outputs_BREADY => grp_conv_4_fu_173_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => m_axi_outputs_BRESP,
        m_axi_outputs_BID => m_axi_outputs_BID,
        m_axi_outputs_BUSER => m_axi_outputs_BUSER,
        outputs_offset => outputs_offset6_i_reg_282,
        outputs_offset2 => tmp_113_i_reg_313,
        cntl_V_din => grp_conv_4_fu_173_cntl_V_din,
        cntl_V_full_n => cntl_V_full_n,
        cntl_V_write => grp_conv_4_fu_173_cntl_V_write);

    cntl_V_fifo_U : component fifo_w1_d1_A_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cntl_V_din,
        if_full_n => cntl_V_full_n,
        if_write => cntl_V_write,
        if_dout => cntl_V_dout,
        if_empty_n => cntl_V_empty_n,
        if_read => cntl_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((p_08_i_load_load_fu_266_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_4_fu_173_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_4_fu_173_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_conv_4_fu_173_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_4_fu_173_ap_ready = ap_const_logic_1)) then 
                    grp_conv_4_fu_173_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pingpang_flag_i_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_08_i_load_load_fu_266_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                pingpang_flag_i_reg_161 <= pingpang_flag_reg_318;
            elsif ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (betas_offset_empty_n = ap_const_logic_0) or (weights_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pingpang_flag_i_reg_161 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (betas_offset_empty_n = ap_const_logic_0) or (weights_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                betas_offset4_i_reg_287 <= betas_offset_dout(31 downto 1);
                inputs_offset1_i_reg_297 <= inputs_offset_dout(31 downto 1);
                outputs_offset6_i_reg_282 <= outputs_offset_dout(31 downto 1);
                weights_offset2_i_reg_292 <= weights_offset_dout(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                pingpang_flag_reg_318 <= pingpang_flag_fu_250_p2;
                    tmp_113_i_reg_313(17) <= tmp_113_i_fu_241_p3(17);
                    tmp_i_reg_308(16) <= tmp_i_fu_232_p3(16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_475_nbreadreq_fu_136_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_fu_88 <= (0=>pre_ready_V_dout, others=>'-');
            end if;
        end if;
    end process;
    tmp_i_reg_308(15 downto 0) <= "0000000000000000";
    tmp_113_i_reg_313(16 downto 0) <= "00000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, inputs_offset_empty_n, weights_offset_empty_n, betas_offset_empty_n, outputs_offset_empty_n, ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_ap_done, ap_CS_fsm_state6, p_08_i_load_load_fu_266_p1, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (betas_offset_empty_n = ap_const_logic_0) or (weights_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_0) or (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_conv_4_fu_173_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((p_08_i_load_load_fu_266_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, inputs_offset_empty_n, weights_offset_empty_n, betas_offset_empty_n, outputs_offset_empty_n)
    begin
                ap_block_state1 <= ((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (betas_offset_empty_n = ap_const_logic_0) or (weights_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6, p_08_i_load_load_fu_266_p1)
    begin
        if (((p_08_i_load_load_fu_266_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, p_08_i_load_load_fu_266_p1)
    begin
        if (((p_08_i_load_load_fu_266_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    betas_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, betas_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            betas_offset_blk_n <= betas_offset_empty_n;
        else 
            betas_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    betas_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputs_offset_empty_n, weights_offset_empty_n, betas_offset_empty_n, outputs_offset_empty_n)
    begin
        if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (betas_offset_empty_n = ap_const_logic_0) or (weights_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            betas_offset_read <= ap_const_logic_1;
        else 
            betas_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    cntl_V_din <= (0=>grp_conv_4_fu_173_cntl_V_din, others=>'-');

    cntl_V_read_assign_proc : process(tmp_475_nbreadreq_fu_136_p3, cntl_V_empty_n, ap_CS_fsm_state5)
    begin
        if (((tmp_475_nbreadreq_fu_136_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (cntl_V_empty_n = ap_const_logic_1))) then 
            cntl_V_read <= ap_const_logic_1;
        else 
            cntl_V_read <= ap_const_logic_0;
        end if; 
    end process;


    cntl_V_write_assign_proc : process(grp_conv_4_fu_173_cntl_V_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cntl_V_write <= grp_conv_4_fu_173_cntl_V_write;
        else 
            cntl_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_4_fu_173_ap_start <= grp_conv_4_fu_173_ap_start_reg;

    inputs_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputs_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inputs_offset_blk_n <= inputs_offset_empty_n;
        else 
            inputs_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inputs_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputs_offset_empty_n, weights_offset_empty_n, betas_offset_empty_n, outputs_offset_empty_n)
    begin
        if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (betas_offset_empty_n = ap_const_logic_0) or (weights_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inputs_offset_read <= ap_const_logic_1;
        else 
            inputs_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_betas_ARADDR <= grp_conv_4_fu_173_m_axi_betas_ARADDR;
    m_axi_betas_ARBURST <= grp_conv_4_fu_173_m_axi_betas_ARBURST;
    m_axi_betas_ARCACHE <= grp_conv_4_fu_173_m_axi_betas_ARCACHE;
    m_axi_betas_ARID <= grp_conv_4_fu_173_m_axi_betas_ARID;
    m_axi_betas_ARLEN <= grp_conv_4_fu_173_m_axi_betas_ARLEN;
    m_axi_betas_ARLOCK <= grp_conv_4_fu_173_m_axi_betas_ARLOCK;
    m_axi_betas_ARPROT <= grp_conv_4_fu_173_m_axi_betas_ARPROT;
    m_axi_betas_ARQOS <= grp_conv_4_fu_173_m_axi_betas_ARQOS;
    m_axi_betas_ARREGION <= grp_conv_4_fu_173_m_axi_betas_ARREGION;
    m_axi_betas_ARSIZE <= grp_conv_4_fu_173_m_axi_betas_ARSIZE;
    m_axi_betas_ARUSER <= grp_conv_4_fu_173_m_axi_betas_ARUSER;

    m_axi_betas_ARVALID_assign_proc : process(ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_m_axi_betas_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_betas_ARVALID <= grp_conv_4_fu_173_m_axi_betas_ARVALID;
        else 
            m_axi_betas_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_betas_AWADDR <= ap_const_lv32_0;
    m_axi_betas_AWBURST <= ap_const_lv2_0;
    m_axi_betas_AWCACHE <= ap_const_lv4_0;
    m_axi_betas_AWID <= ap_const_lv1_0;
    m_axi_betas_AWLEN <= ap_const_lv32_0;
    m_axi_betas_AWLOCK <= ap_const_lv2_0;
    m_axi_betas_AWPROT <= ap_const_lv3_0;
    m_axi_betas_AWQOS <= ap_const_lv4_0;
    m_axi_betas_AWREGION <= ap_const_lv4_0;
    m_axi_betas_AWSIZE <= ap_const_lv3_0;
    m_axi_betas_AWUSER <= ap_const_lv1_0;
    m_axi_betas_AWVALID <= ap_const_logic_0;
    m_axi_betas_BREADY <= ap_const_logic_0;

    m_axi_betas_RREADY_assign_proc : process(ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_m_axi_betas_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_betas_RREADY <= grp_conv_4_fu_173_m_axi_betas_RREADY;
        else 
            m_axi_betas_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_betas_WDATA <= ap_const_lv16_0;
    m_axi_betas_WID <= ap_const_lv1_0;
    m_axi_betas_WLAST <= ap_const_logic_0;
    m_axi_betas_WSTRB <= ap_const_lv2_0;
    m_axi_betas_WUSER <= ap_const_lv1_0;
    m_axi_betas_WVALID <= ap_const_logic_0;
    m_axi_inputs_ARADDR <= grp_conv_4_fu_173_m_axi_inputs_ARADDR;
    m_axi_inputs_ARBURST <= grp_conv_4_fu_173_m_axi_inputs_ARBURST;
    m_axi_inputs_ARCACHE <= grp_conv_4_fu_173_m_axi_inputs_ARCACHE;
    m_axi_inputs_ARID <= grp_conv_4_fu_173_m_axi_inputs_ARID;
    m_axi_inputs_ARLEN <= grp_conv_4_fu_173_m_axi_inputs_ARLEN;
    m_axi_inputs_ARLOCK <= grp_conv_4_fu_173_m_axi_inputs_ARLOCK;
    m_axi_inputs_ARPROT <= grp_conv_4_fu_173_m_axi_inputs_ARPROT;
    m_axi_inputs_ARQOS <= grp_conv_4_fu_173_m_axi_inputs_ARQOS;
    m_axi_inputs_ARREGION <= grp_conv_4_fu_173_m_axi_inputs_ARREGION;
    m_axi_inputs_ARSIZE <= grp_conv_4_fu_173_m_axi_inputs_ARSIZE;
    m_axi_inputs_ARUSER <= grp_conv_4_fu_173_m_axi_inputs_ARUSER;

    m_axi_inputs_ARVALID_assign_proc : process(ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_m_axi_inputs_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_inputs_ARVALID <= grp_conv_4_fu_173_m_axi_inputs_ARVALID;
        else 
            m_axi_inputs_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_AWADDR <= ap_const_lv32_0;
    m_axi_inputs_AWBURST <= ap_const_lv2_0;
    m_axi_inputs_AWCACHE <= ap_const_lv4_0;
    m_axi_inputs_AWID <= ap_const_lv1_0;
    m_axi_inputs_AWLEN <= ap_const_lv32_0;
    m_axi_inputs_AWLOCK <= ap_const_lv2_0;
    m_axi_inputs_AWPROT <= ap_const_lv3_0;
    m_axi_inputs_AWQOS <= ap_const_lv4_0;
    m_axi_inputs_AWREGION <= ap_const_lv4_0;
    m_axi_inputs_AWSIZE <= ap_const_lv3_0;
    m_axi_inputs_AWUSER <= ap_const_lv1_0;
    m_axi_inputs_AWVALID <= ap_const_logic_0;
    m_axi_inputs_BREADY <= ap_const_logic_0;

    m_axi_inputs_RREADY_assign_proc : process(ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_m_axi_inputs_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_inputs_RREADY <= grp_conv_4_fu_173_m_axi_inputs_RREADY;
        else 
            m_axi_inputs_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_inputs_WDATA <= ap_const_lv16_0;
    m_axi_inputs_WID <= ap_const_lv1_0;
    m_axi_inputs_WLAST <= ap_const_logic_0;
    m_axi_inputs_WSTRB <= ap_const_lv2_0;
    m_axi_inputs_WUSER <= ap_const_lv1_0;
    m_axi_inputs_WVALID <= ap_const_logic_0;
    m_axi_outputs_ARADDR <= ap_const_lv32_0;
    m_axi_outputs_ARBURST <= ap_const_lv2_0;
    m_axi_outputs_ARCACHE <= ap_const_lv4_0;
    m_axi_outputs_ARID <= ap_const_lv1_0;
    m_axi_outputs_ARLEN <= ap_const_lv32_0;
    m_axi_outputs_ARLOCK <= ap_const_lv2_0;
    m_axi_outputs_ARPROT <= ap_const_lv3_0;
    m_axi_outputs_ARQOS <= ap_const_lv4_0;
    m_axi_outputs_ARREGION <= ap_const_lv4_0;
    m_axi_outputs_ARSIZE <= ap_const_lv3_0;
    m_axi_outputs_ARUSER <= ap_const_lv1_0;
    m_axi_outputs_ARVALID <= ap_const_logic_0;
    m_axi_outputs_AWADDR <= grp_conv_4_fu_173_m_axi_outputs_AWADDR;
    m_axi_outputs_AWBURST <= grp_conv_4_fu_173_m_axi_outputs_AWBURST;
    m_axi_outputs_AWCACHE <= grp_conv_4_fu_173_m_axi_outputs_AWCACHE;
    m_axi_outputs_AWID <= grp_conv_4_fu_173_m_axi_outputs_AWID;
    m_axi_outputs_AWLEN <= grp_conv_4_fu_173_m_axi_outputs_AWLEN;
    m_axi_outputs_AWLOCK <= grp_conv_4_fu_173_m_axi_outputs_AWLOCK;
    m_axi_outputs_AWPROT <= grp_conv_4_fu_173_m_axi_outputs_AWPROT;
    m_axi_outputs_AWQOS <= grp_conv_4_fu_173_m_axi_outputs_AWQOS;
    m_axi_outputs_AWREGION <= grp_conv_4_fu_173_m_axi_outputs_AWREGION;
    m_axi_outputs_AWSIZE <= grp_conv_4_fu_173_m_axi_outputs_AWSIZE;
    m_axi_outputs_AWUSER <= grp_conv_4_fu_173_m_axi_outputs_AWUSER;

    m_axi_outputs_AWVALID_assign_proc : process(ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_m_axi_outputs_AWVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_outputs_AWVALID <= grp_conv_4_fu_173_m_axi_outputs_AWVALID;
        else 
            m_axi_outputs_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_outputs_BREADY_assign_proc : process(ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_m_axi_outputs_BREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_outputs_BREADY <= grp_conv_4_fu_173_m_axi_outputs_BREADY;
        else 
            m_axi_outputs_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_outputs_RREADY <= ap_const_logic_0;
    m_axi_outputs_WDATA <= grp_conv_4_fu_173_m_axi_outputs_WDATA;
    m_axi_outputs_WID <= grp_conv_4_fu_173_m_axi_outputs_WID;
    m_axi_outputs_WLAST <= grp_conv_4_fu_173_m_axi_outputs_WLAST;
    m_axi_outputs_WSTRB <= grp_conv_4_fu_173_m_axi_outputs_WSTRB;
    m_axi_outputs_WUSER <= grp_conv_4_fu_173_m_axi_outputs_WUSER;

    m_axi_outputs_WVALID_assign_proc : process(ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_m_axi_outputs_WVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_outputs_WVALID <= grp_conv_4_fu_173_m_axi_outputs_WVALID;
        else 
            m_axi_outputs_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_ARADDR <= grp_conv_4_fu_173_m_axi_weights_ARADDR;
    m_axi_weights_ARBURST <= grp_conv_4_fu_173_m_axi_weights_ARBURST;
    m_axi_weights_ARCACHE <= grp_conv_4_fu_173_m_axi_weights_ARCACHE;
    m_axi_weights_ARID <= grp_conv_4_fu_173_m_axi_weights_ARID;
    m_axi_weights_ARLEN <= grp_conv_4_fu_173_m_axi_weights_ARLEN;
    m_axi_weights_ARLOCK <= grp_conv_4_fu_173_m_axi_weights_ARLOCK;
    m_axi_weights_ARPROT <= grp_conv_4_fu_173_m_axi_weights_ARPROT;
    m_axi_weights_ARQOS <= grp_conv_4_fu_173_m_axi_weights_ARQOS;
    m_axi_weights_ARREGION <= grp_conv_4_fu_173_m_axi_weights_ARREGION;
    m_axi_weights_ARSIZE <= grp_conv_4_fu_173_m_axi_weights_ARSIZE;
    m_axi_weights_ARUSER <= grp_conv_4_fu_173_m_axi_weights_ARUSER;

    m_axi_weights_ARVALID_assign_proc : process(ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_m_axi_weights_ARVALID, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_weights_ARVALID <= grp_conv_4_fu_173_m_axi_weights_ARVALID;
        else 
            m_axi_weights_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_AWADDR <= ap_const_lv32_0;
    m_axi_weights_AWBURST <= ap_const_lv2_0;
    m_axi_weights_AWCACHE <= ap_const_lv4_0;
    m_axi_weights_AWID <= ap_const_lv1_0;
    m_axi_weights_AWLEN <= ap_const_lv32_0;
    m_axi_weights_AWLOCK <= ap_const_lv2_0;
    m_axi_weights_AWPROT <= ap_const_lv3_0;
    m_axi_weights_AWQOS <= ap_const_lv4_0;
    m_axi_weights_AWREGION <= ap_const_lv4_0;
    m_axi_weights_AWSIZE <= ap_const_lv3_0;
    m_axi_weights_AWUSER <= ap_const_lv1_0;
    m_axi_weights_AWVALID <= ap_const_logic_0;
    m_axi_weights_BREADY <= ap_const_logic_0;

    m_axi_weights_RREADY_assign_proc : process(ap_CS_fsm_state3, tmp_473_nbreadreq_fu_120_p3, tmp_474_nbwritereq_fu_128_p3, grp_conv_4_fu_173_m_axi_weights_RREADY, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_474_nbwritereq_fu_128_p3 = ap_const_lv1_1) and (tmp_473_nbreadreq_fu_120_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_weights_RREADY <= grp_conv_4_fu_173_m_axi_weights_RREADY;
        else 
            m_axi_weights_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_WDATA <= ap_const_lv16_0;
    m_axi_weights_WID <= ap_const_lv1_0;
    m_axi_weights_WLAST <= ap_const_logic_0;
    m_axi_weights_WSTRB <= ap_const_lv2_0;
    m_axi_weights_WUSER <= ap_const_lv1_0;
    m_axi_weights_WVALID <= ap_const_logic_0;
    nxt_ready_V_din <= pre_ready_V_dout;

    nxt_ready_V_write_assign_proc : process(nxt_ready_V_full_n, tmp_475_nbreadreq_fu_136_p3, ap_CS_fsm_state5)
    begin
        if (((tmp_475_nbreadreq_fu_136_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (nxt_ready_V_full_n = ap_const_logic_1))) then 
            nxt_ready_V_write <= ap_const_logic_1;
        else 
            nxt_ready_V_write <= ap_const_logic_0;
        end if; 
    end process;


    outputs_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputs_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_blk_n <= outputs_offset_empty_n;
        else 
            outputs_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outputs_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputs_offset_empty_n, weights_offset_empty_n, betas_offset_empty_n, outputs_offset_empty_n)
    begin
        if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (betas_offset_empty_n = ap_const_logic_0) or (weights_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_offset_read <= ap_const_logic_1;
        else 
            outputs_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    p_08_i_load_load_fu_266_p1 <= tmp_fu_88;
    pingpang_flag_fu_250_p2 <= (pingpang_flag_i_reg_161 xor ap_const_lv1_1);

    pre_ready_V_read_assign_proc : process(pre_ready_V_empty_n, tmp_475_nbreadreq_fu_136_p3, ap_CS_fsm_state5)
    begin
        if (((tmp_475_nbreadreq_fu_136_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (pre_ready_V_empty_n = ap_const_logic_1))) then 
            pre_ready_V_read <= ap_const_logic_1;
        else 
            pre_ready_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_113_i_fu_241_p3 <= 
        ap_const_lv18_20000 when (pingpang_flag_i_reg_161(0) = '1') else 
        ap_const_lv18_0;
    tmp_473_nbreadreq_fu_120_p3 <= (0=>pre_ready_V_empty_n, others=>'-');
    tmp_474_nbwritereq_fu_128_p3 <= (0=>nxt_ready_V_full_n, others=>'-');
    tmp_475_nbreadreq_fu_136_p3 <= (0=>cntl_V_empty_n, others=>'-');
    tmp_i_fu_232_p3 <= 
        ap_const_lv17_10000 when (pingpang_flag_i_reg_161(0) = '1') else 
        ap_const_lv17_0;

    weights_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, weights_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_offset_blk_n <= weights_offset_empty_n;
        else 
            weights_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    weights_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inputs_offset_empty_n, weights_offset_empty_n, betas_offset_empty_n, outputs_offset_empty_n)
    begin
        if ((not(((inputs_offset_empty_n = ap_const_logic_0) or (outputs_offset_empty_n = ap_const_logic_0) or (betas_offset_empty_n = ap_const_logic_0) or (weights_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_offset_read <= ap_const_logic_1;
        else 
            weights_offset_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
