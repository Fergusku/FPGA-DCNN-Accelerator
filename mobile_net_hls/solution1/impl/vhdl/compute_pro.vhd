-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_pro is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_buffer_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    input_buffer_V_empty_n : IN STD_LOGIC;
    input_buffer_V_read : OUT STD_LOGIC;
    output_buffer_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_buffer_V_full_n : IN STD_LOGIC;
    output_buffer_V_write : OUT STD_LOGIC;
    data_buffer_V_dout : IN STD_LOGIC;
    data_buffer_V_empty_n : IN STD_LOGIC;
    data_buffer_V_read : OUT STD_LOGIC;
    result_buffer_V_din : OUT STD_LOGIC;
    result_buffer_V_full_n : IN STD_LOGIC;
    result_buffer_V_write : OUT STD_LOGIC;
    data_n_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_n_V_empty_n : IN STD_LOGIC;
    data_n_V_read : OUT STD_LOGIC;
    data_r_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_r_V_empty_n : IN STD_LOGIC;
    data_r_V_read : OUT STD_LOGIC;
    data_c_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_c_V_empty_n : IN STD_LOGIC;
    data_c_V_read : OUT STD_LOGIC;
    result_n_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_n_V_full_n : IN STD_LOGIC;
    result_n_V_write : OUT STD_LOGIC;
    result_r_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_r_V_full_n : IN STD_LOGIC;
    result_r_V_write : OUT STD_LOGIC;
    result_c_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_c_V_full_n : IN STD_LOGIC;
    result_c_V_write : OUT STD_LOGIC );
end;


architecture behav of compute_pro is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (53 downto 0) := "000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (53 downto 0) := "000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (53 downto 0) := "000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (53 downto 0) := "000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (53 downto 0) := "000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (53 downto 0) := "000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (53 downto 0) := "000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (53 downto 0) := "000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (53 downto 0) := "000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (53 downto 0) := "001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (53 downto 0) := "010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (53 downto 0) := "100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal block_cnt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_318 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_1350_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_nbreadreq_fu_104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_nbwritereq_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1351_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal rLoops_fu_343_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rLoops_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal cLoops_fu_362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cLoops_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1344_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1349_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal nLoops_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal nLoops_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal or_cond_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_588_reg_593 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_589_reg_598 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal brmerge_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal tn_1_fu_458_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tn_1_reg_620 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tr_1_fu_507_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tr_1_reg_634 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal output_temp_addr_1_reg_639 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tc_1_fu_527_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tc_1_reg_648 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_1355_reg_653 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal output_temp_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_temp_load_reg_668 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_reg_673 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_590_reg_684 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal output_reg_reg_689 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal output_temp_ce0 : STD_LOGIC;
    signal output_temp_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_temp_ce1 : STD_LOGIC;
    signal output_temp_we1 : STD_LOGIC;
    signal output_temp_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tn_reg_208 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal acc_datftr_reg_220 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tr_reg_232 : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_datftc_reg_243 : STD_LOGIC_VECTOR (15 downto 0);
    signal tc_reg_255 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1352_fu_493_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond7_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_284_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_295_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_304_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp16_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tn_cast_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp19_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp22_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tr_cast_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tc_cast_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_block_state1 : BOOLEAN;

    component moblie_net_sitofpchv IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component moblie_net_sptohpciv IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component moblie_net_hadd_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component moblie_net_hdiv_1cjv IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component compute_pro_outpucgu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    output_temp_U : component compute_pro_outpucgu
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_temp_addr_1_reg_639,
        ce0 => output_temp_ce0,
        q0 => output_temp_q0,
        address1 => output_temp_address1,
        ce1 => output_temp_ce1,
        we1 => output_temp_we1,
        d1 => output_temp_d1);

    moblie_net_sitofpchv_U2843 : component moblie_net_sitofpchv
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_266_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p1);

    moblie_net_sitofpchv_U2844 : component moblie_net_sitofpchv
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rLoops_reg_559,
        ce => ap_const_logic_1,
        dout => grp_fu_269_p1);

    moblie_net_sptohpciv_U2845 : component moblie_net_sptohpciv
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_313,
        ce => ap_const_logic_1,
        dout => grp_fu_272_p1);

    moblie_net_sptohpciv_U2846 : component moblie_net_sptohpciv
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1344_reg_573,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p1);

    moblie_net_hadd_1bkb_U2847 : component moblie_net_hadd_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => grp_fu_278_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    moblie_net_hdiv_1cjv_U2848 : component moblie_net_hdiv_1cjv
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_284_p0,
        din1 => grp_fu_284_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_1352_fu_493_p1 = ap_const_lv1_0) and (tmp_17_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    acc_datftc_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                acc_datftc_reg_243 <= grp_fu_278_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_22_fu_502_p2 = ap_const_lv1_1))) then 
                acc_datftc_reg_243 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    acc_datftr_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                acc_datftr_reg_220 <= grp_fu_278_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_17_fu_453_p2 = ap_const_lv1_1))) then 
                acc_datftr_reg_220 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    block_cnt_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (or_cond7_fu_481_p2 = ap_const_lv1_1))) then 
                block_cnt <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                block_cnt <= tmp_10_fu_393_p2;
            end if; 
        end if;
    end process;

    tc_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                tc_reg_255 <= tc_1_reg_648;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_22_fu_502_p2 = ap_const_lv1_1))) then 
                tc_reg_255 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tn_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                tn_reg_208 <= tn_1_reg_620;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                tn_reg_208 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tr_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                tr_reg_232 <= tr_1_reg_634;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_17_fu_453_p2 = ap_const_lv1_1))) then 
                tr_reg_232 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                brmerge_reg_613 <= brmerge_fu_443_p2;
                nLoops_reg_584 <= nLoops_fu_385_p3;
                or_cond_reg_589 <= or_cond_fu_415_p2;
                tmp_15_reg_603 <= tmp_15_fu_421_p2;
                tmp_16_reg_608 <= tmp_16_fu_426_p2;
                tmp_588_reg_593 <= grp_fu_272_p1;
                tmp_589_reg_598 <= grp_fu_275_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cLoops_reg_566 <= cLoops_fu_362_p3;
                rLoops_reg_559 <= rLoops_fu_343_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                output_reg_reg_689 <= grp_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_502_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                output_temp_addr_1_reg_639 <= tmp_24_fu_513_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                output_temp_load_reg_668 <= output_temp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_313 <= grp_fu_266_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_318 <= grp_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tc_1_reg_648 <= tc_1_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_1344_reg_573 <= grp_fu_269_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_1349_reg_578 <= data_n_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_9_nbwritereq_fu_112_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1))) then
                tmp_1350_reg_543 <= data_r_V_dout;
                tmp_1351_reg_551 <= data_c_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_26_fu_522_p2 = ap_const_lv1_1))) then
                tmp_1355_reg_653 <= input_buffer_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_25_reg_673 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                tmp_590_reg_684 <= grp_fu_272_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tn_1_reg_620 <= tn_1_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tr_1_reg_634 <= tr_1_fu_507_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_nbreadreq_fu_104_p3, tmp_9_nbwritereq_fu_112_p3, brmerge_reg_613, ap_CS_fsm_state14, ap_CS_fsm_state15, tmp_22_fu_502_p2, ap_CS_fsm_state16, tmp_26_fu_522_p2, ap_CS_fsm_state39, tmp_17_fu_453_p2, tmp_1352_fu_493_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((tmp_9_nbwritereq_fu_112_p3 = ap_const_lv1_0) or (tmp_nbreadreq_fu_104_p3 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((tmp_1352_fu_493_p1 = ap_const_lv1_0) and (tmp_17_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((tmp_17_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_1352_fu_493_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_22_fu_502_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state16 => 
                if (((tmp_26_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (brmerge_reg_613 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state14, tmp_17_fu_453_p2, tmp_1352_fu_493_p1)
    begin
        if (((tmp_1352_fu_493_p1 = ap_const_lv1_0) and (tmp_17_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, tmp_17_fu_453_p2, tmp_1352_fu_493_p1)
    begin
        if (((tmp_1352_fu_493_p1 = ap_const_lv1_0) and (tmp_17_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_fu_443_p2 <= (icmp_fu_431_p2 or icmp16_fu_437_p2);
    cLoops_fu_362_p3 <= 
        ap_const_lv32_8 when (tmp_7_fu_356_p2(0) = '1') else 
        tmp_6_fu_351_p2;

    data_buffer_V_read_assign_proc : process(data_buffer_V_empty_n, ap_CS_fsm_state14, tmp_17_fu_453_p2)
    begin
        if (((tmp_17_fu_453_p2 = ap_const_lv1_0) and (data_buffer_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            data_buffer_V_read <= ap_const_logic_1;
        else 
            data_buffer_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_c_V_read_assign_proc : process(data_c_V_empty_n, ap_CS_fsm_state3, tmp_nbreadreq_fu_104_p3, tmp_9_nbwritereq_fu_112_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (data_c_V_empty_n = ap_const_logic_1) and (tmp_9_nbwritereq_fu_112_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1))) then 
            data_c_V_read <= ap_const_logic_1;
        else 
            data_c_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_n_V_read_assign_proc : process(data_n_V_empty_n, ap_CS_fsm_state12)
    begin
        if (((data_n_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            data_n_V_read <= ap_const_logic_1;
        else 
            data_n_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_r_V_read_assign_proc : process(data_r_V_empty_n, ap_CS_fsm_state3, tmp_nbreadreq_fu_104_p3, tmp_9_nbwritereq_fu_112_p3)
    begin
        if (((data_r_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_9_nbwritereq_fu_112_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1))) then 
            data_r_V_read <= ap_const_logic_1;
        else 
            data_r_V_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_266_p0_assign_proc : process(block_cnt, cLoops_reg_566, ap_CS_fsm_state39, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_266_p0 <= block_cnt;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_266_p0 <= cLoops_reg_566;
        else 
            grp_fu_266_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p0_assign_proc : process(reg_318, tmp_1355_reg_653, output_temp_load_reg_668, ap_CS_fsm_state17, ap_CS_fsm_state26, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_278_p0 <= output_temp_load_reg_668;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_278_p0 <= reg_318;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_278_p0 <= tmp_1355_reg_653;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p1_assign_proc : process(reg_318, acc_datftr_reg_220, acc_datftc_reg_243, ap_CS_fsm_state17, ap_CS_fsm_state26, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_278_p1 <= reg_318;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_278_p1 <= acc_datftr_reg_220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_278_p1 <= acc_datftc_reg_243;
        else 
            grp_fu_278_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_284_p0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_25_reg_673, acc_datftr_reg_220, acc_datftc_reg_243, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_284_p0 <= tmp_25_reg_673;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_284_p0 <= acc_datftc_reg_243;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_284_p0 <= acc_datftr_reg_220;
        else 
            grp_fu_284_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_284_p1_assign_proc : process(tmp_588_reg_593, tmp_589_reg_598, ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_590_reg_684, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_284_p1 <= tmp_590_reg_684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_284_p1 <= tmp_588_reg_593;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_284_p1 <= tmp_589_reg_598;
        else 
            grp_fu_284_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_295_p1_assign_proc : process(ap_CS_fsm_state13, tmp_15_fu_421_p2, tmp_15_reg_603, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_295_p1 <= tmp_15_reg_603;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_295_p1 <= tmp_15_fu_421_p2;
        else 
            grp_fu_295_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_295_p4 <= grp_fu_295_p1(31 downto 4);

    grp_fu_304_p1_assign_proc : process(ap_CS_fsm_state13, tmp_16_fu_426_p2, tmp_16_reg_608, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_304_p1 <= tmp_16_reg_608;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_304_p1 <= tmp_16_fu_426_p2;
        else 
            grp_fu_304_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_304_p4 <= grp_fu_304_p1(31 downto 4);
    icmp16_fu_437_p2 <= "1" when (signed(grp_fu_304_p4) < signed(ap_const_lv28_1)) else "0";
    icmp19_fu_469_p2 <= "1" when (signed(grp_fu_295_p4) > signed(ap_const_lv28_0)) else "0";
    icmp22_fu_475_p2 <= "1" when (signed(grp_fu_304_p4) > signed(ap_const_lv28_0)) else "0";
    icmp_fu_431_p2 <= "1" when (signed(grp_fu_295_p4) < signed(ap_const_lv28_1)) else "0";

    input_buffer_V_read_assign_proc : process(input_buffer_V_empty_n, ap_CS_fsm_state16, tmp_26_fu_522_p2)
    begin
        if (((input_buffer_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_26_fu_522_p2 = ap_const_lv1_1))) then 
            input_buffer_V_read <= ap_const_logic_1;
        else 
            input_buffer_V_read <= ap_const_logic_0;
        end if; 
    end process;

    nLoops_fu_385_p3 <= 
        ap_const_lv32_8 when (tmp_3_fu_379_p2(0) = '1') else 
        tmp_s_fu_374_p2;
    or_cond7_fu_481_p2 <= (icmp22_fu_475_p2 and icmp19_fu_469_p2);
    or_cond_fu_415_p2 <= (tmp_12_fu_410_p2 and tmp_11_fu_405_p2);
    output_buffer_V_din <= output_reg_reg_689;

    output_buffer_V_write_assign_proc : process(output_buffer_V_full_n, brmerge_reg_613, ap_CS_fsm_state54)
    begin
        if (((output_buffer_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54) and (brmerge_reg_613 = ap_const_lv1_0))) then 
            output_buffer_V_write <= ap_const_logic_1;
        else 
            output_buffer_V_write <= ap_const_logic_0;
        end if; 
    end process;


    output_temp_address1_assign_proc : process(ap_CS_fsm_state14, output_temp_addr_1_reg_639, ap_CS_fsm_state39, tmp_21_fu_464_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_temp_address1 <= output_temp_addr_1_reg_639;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_temp_address1 <= tmp_21_fu_464_p1(3 - 1 downto 0);
        else 
            output_temp_address1 <= "XXX";
        end if; 
    end process;


    output_temp_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            output_temp_ce0 <= ap_const_logic_1;
        else 
            output_temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_temp_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_temp_ce1 <= ap_const_logic_1;
        else 
            output_temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_temp_d1_assign_proc : process(ap_CS_fsm_state14, tmp_25_reg_673, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_temp_d1 <= tmp_25_reg_673;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_temp_d1 <= ap_const_lv16_0;
        else 
            output_temp_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_temp_we1_assign_proc : process(or_cond_reg_589, ap_CS_fsm_state14, ap_CS_fsm_state39, tmp_17_fu_453_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_17_fu_453_p2 = ap_const_lv1_1) and (or_cond_reg_589 = ap_const_lv1_1)))) then 
            output_temp_we1 <= ap_const_logic_1;
        else 
            output_temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    rLoops_fu_343_p3 <= 
        ap_const_lv32_8 when (tmp_5_fu_337_p2(0) = '1') else 
        tmp_4_fu_332_p2;
    result_buffer_V_din <= data_buffer_V_dout;

    result_buffer_V_write_assign_proc : process(result_buffer_V_full_n, ap_CS_fsm_state14, tmp_17_fu_453_p2)
    begin
        if (((tmp_17_fu_453_p2 = ap_const_lv1_0) and (result_buffer_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            result_buffer_V_write <= ap_const_logic_1;
        else 
            result_buffer_V_write <= ap_const_logic_0;
        end if; 
    end process;

    result_c_V_din <= tmp_1351_reg_551;

    result_c_V_write_assign_proc : process(result_c_V_full_n, ap_CS_fsm_state14, tmp_17_fu_453_p2)
    begin
        if (((tmp_17_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (result_c_V_full_n = ap_const_logic_1))) then 
            result_c_V_write <= ap_const_logic_1;
        else 
            result_c_V_write <= ap_const_logic_0;
        end if; 
    end process;

    result_n_V_din <= tmp_1349_reg_578;

    result_n_V_write_assign_proc : process(result_n_V_full_n, ap_CS_fsm_state14, tmp_17_fu_453_p2)
    begin
        if (((tmp_17_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (result_n_V_full_n = ap_const_logic_1))) then 
            result_n_V_write <= ap_const_logic_1;
        else 
            result_n_V_write <= ap_const_logic_0;
        end if; 
    end process;

    result_r_V_din <= tmp_1350_reg_543;

    result_r_V_write_assign_proc : process(result_r_V_full_n, ap_CS_fsm_state14, tmp_17_fu_453_p2)
    begin
        if (((tmp_17_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14) and (result_r_V_full_n = ap_const_logic_1))) then 
            result_r_V_write <= ap_const_logic_1;
        else 
            result_r_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tc_1_fu_527_p2 <= std_logic_vector(unsigned(tc_reg_255) + unsigned(ap_const_lv4_1));
    tc_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tc_reg_255),32));
    tmp_10_fu_393_p2 <= std_logic_vector(unsigned(block_cnt) + unsigned(ap_const_lv32_1));
    tmp_11_fu_405_p2 <= "1" when (signed(tmp_1350_reg_543) < signed(ap_const_lv32_1)) else "0";
    tmp_12_fu_410_p2 <= "1" when (signed(tmp_1351_reg_551) < signed(ap_const_lv32_1)) else "0";
    tmp_1352_fu_493_p1 <= (0=>data_buffer_V_dout, others=>'-');
    tmp_15_fu_421_p2 <= std_logic_vector(unsigned(tmp_1350_reg_543) + unsigned(rLoops_reg_559));
    tmp_16_fu_426_p2 <= std_logic_vector(unsigned(tmp_1351_reg_551) + unsigned(cLoops_reg_566));
    tmp_17_fu_453_p2 <= "1" when (signed(tn_cast_fu_449_p1) < signed(nLoops_reg_584)) else "0";
    tmp_21_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_reg_208),64));
    tmp_22_fu_502_p2 <= "1" when (signed(tr_cast_fu_498_p1) < signed(rLoops_reg_559)) else "0";
    tmp_24_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_reg_208),64));
    tmp_26_fu_522_p2 <= "1" when (signed(tc_cast_fu_518_p1) < signed(cLoops_reg_566)) else "0";
    tmp_3_fu_379_p2 <= "1" when (signed(tmp_s_fu_374_p2) > signed(ap_const_lv32_8)) else "0";
    tmp_4_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(tmp_1350_reg_543));
    tmp_5_fu_337_p2 <= "1" when (signed(tmp_4_fu_332_p2) > signed(ap_const_lv32_8)) else "0";
    tmp_6_fu_351_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(tmp_1351_reg_551));
    tmp_7_fu_356_p2 <= "1" when (signed(tmp_6_fu_351_p2) > signed(ap_const_lv32_8)) else "0";
    tmp_9_nbwritereq_fu_112_p3 <= (0=>result_buffer_V_full_n, others=>'-');
    tmp_nbreadreq_fu_104_p3 <= (0=>data_buffer_V_empty_n, others=>'-');
    tmp_s_fu_374_p2 <= std_logic_vector(unsigned(ap_const_lv32_200) - unsigned(tmp_1349_reg_578));
    tn_1_fu_458_p2 <= std_logic_vector(unsigned(tn_reg_208) + unsigned(ap_const_lv4_1));
    tn_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tn_reg_208),32));
    tr_1_fu_507_p2 <= std_logic_vector(unsigned(tr_reg_232) + unsigned(ap_const_lv4_1));
    tr_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr_reg_232),32));
end behav;
